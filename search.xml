<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一致性 Hash 算法 (Consistent Hash)</title>
    <url>/2022/01/24/2022-01-24-%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95-(Consistent-Hash)/</url>
    <content><![CDATA[<p>一致性哈希 (Consistent hashing) 算法在1997年由 <code>David Karger</code> 在其论文<a href="https://dl.acm.org/doi/10.1145/258533.258660">Consistent hashing and random trees: distributed caching protocols for relieving hot spots on the World Wide Web</a>中提出，现在广泛应用于分布式缓存中。</p>
<span id="more"></span>

<h2 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h2><p>假设我们现在有 100W 对象需要存储在 Redis 缓存当中，我们当前有 4 台 Redis 服务器，用来做分布式缓存，一种简单方法是使用随机分配的方式，将我们想要存储的对象，随机分配给 4 台缓存服务器进行存储，但是当我们需要取数据时，无法确定的知道目标对象在哪一个服务器当中，这样在最坏的情况下，需要访问 4 次缓存服务器，才能取到我们想要的值。</p>
<h2 id="余数Hash"><a href="#余数Hash" class="headerlink" title="余数Hash"></a>余数Hash</h2><p>为了解决上述问题，可以使用余数Hash，来确定目标数据在哪一个缓存服务器上，还是上述例子，比如我们想要取得 <code>key=key1</code> 的对象 <code>object1</code>，我们需要将其 <code>key1</code> 的哈希值对缓存服务器个数取余，即 <code>hash(key1) % 4</code>,其结果则是目标对象所在的服务器位置，当然将对象放入缓存服务器时，也要按照该取余规则操作。</p>
<h2 id="缓存服务器数量改变"><a href="#缓存服务器数量改变" class="headerlink" title="缓存服务器数量改变"></a>缓存服务器数量改变</h2><p>当缓存服务器的数量发生改变时，上述余数哈希算法将会出现问题，在现实情况下，缓存服务器的数量肯能会发生变化，比如其中有一台服务器宕机了，数量从 <code>n</code> 台变成了 <code>n-1</code> 台，这时原来的公式 <code>hash(key) % n</code> 变为了 <code>hash(key) % (n-1)</code>,这意味着几乎所有的映射关系都发生了改变，无法命中缓存，同样的当访问量加重时，我们需要增加缓存服务器的数量，也会发生上述问题。</p>
<p>缓存服务器的数量发生变动时，大部分缓存一定时间内是失效的，在缓存重建的这段时间内，所有的请求都会从数据库获取数据，容易导致缓存雪崩问题。</p>
<h2 id="一致性-Hash-算法原理"><a href="#一致性-Hash-算法原理" class="headerlink" title="一致性 Hash 算法原理"></a>一致性 Hash 算法原理</h2><p>一致性 Hash 算法通过构建环状的哈希空间来解决此问题，需要如下 3 步：</p>
<ul>
<li>一般将哈希空间构建成一个首尾相连的环，大小为 32 位</li>
<li>将服务器的哈希值映射到 <code>0</code> 到 $2^{32}-1$ 之间</li>
<li>将缓存数据 <code>key</code> 值的哈希值同样映射到 <code>0</code> 到 $2^{32}-1$ 之间，然后在哈希环上顺时针查找距离这个 <code>key</code> 的哈希值最近的缓存服务器节点，即为该数据要存储的缓存服务器位置。</li>
</ul>
<p>如下图所示，节点 <code>k0</code>, <code>k2</code> 被存储在 <code>Node0</code> 存储服务器上，节点 <code>k4</code>, <code>k5</code> 被存储在 <code>Node2</code> 缓存服务器上，节点 <code>k1</code>, <code>k3</code> 被存储在 <code>Node1</code> 存储服务器上。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131818210.png"></p>
<p>这样缓存服务器宕机，或者新增缓存服务器时，仅有一小部分数据会受到影响，可以保证大部分缓存数据还是可以命中的。</p>
<p>下面 2 个图分别展示了缓存服务器节点数量减少和增加时的情况。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131818770.png"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131818604.png"></p>
<h2 id="节点不平衡"><a href="#节点不平衡" class="headerlink" title="节点不平衡"></a>节点不平衡</h2><p>当哈希环上的节点数量较少时，新增或减少节点数量，容易造成不同节点上的缓存数据量与负载压力是不平衡的，像上面 3 个图一样，初始时每个缓存服务器节点都存储了 2 个数据，但是当减少或增加一个节点后，不同节点的缓存数据量和负载压力变得不平衡起来</p>
<h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>解决这个问题的方法是，在哈希环上增加节点，当节点较多时，新增和减少几个节点对平衡性的影响较小。我们这里增加的节点使用虚拟节点的方式，如图所示，比如一个缓存服务器 <code>Node0</code> 分为 3 个虚拟节点 <code>VN00</code>, <code>VN01</code> 和 <code>VN02</code>，将这3个虚拟节点映射到哈希环上，当进行数据的存取时，首先根据数据的 <code>hash(key)</code> 找到对应的虚拟节点，然后再根据虚拟节点找到真实的缓存服务器，由于哈希环上的节点数量增多了，使得分布更加随机化，更加平衡。物理服务器数量少时，需要更多的虚拟节点，当物理服务器数量多时，虚拟节点就少一点。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>1、首先因为需要一个哈希环，并且需要顺时针寻找，所以这个哈希环应该是有序的，这里选用的数据结构为红黑树，红黑树可以存储有序的数据，<code>TreeMap</code> 实现了红黑树，并且 <code>TreeMap</code> 的 <code>ceilingEntry(K key)</code> 可以获取 <code>key</code> 值右边的第一个节点，如果节点为空，则取第一个节点。</p>
<p>2、一致性哈希需要计算缓存服务器的哈希值，使得其较为均匀的分布在哈希环上，这里我们将缓存服务器的 <code>ip:port</code> 作为 <code>key</code> 值，使用 <code>String</code> 自带的 <code>hashCode()</code> 方法来看一下计算出来的哈希值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;192.168.0.0:111 的哈希值：&quot;</span> + Math.abs(<span class="string">&quot;192.168.0.0:111&quot;</span>.hashCode()));</span><br><span class="line">    System.out.println(<span class="string">&quot;192.168.0.1:111 的哈希值：&quot;</span> + Math.abs(<span class="string">&quot;192.168.0.1:111&quot;</span>.hashCode()));</span><br><span class="line">    System.out.println(<span class="string">&quot;192.168.0.2:111 的哈希值：&quot;</span> + Math.abs(<span class="string">&quot;192.168.0.2:111&quot;</span>.hashCode()));</span><br><span class="line">    System.out.println(<span class="string">&quot;192.168.0.3:111 的哈希值：&quot;</span> + Math.abs(<span class="string">&quot;192.168.0.3:111&quot;</span>.hashCode()));</span><br><span class="line">    System.out.println(<span class="string">&quot;192.168.0.4:111 的哈希值：&quot;</span> + Math.abs(<span class="string">&quot;192.168.0.4:111&quot;</span>.hashCode()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** output **/</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">111</span> 的哈希值：<span class="number">771739798</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">111</span> 的哈希值：<span class="number">770816277</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">111</span> 的哈希值：<span class="number">769892756</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.3</span>:<span class="number">111</span> 的哈希值：<span class="number">768969235</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.4</span>:<span class="number">111</span> 的哈希值：<span class="number">768045714</span></span><br></pre></td></tr></table></figure>

<p>明显可以看到，在 $[0,2^{32}-1]$ 这个大区间中，5 个 哈希值仅仅分布在一个小区间，导致某个服务器的负载会特别大。因此需要一种新的计算哈希值的方法，比如 <code>CRC32_HASH</code>、<code>FNV1_32_HASH</code>、<code>KETAMA_HASH</code> 等，其中 <code> KETAMA_HASH</code> 是默认的 <code>Reids</code> 推荐的一致性哈希算法。</p>
<p>3、以下是带有虚拟节点的一致性哈希算法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortedMapWithVirtualNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> FNV_32_INIT = <span class="number">2166136261L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FNV_32_PRIME = <span class="number">16777619</span>;</span><br><span class="line">    <span class="keyword">private</span> TreeMap&lt;Integer, String&gt; treeMapHash = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用FNV1_32_HASH算法计算哈希值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHashCode</span><span class="params">(String origin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> p = FNV_32_PRIME;</span><br><span class="line">        <span class="keyword">int</span> hash = (<span class="keyword">int</span>)FNV_32_INIT;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; origin.length(); i++) &#123;</span><br><span class="line">            hash = (hash ^ origin.charAt(i)) * p;</span><br><span class="line">        &#125;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">13</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">5</span>;</span><br><span class="line">        hash = Math.abs(hash);</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加服务器节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addServerNode</span><span class="params">(String serverNodeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = getHashCode(serverNodeName);</span><br><span class="line">        treeMapHash.put(hash, serverNodeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除服务器节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delServerNode</span><span class="params">(String serverNodeName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = getHashCode(serverNodeName);</span><br><span class="line">        treeMapHash.remove(hash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据key值，获取该数据应该存储的服务器节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectServerNode</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = getHashCode(key);</span><br><span class="line">        Map.Entry&lt;Integer, String&gt; subEntry = treeMapHash.ceilingEntry(hash);</span><br><span class="line">        subEntry = subEntry == <span class="keyword">null</span> ? treeMapHash.firstEntry() : subEntry;</span><br><span class="line">        String VNNode = subEntry.getValue();</span><br><span class="line">        <span class="keyword">return</span> VNNode.substring(<span class="number">0</span>, VNNode.indexOf(<span class="string">&quot;&amp;&amp;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SortedMapWithVirtualNode consistentHash = <span class="keyword">new</span> SortedMapWithVirtualNode();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; serverList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 构造服务器数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String s = <span class="keyword">new</span> StringBuilder().append(<span class="string">&quot;192.168.0.&quot;</span>).append(String.valueOf(i)).toString();</span><br><span class="line">            serverList.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将服务器的虚拟节点添加到 Hash 环中</span></span><br><span class="line">        <span class="keyword">for</span> (String s : serverList) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String VNNode = s + <span class="string">&quot;&amp;&amp;VN&quot;</span> + String.valueOf(i);</span><br><span class="line">                consistentHash.addServerNode(VNNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 假设需要存储或者获取用户Jack的token信息 (&#x27;user-Jack&#x27;, &#x27;xxxxxxxxxxxxxx&#x27;)</span></span><br><span class="line">        <span class="comment">// 得到该信息所应该存储的服务器</span></span><br><span class="line">        System.out.println(consistentHash.selectServerNode(<span class="string">&quot;user-Jack&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** output **/</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>简单搭建 Redis Cluster 集群实践</title>
    <url>/2022/08/07/2022-08-07-%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%20Redis%20Cluster%20%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><code>Redis Cluster</code> 是一种服务器 Sharding 技术，从 3.0 版本开始正式提供。Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 Redis 3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，<strong>也就是说每台 Redis 节点上存储不同的内容</strong>。</p>
<p>本文主要介绍如何搭建简单的 Redis Cluster 集群，包括如何在本地环境、Docker 环境，以及在 K8S 环境下搭建。需要注意的是本文搭建的集群只是 3 个 master 组成的，并没有 slave，所以并不是高可用的，只是简单的用来演示。</p>
<span id="more"></span>

<h2 id="本地搭建三主-Redis-Cluster"><a href="#本地搭建三主-Redis-Cluster" class="headerlink" title="本地搭建三主 Redis Cluster"></a>本地搭建三主 Redis Cluster</h2><p>本地搭建三主 Redis Cluster 过程很简单，主要就是准备相应的配置文件，然后将 3 台 redis 实例启动后，在使用 <code>redis-cli</code> 命令初始化集群即可。</p>
<h3 id="1-下载-redis"><a href="#1-下载-redis" class="headerlink" title="1. 下载 redis"></a>1. 下载 redis</h3><p>MacOS 下载安装 redis 最简单的方法就是使用 <code>brew</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>

<p>使用 <code>brew</code> 安装好之后，相应的 <code>redis-server </code>和 <code>redis-cli</code> 命令都可以使用了。</p>
<p>如果想知道通过 <code>brew</code> 安装的 redis 在哪，可以使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew list redis</span><br></pre></td></tr></table></figure>

<h3 id="2-修改相应的配置文件，然后启动-3-台-redis-实例。"><a href="#2-修改相应的配置文件，然后启动-3-台-redis-实例。" class="headerlink" title="2. 修改相应的配置文件，然后启动 3 台 redis 实例。"></a>2. 修改相应的配置文件，然后启动 3 台 redis 实例。</h3><p>这里使用的 3 台 redis 实例端口号分别为 7001，7002 和 7003, 相应的配置文件只有 <code>port</code> 不同，相比较标准的 redis 配置文件 <code>redis.conf</code>，只需要修改下面的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port 7001</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">appendonly yes</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file &quot;nodes.conf&quot;</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">protected-mode no</span><br><span class="line">tcp-keepalive 300</span><br></pre></td></tr></table></figure>

<p>修改完后使用命令分别启动 3 台 redis 实例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>

<h3 id="3-初始化集群"><a href="#3-初始化集群" class="headerlink" title="3. 初始化集群"></a>3. 初始化集群</h3><p>这里只是先启动了 3 台 redis， 还并没有组成集群。可以通过 <code>redis-cli</code> 命令登陆一台 redis 之后，查看相应的 <code>cluster info</code>， 发现并没有相应的集群信息</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131818025.png"></p>
<p>并且进行相应的 get 和 set 等操作也会出错。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131818747.png"></p>
<p>之后通过 <code>redis-cli</code> 命令初始化集群，之前是需要使用 <code>redis-trib.rb</code> 脚本初始化集群，但是现在可以直接使用 <code>redis-cli</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003</span><br></pre></td></tr></table></figure>

<p>这里要注意，一开始我使用的命令是下面这条参考网上的，会有问题，因为网上基本都是搭建的三主三从的集群， <code>--cluster-replicas 1</code> 的意思是说一个 master 节点要对应一个 slave 节点，至少需要 6 台 redis， 我们这里没有 slave， 所以会出错。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003</span><br></pre></td></tr></table></figure>

<p>命令执行的时候会先显示相应的集群信息，然后输入 yes 后即可建立集群。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131819615.png"></p>
<h3 id="4-验证集群"><a href="#4-验证集群" class="headerlink" title="4. 验证集群"></a>4. 验证集群</h3><p>查看 <code>cluster info</code> 信息，发现已经有了相关的 slots, cluster_size 等信息</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131819147.png"></p>
<p>注意因为现在已经是集群模式，所以使用普通的独立实例模式登陆相应的 redis 进行操作会有问题</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131819563.png"></p>
<p>需要使用 <code>redis-cli </code>命令时加上 <code>-c</code> 参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -c -p 7001</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131819389.png"></p>
<h2 id="Docker-搭建三主-Redis-Cluster"><a href="#Docker-搭建三主-Redis-Cluster" class="headerlink" title="Docker 搭建三主 Redis Cluster"></a>Docker 搭建三主 Redis Cluster</h2><p>使用 Docker 环境搭建 redis cluster。这里先写搭建步骤，最后再写搭建过程中遇到的坑！</p>
<h3 id="1-创建-3-个-redis-instances"><a href="#1-创建-3-个-redis-instances" class="headerlink" title="1. 创建 3 个 redis instances"></a>1. 创建 3 个 redis instances</h3><p>首先使用下面的 <code>docker-compose.yml</code> 文件，搭建出 3 个 redis instances，使用命令 <code>docker-compose up -d</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:7.0.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-node-1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7001</span><span class="string">:7001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17001</span><span class="string">:17001</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--port</span> <span class="number">7001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-enabled</span> <span class="literal">yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-config-file</span> <span class="string">&quot;nodes.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-node-timeout</span> <span class="number">15000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--protected-mode</span> <span class="literal">no</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--tcp-keepalive</span> <span class="number">300</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-ip</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-port</span> <span class="number">7001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-bus-port</span> <span class="number">17001</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:7.0.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-node-2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7002</span><span class="string">:7002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17002</span><span class="string">:17002</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--port</span> <span class="number">7002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-enabled</span> <span class="literal">yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-config-file</span> <span class="string">&quot;nodes.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-node-timeout</span> <span class="number">15000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--protected-mode</span> <span class="literal">no</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--tcp-keepalive</span> <span class="number">300</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-ip</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-port</span> <span class="number">7002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-bus-port</span> <span class="number">17002</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:7.0.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-node-3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7003</span><span class="string">:7003</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17003</span><span class="string">:17003</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--port</span> <span class="number">7003</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-enabled</span> <span class="literal">yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-config-file</span> <span class="string">&quot;nodes.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-node-timeout</span> <span class="number">15000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--protected-mode</span> <span class="literal">no</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--tcp-keepalive</span> <span class="number">300</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-ip</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-port</span> <span class="number">7003</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--cluster-announce-bus-port</span> <span class="number">17003</span></span><br></pre></td></tr></table></figure>

<p>注意，在上面的 <code>docker-compose.yml</code> 文件中， <code>cluster-announce-ip</code> 为本机的 ip 地址，不能写 127.0.0.1、localhost 和 host.docker.internal 这些，原因后面会说。</p>
<h3 id="2-初始化集群"><a href="#2-初始化集群" class="headerlink" title="2. 初始化集群"></a>2. 初始化集群</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 192.168.0.100:7001 192.168.0.100:7002 192.168.0.100:7003</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131819980.png"></p>
<h3 id="3-验证集群"><a href="#3-验证集群" class="headerlink" title="3. 验证集群"></a>3. 验证集群</h3><p>和前面的方法一样，简单验证一下 get 等方法。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131819707.png"></p>
<h3 id="4-TroubleShooting"><a href="#4-TroubleShooting" class="headerlink" title="4. TroubleShooting"></a>4. TroubleShooting</h3><ul>
<li><p>ERR Invalid node address specified</p>
<p>这个错误的原因是 <code>redis-cli</code> 命令初始化集群时，是不允许使用域名的，只能用 ip，<code>redis-cli --cluster create</code> 命令和登陆一个 redis 实例，然后使用 <code>cluster meet ip</code> 是等价的， 都是不允许使用域名的，这也就解释了 <code>cluster-announce-ip</code> 不能使用 host.docker.internal，至于为什么不能使用 127.0.0.1 和 localhost， 因为 redis 是在一个容器中的，docker 会为每个容器分配自己的 network namespace，所以这里的 127.0.0.1 指的是容器自己本身，而不是宿主机本身。</p>
</li>
<li><p><code>--net host</code> 或者 <code>network_mode: host</code></p>
<p>使用 <code>host</code> 的网络模式，这样的话容器是共享的宿主机的 network，也就是说容器没有自己分配的 ip，和宿主机的网络是相同的，这样的话也不用指定端口映射关系了，而且这样我认为 redis 之间通信是可以使用 127.0.0.1 的。<a href="https://docs.docker.com/network/host/">但是遗憾的是 MacOS 和 Windows 不支持这种模式，只有 Linux 可以</a>，当时因为这个试了半天一直没想明白原因，然后才知道是不支持。</p>
</li>
<li><p>一定要配置 <code>cluster-announce-ip</code></p>
<p>有了上面的两点背景，导致我们在 Mac 上就一定要指定本机的 ip 才行，那么为什么要配置 <code>cluster-announce-ip</code> 这个呢？当时也踩了坑！因为 Mac 不支持 host 模式，所以我们创建出的容器，都会分配一个容器自己的 ip，这个 ip 是在容器自己的 networking namespace 下的。我们看一下不指定这个配置的现象。</p>
<p>下面是创建好的 3 个 redis 容器:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131819375.png"></p>
<p>以 redis-node-3 为例, 使用 <code>docker inspect $&#123;CONTAINER ID&#125;</code> 查看相关信息，可以发现这个容器有自己的 IPAddress</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131819374.png"></p>
<p>然后在我们初始化集群的时候，虽然命令使用的 ip 是 <code>192.168.0.100</code>，但是实际 redis 之间进行通信时，使用的却是 <code>172.23.0.3</code></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131820925.png"></p>
<p>虽然这里最后显示的是 ERROR，但是实际上集群已经初始化好了，可以进入任意一个 redis 容器内查看:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131820921.png"></p>
<p>虽然我们在容器内部的各种操作是没有什么问题的，但是我们在本地测试时，如果使用宿主机 ip，就会有问题，</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131820249.png"></p>
<p>宿主机显然是无法连接到容器自己的 networking namespace 下 ip 的，根据上面的现象可以发现，如果不置指定 <code>cluster-announce-ip</code> 的话，实际上初始化集群时使用的是容器自己的 ip。</p>
</li>
<li><p>Waiting for the cluster to join</p>
<p>还有一个问题就是在初始化集群时一直显示<em>Waiting for the cluster to join</em>，<a href="https://redis.io/docs/manual/scaling/#redis-cluster-tcp-ports">这个的原因是因为除了需要开放 redis 连接需要的端口外(e.g., 6379)，redis 之间通信还需要开放一个额外的端口，这个端口是在前面的端口号上加上 10000 (e.g., 16379)</a></p>
</li>
<li><p>一开始还遇到了一个很坑的问题，就是即使上面的问题都解决了，但是在本地无法通过宿主机 ip 登陆 redis <code>redis-cli -h 192.168.0.100 -p 7001</code>， ping 这个 ip 或者 127.0.0.1 也是不通，后来发现是因为我一开始用的是公司的电脑，公司电脑的防火墙选项中，<code>隐身模式</code> 是勾选上的，而且不能关掉，所以会有上面的问题，后来就在自己的电脑上做实验了。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131820975.png"></p>
</li>
<li><p>container_name not work</p>
<p>这个问题倒是不影响，只是当时挺奇怪的，因为我的 <code>docker-compose.yml</code> 文件放在了 <code>redis-cluster</code> 文件夹下面，然后 <code>container_name</code> 取得是 <code>redis-cluster-1, redis-cluster-2, redis-cluster-3</code>，然后创建好容器后发现 docker 上显示的 <code>container_name</code> 分别是 <code>1, 2, 3</code>，一开始还以为是配置有问题，然后把 <code>container_name</code> 改成了 <code>redis-node-1, redis-node-2, redis-node-3</code> 之后就显示正常了，这才注意到是因为文件夹的名字的原因。</p>
</li>
</ul>
<h2 id="K8S-搭建三主-Redis-Cluster"><a href="#K8S-搭建三主-Redis-Cluster" class="headerlink" title="K8S 搭建三主 Redis Cluster"></a>K8S 搭建三主 Redis Cluster</h2><h3 id="1-声明"><a href="#1-声明" class="headerlink" title="1. 声明"></a>1. 声明</h3><p>使用 K8S 搭建 Redis Cluster 集群， 需要创建有状态的 <code>StatefulSet</code> 类型，Redis 中存储的数据倒是次要原因，主要原因还是 Redis 中存储了和集群相关的信息，比如下面的配置文件中，集群信息会存储在 <code>cluster-config-file /data/nodes.conf</code>，如果是 Deployment 类型的，当 Pod 挂掉删除重启后，相应的数据也会消失，这样 Redis Cluster 就不能自行通过通信恢复，而是需要人为重新初始化，这里为了简单，也是为了了解两种方式之间的差别，先创建 Deployment 类型的 Redis Cluster 集群。</p>
<h3 id="2-创建集群"><a href="#2-创建集群" class="headerlink" title="2. 创建集群"></a>2. 创建集群</h3><p>使用下面的 <code>yml</code> 文件，在 K8S 中创建相应的资源，命令为 <code>kubectl apply -f xxx.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">16379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">16379</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gossip</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">update-node.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #!/bin/sh</span></span><br><span class="line"><span class="string">    REDIS_NODES=&quot;/data/nodes.conf&quot;</span></span><br><span class="line"><span class="string">    sed -i -e &quot;/myself/ s/[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;/$&#123;POD_IP&#125;/&quot; $&#123;REDIS_NODES&#125;</span></span><br><span class="line"><span class="string">    exec &quot;$@&quot;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">redis.conf:</span> <span class="string">|+</span></span><br><span class="line"><span class="string">    cluster-enabled yes</span></span><br><span class="line"><span class="string">    cluster-require-full-coverage no</span></span><br><span class="line"><span class="string">    cluster-node-timeout 15000</span></span><br><span class="line"><span class="string">    cluster-config-file /data/nodes.conf</span></span><br><span class="line"><span class="string">    protected-mode no</span></span><br><span class="line"><span class="string">    save &quot;&quot;</span></span><br><span class="line"><span class="string"></span><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">16379</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">gossip</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/conf/update-node.sh&quot;</span>, <span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;/conf/redis.conf&quot;</span>]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/conf</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">0755</span></span><br></pre></td></tr></table></figure>

<p>这样相应的 Redis Cluster 集群的资源就已经创建好了</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208160016068.png"></p>
<h3 id="3-初始化集群-1"><a href="#3-初始化集群-1" class="headerlink" title="3. 初始化集群"></a>3. 初始化集群</h3><p>当 K8S 的相关资源初始化之后，下一步就是初始化 Redis Cluster 集群，这一步即使是使用 <code>StatefulSet</code> 类型的，也是必不可少的，因为第一次初始化集群是都是要手动操作，只不过 <code>StatefulSet</code> 类型的之后就不再需要手动操作，而是会自身通过 Gossip 通信完成。</p>
<p>首先查看 3 个 Pod 的 IP 地址，因为我们创建了相应的 Service，所以可以直接通过查看 Service 的 Endpoints 来查看 3 个 Pod 的相应 IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl describe svc redis-cluster</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208160025098.png"></p>
<p>之后随便进入一个 Pod 中初始化集群即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl exec -it redis-cluster-b589bd6fb-47jk8 sh</span><br><span class="line">redis-cli --cluster create 172.17.0.11:6379 172.17.0.7:6379 172.17.0.8:6379</span><br></pre></td></tr></table></figure>

<h3 id="4-验证集群-1"><a href="#4-验证集群-1" class="headerlink" title="4. 验证集群"></a>4. 验证集群</h3><p>普通的验证 get 和 set 等方法和之前介绍的一样，这里验证一下当一个 Pod 重启后，是否可以恢复该集群，在重启 Pod 之前，我们先看一下 Pod 中的 <code>nodes.conf</code> 里记录的是什么:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208160041087.png"></p>
<p>分别是 Redis Cluster 中的 node 的 ID，这个是初始化集群时赋予的，不会被改变，后面跟着的是 node 的 IP:PORT，当我们删除掉 <code>redis-cluster-b589bd6fb-msbfp</code> 这个 Pod 后，K8S 会自动再创建一个</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208160049266.png"></p>
<p>这是进去查看 <code>nodes.conf</code> 文件，发现只有自己 node 本身的信息，因为 Deployment 是无状态的，上一个 Pod 删除之后相应的数据也都删除了，而且 Redis Cluster 集群也没有自动恢复。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208160056278.png"></p>
<p>进入没有重启的 node 节点查看相应的集群信息，会发现挂掉的 Pod 的 IP 信息，也变成了 <code>0@0</code> ，并不会保留之前的 IP 信息。(下面这张图是另一次实验的截图，所以 ID, IP 这些和其他的不对应)</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208160117893.png"></p>
<p>这时只能通过 <code>cluster meet IP PORT</code> 命令主动通信，恢复集群</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208160058176.png"></p>
<div class="note danger">
            <p>这里其实也是会有问题的，因为新生成的 Pod 对应的 node ID 也会产生变化，但是 node 之间通信如果节点的 ID 变化了，也不会通信成功。就像下面图中的一样，虽然在新的 Pod 节点上 meet 成功，但是发现他的节点 ID 发生了变化，之前是 d8e03*** 现在变成了 b4a61***， 所以虽然主动 meet 的 172.17.0.11 成功了， 但是随后自动通信的 172.17.0.7 是无法连接的， 而且还注意到重启的 Pod 如果节点 ID 发生了变化，也是没有 Slot 分配信息的，这种情况下就只能进行重建集群了。这也是为什么在 K8S 环境中搭建 Redis Cluster 集群需要使用 StatefulSet 的最主要原因。</p>
          </div>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208160131214.png"></p>
<h3 id="5-update-node-sh"><a href="#5-update-node-sh" class="headerlink" title="5. update-node.sh"></a>5. update-node.sh</h3><p>注意到上面的 yml 文件中有一段 <code>update-node.sh</code> 脚本，其实这段脚本是用在 <code>StatefulSet</code> 类型中用于自动恢复集群的，在 Deployment 类型中可以不用这段脚本，集群的自动恢复，主要就是通过 <code>nodes.conf</code> 里记录的各个 node 的 IP 信息来恢复的，但是当 Pod 重启之后，Pod 对应的 IP 可能会发生改变，所以即使使用 <code>StatefulSet</code> 类型，等 Pod 恢复后，原来的 <code>nodes.conf</code> 文件还在，但是如果 Pod 的 IP 发生了改变，也无法恢复集群。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">REDIS_NODES=&quot;/data/nodes.conf&quot;</span><br><span class="line">sed -i -e &quot;/myself/ s/[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;/$&#123;POD_IP&#125;/&quot; $&#123;REDIS_NODES&#125;</span><br><span class="line">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>

<p>这段脚本的作用就是，在 Pod 恢复之后，把 <code>nodes.conf</code> 中的 <code>myself</code> 的 IP 信息， 更改为当前 Pod 的 POD_IP，这个 POD_IP 是通过环境变量 <code>status.podIP</code> 获取到的，这样集群就可以自动恢复。</p>
<div class="note danger">
            <p>后来经过试验发现，<code>update-node.sh</code> 这段代码可能并不是必须的，redis 集群在通信时会自动更新自己节点的新 IP，实验步骤如下：</p><ul><li><p>本地启动 3 个 redis，并组成集群，redis 地址分别为: 127.0.0.1:7001, 127.0.0.1:7002, 127.0.0.1:7003</p><p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210141423079.png"></p></li><li><p>关闭 127.0.0.1:7003 这台 redis</p><p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210141424410.png"></p></li><li><p>更改 127.0.0.1:7003 这台 redis 的配置，将其端口号改为 7004，来模拟 IP 发生变动，启动该 redis。</p><p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210141425188.png"></p></li></ul><p>可以发现 <code>nodes.conf</code> 中的 IP 地址是会自动更新的，有可能是因为 7001 和 7002 这两个 redis 是好的，7004 根据  <code>nodes.conf</code> 中的记录，可以正确的与 7001、7002 通信，通信成功之后，7001 和 7002 会发现第 3 台 redis 的地址已经变成了 127.0.0.1:7004，然后会将该信息在集群中进行传播，自动更新 <code>nodes.conf</code> 中的内容，所以 <code>update-node.sh</code> 脚本不是必要的。</p><p>另外一点: 如果当所有的 redis 节点的 IP 都改变了，这时应该集群是不能自动恢复正常的。</p>
          </div>

<h3 id="6-StatefulSet"><a href="#6-StatefulSet" class="headerlink" title="6. StatefulSet"></a>6. StatefulSet</h3><p>下面提供了可用的 StatefulSet 类型的 YAML 文件，具体搭建集群步骤和上面的 Deployment 一样，先创建好资源，然后初始化集群即可，这里不再赘述。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">update-node.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #!/bin/sh</span></span><br><span class="line"><span class="string">    REDIS_NODES=&quot;/data/nodes.conf&quot;</span></span><br><span class="line"><span class="string">    sed -i -e &quot;/myself/ s/[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;/$&#123;POD_IP&#125;/&quot; $&#123;REDIS_NODES&#125;</span></span><br><span class="line"><span class="string">    exec &quot;$@&quot;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">redis.conf:</span> <span class="string">|+</span></span><br><span class="line"><span class="string">    cluster-enabled yes</span></span><br><span class="line"><span class="string">    cluster-require-full-coverage no</span></span><br><span class="line"><span class="string">    cluster-node-timeout 15000</span></span><br><span class="line"><span class="string">    cluster-config-file /data/nodes.conf</span></span><br><span class="line"><span class="string">    cluster-migration-barrier 1</span></span><br><span class="line"><span class="string">    protected-mode no</span></span><br><span class="line"><span class="string">    maxmemory 2000000000</span></span><br><span class="line"><span class="string">    save &quot;&quot;</span></span><br><span class="line"><span class="string"></span><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">redis:latest</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">16379</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">gossip</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/conf/update-node.sh&quot;</span>, <span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;/conf/redis.conf&quot;</span>]</span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/conf</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">0755</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">      <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">accessModes:</span> [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">        <span class="attr">storageClassName:</span> <span class="string">standard</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">16379</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">16379</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">gossip</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br></pre></td></tr></table></figure>

<div class="note info">
            <h4 id="几个参数介绍"><a href="#几个参数介绍" class="headerlink" title="几个参数介绍"></a>几个参数介绍</h4><ul><li><p>cluster-require-full-coverage 为 no 时，表示当一个 master 节点 down 掉之后并且没有 slave 节点进行故障恢复时，集群仍然可用。</p></li><li><p>cluster-migration-barrier &lt;num&gt; 用来决定 slave 数量达到多少个才会把冗余 slave 漂移出去。</p></li></ul>
          </div>

<h2 id="create-cluster-快速搭建三主三从集群"><a href="#create-cluster-快速搭建三主三从集群" class="headerlink" title="create-cluster 快速搭建三主三从集群"></a>create-cluster 快速搭建三主三从集群</h2><h3 id="1-从官网下载-Redis-源码"><a href="#1-从官网下载-Redis-源码" class="headerlink" title="1. 从官网下载 Redis 源码"></a>1. 从<a href="https://redis.io/download/">官网</a>下载 Redis 源码</h3><p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209082315050.png"></p>
<h3 id="2-官方提供了-create-cluster-工具快速搭建集群"><a href="#2-官方提供了-create-cluster-工具快速搭建集群" class="headerlink" title="2. 官方提供了 create-cluster 工具快速搭建集群"></a>2. 官方提供了 <code>create-cluster</code> 工具快速搭建集群</h3><p>脚本路径为: <code>redis-7.0.4/utils/create-cluster</code>， 使用下面几个命令进行操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./create-cluster start  # 启动 6 台 redis</span><br><span class="line">./create-cluster create  # cluster 集群初始化</span><br><span class="line">./create-cluster stop  # 关闭集群</span><br><span class="line">./create-cluster clean  # 清理集群</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Two Sum</title>
    <url>/2022/08/07/2022-08-13-leetcode/</url>
    <content><![CDATA[<p>简单的两数之和，给定一个没有重复元素的数组，和一个目标数字，在数组中一定且只有一对元素加和为目标数字，按顺序输出元素下标。</p>
<span id="more"></span>

<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://leetcode.com/problems/two-sum/description/">https://leetcode.com/problems/two-sum/description/</a></p>
<h2 id="暴力循环"><a href="#暴力循环" class="headerlink" title="暴力循环"></a>暴力循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure>

<h2 id="两次-Hash"><a href="#两次-Hash" class="headerlink" title="两次 Hash"></a>两次 Hash</h2><p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202212012356149.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            dic[nums[i]] = i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            tmp = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> tmp <span class="keyword">in</span> dic <span class="keyword">and</span> dic[tmp] != i:</span><br><span class="line">                <span class="keyword">return</span> [i, dic[tmp]]</span><br></pre></td></tr></table></figure>

<h2 id="一次-Hash"><a href="#一次-Hash" class="headerlink" title="一次 Hash"></a>一次 Hash</h2><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202212012356064.png" style="zoom:50%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            tmp = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> tmp <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">return</span> [dic[tmp], i]</span><br><span class="line">            dic[nums[i]] = i</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Top100</tag>
      </tags>
  </entry>
  <entry>
    <title>岁 &amp; Year</title>
    <url>/2022/08/07/2022-08-13-%E5%B2%81/</url>
    <content><![CDATA[<p>木星也。越歴二十八宿，宣遍阴阳，十二月一次。从步戌声。律歴书名五星为五步。</p>
<span id="more"></span>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天读林语堂先生写的《苏东坡传》，在提到苏轼的生日时，简单说明了一下中国的年龄和西方之间的差别。</p>
<blockquote>
<p>不过关于这个孩子的生日先要说一说，不然会使海外中国传记的读者感到纷乱。在中国，小儿初生便是一岁，这是由中国人历来都愿早日达到受人尊敬的高岭的缘故。第一个新年一到，人人都长了一岁，那个婴儿就是两岁。</p>
<p align="right">---《苏东坡传》</p>
</blockquote>
<p>中国的年龄用一种更确切的说法是“年岁”，“虚岁”，或者最简单的直接就叫“岁”，当然这里指的是传统年龄的理解，因为在现在无论农村还是城市，被问到年龄时已经默认都是说“周岁”，只有长辈他们还是习惯的说“虚岁”，这也导致了很多困惑或烦恼，当然这就是另一个话题了。</p>
<h2 id="Year"><a href="#Year" class="headerlink" title="Year"></a>Year</h2><p>东西方对年龄的理解，从题目中稍加思考则可见端倪。当使用英语回答我多少岁时: I’m 20 years old. 中文翻译过来则是: 我 20 岁了。<code>year</code> 在这里翻译成了“岁”，而不是“年”，我猜测西方是没有岁的概念的，在这一猜测的基础上，可以发现英语所说的 I’m 20 years old. 表达的应该是一个时间的长度的概念，比如从 2020 年 6 月 1 日到 2021 年 6 月 1 日，这个时间长度才算是 <code>1 year</code>, 也就是目前日常生活中所指的周岁的概念。</p>
<h2 id="岁"><a href="#岁" class="headerlink" title="岁"></a>岁</h2><p>关于虚岁听到过 2 种说法：</p>
<ul>
<li><p>第一种就是像林语堂先生所说的“小儿初生便是一岁”，在网上查到的资料基本也是这种说法</p>
<blockquote>
<p>虚岁的计龄方式为：出生时记为一岁，以后每到一个春节（古义即立春）便增加一岁。</p>
<p align="right">--- 百度百科</p>
</blockquote>
<p>按照这种说法有时也会让我产生疑惑，比如一个婴儿是春节前 3 个月出生的，那么他过完满月后(以满月举例是因为满月是一个很重要的日子，中国的家庭都会摆满月酒来庆祝)，再过 2 个月，就会 2 岁了，听上去就很让人困惑，唯一能让我想通的思路就是“岁”和“年”之间就是没有任何联系的，这样的话满月和两岁就不冲突，我们觉得困惑是因为把“岁”和“年”认为关联性很强甚至等同了。即使这一思路可以解释我们的困惑，但是这一思路本身我又感觉可靠性不高。还有一个现象就是如果出生即为一岁的话，那么是会出现虚三岁的情况的，比如这个婴儿是阳历 2 月 15 日出生，当年的春节是在 2 月 18 日，第二年的春节是在 2 月 10 日，那么当到第二年春节过后 2 月 11 日时，该婴儿已经是 3 虚岁了，但是如果按照周岁来算的话，甚至还没有到一周岁，这样就是虚三岁，而日常生活中好像更多的是听到“虚一岁”和“虚两岁”的说法，不知是我孤陋寡闻没有听说过“虚三岁”，还是说根本就没有这个说法。</p>
</li>
<li><p>第二种说法是说过了一年春节就是长一岁，这种说法在正常情形下可能会把“我多少岁”解释的更有道理，比如“我 20 岁了”，在虚岁这个概念体系下，可能所表达的意思是指: 我经历过了 20 个春节，与 <code>year</code> 所表达的时间长度不同，这里更多的是倾向于表达“过春节”这个事件。但是这种说法也有一个很大的漏洞，在大多数情况下阴历的平年是 354 或者 355 天(极少数会有 353 天)，但是阴历中也会有闰月的情况，这样阴历一年就会多一个月，也就是一年会有 383、384 或 385 天。这样就会出现一种情况，一个婴儿是刚好过完春节后几天出生的，而今年是阴历的闰年，润九月，这样的话当 365 天之后，婴儿已经一周岁了，但是却还没有经历过一次春节，按照第二种说法就是虚 0 岁，出现虚岁比周岁小的情况，这看上去是一个致命的漏洞。</p>
</li>
</ul>
<p>所以还是第一种说法更为可靠一些。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://book.douban.com/subject/1792668/">《苏东坡传》- 林语堂</a></li>
<li><a href="https://baike.baidu.com/item/%E8%99%9A%E5%B2%81/737276">虚岁-百度百科</a></li>
</ul>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/08/21/2022-08-21-Git/</url>
    <content><![CDATA[<p>本文主要收集在工作中遇到的一些 Git 的使用场景和方法。</p>
<span id="more"></span>

<h2 id="仓库禁止新建分支"><a href="#仓库禁止新建分支" class="headerlink" title="仓库禁止新建分支"></a>仓库禁止新建分支</h2><p>当我们在提交代码时会经常遇到一种情况，就是在往远程 push 代码时，远程的仓库会禁止创建新的分支，这时我们就只能将远程代码 fork 到自己的仓库，然后 push 代码后再提交 PR。</p>
<h3 id="远程仓库并没有限制不能新建分支"><a href="#远程仓库并没有限制不能新建分支" class="headerlink" title="远程仓库并没有限制不能新建分支"></a>远程仓库并没有限制不能新建分支</h3><p>这时我们提交代码的方式很简单</p>
<ul>
<li><p>git clone ${git_url}</p>
</li>
<li><p>新建一个分支，在本地自己的分支上开发 (一般开发使用 IDEA 很简单)，使用命令行就是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch <span class="variable">$&#123;branch_name&#125;</span></span><br><span class="line">git checkout <span class="variable">$&#123;branch_name&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>git add &lt;file&gt;</code></p>
</li>
<li><p><code>git commit -m [message]</code> (使用 IDEA 在 commit 时会让你选择要 commit 的文件，其实就和上一步已经合并了)</p>
</li>
<li><p><code>git pull origin master</code> (拉取远程最新代码，防止冲突)</p>
</li>
<li><p><code>git push --set-upstream origin $&#123;branch_name&#125;</code> (远程没有该分支的话，–set-upstream 会创建相应的分支)</p>
</li>
<li><p>提交 PR</p>
</li>
<li><p>当代码被 merge 后，为了保持本地代码和远程仓库的一致，只需要切换到 master 分支，重新拉取一下最新的代码即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="远程仓库不能新建分支"><a href="#远程仓库不能新建分支" class="headerlink" title="远程仓库不能新建分支"></a>远程仓库不能新建分支</h3><p>有些公司可能出于代码版本管理的一些考虑，禁止在远程仓库新建分支，尤其是一些开源仓库，如果每个人都可以在远程仓库新建属于自己的分支的话会比较乱。所以这种情况就需要自己 fork 到自己的仓库，在自己 fork 下来的远程仓库上进行开发，此时在自己仓库上开发的操作步骤和上面讲的是一样的。</p>
<div class="note warning">
            <p>有一点需要注意的是，在此时 <code>git pull origin master</code>，此时的 origin 指的是自己 fork 下来的仓库而不是 remote，所以可能会出现问题，因为其他人也在更改 remote 仓库的代码，如果我们在 push 之前，没有拉取 remote 仓库的最新代码，那么在往 remote 仓库提交 PR 时，可能会发生代码冲突。</p>
          </div>

<p>这种情况下，我们需要添加远程仓库路径，使用下面的步骤代替 <code>git pull origin master</code></p>
<ul>
<li><code>git remote -v</code> (查看是否已经添加了远程仓库地址)</li>
<li><code>git remote add upstream $&#123;remote_git_url&#125;</code> (添加远程仓库地址)</li>
<li><code>git fetch upstream</code> (拉取远程仓库代码)</li>
<li><code>git merge upstream/master</code> (将远程仓库的 master 分支与本地代码合并)</li>
</ul>
<p>整体来说当远程仓库不能新建分支时，提交代码的过程包括自己 fork 下来的仓库的代码维护是比较麻烦而且容易出错的，但是对于 remote 仓库的维护就会更加友好。</p>
<h2 id="跟踪忽略-–assume-unchanged"><a href="#跟踪忽略-–assume-unchanged" class="headerlink" title="跟踪忽略 –assume-unchanged"></a>跟踪忽略 –assume-unchanged</h2><p>这种用法我平时用的不多，只是偶尔会用到，比如远程仓库中会有一些文件记录了配置信息，在我们本地开发时，需要修改这些配置以适应本地的环境，或者是需要在这些文件中添加一些用户名密码才可以运行。当我们提交代码的时候并不需要提交这个文件，我最简单的做法就是使用 IDEA 进行 commit 时，不勾选这些文件就可以了，但是每次 commit 时都要取消勾选就有点烦，所以就可以使用下面的命令来忽略跟踪:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>但是这样做也会有一定风险，也是我后来不用的原因，因为如果使用 <code>--assume-unchanged</code> 忽略跟踪，那么在 pull 代码时也会忽略这个文件的改变，所以可能出现远程仓库中这个配置文件做了一些重要改变，但是因为我们忽略跟踪这个文件了，导致本地文件一直没有更新也没有任何提示，程序运行出错之后就很难找出原因。所以我后来就又把这些文件恢复跟踪了，恢复跟踪的命令是:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git update-index --no-assume-unchanged &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>如果想要查看自己给哪些文件设置了跟踪忽略，就使用:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files -v|grep <span class="string">&#x27;^h&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="合并其他分支的某次提交到指定分支-cherry-pick"><a href="#合并其他分支的某次提交到指定分支-cherry-pick" class="headerlink" title="合并其他分支的某次提交到指定分支 (cherry-pick)"></a>合并其他分支的某次提交到指定分支 (cherry-pick)</h2><p>背景是这样的，我们在开发过程中可能会遇到对已经上线的代码打 patch 的情况，一般来说每次上线都会新切出来一个分支，比如叫 release-2022,<br>对于开发上线周期比较长的公司来说，比如半年发布一次，那么打 patch 的话就要把 master 上的某些代码合并到 release-2022 上，而且我们只需要合并一部分，<br>有人可能会想，master 的代码也是从 feature 分支合并过来的，我们直接把那个 patch 的 feature 分支合并到 release-2022 不就行了？ 其实是不行的，因为<br>一般来说 feature 分支都是以 master 分支为基准切出来的，保证是在最新的代码上开发的，所以其实 feature 分支除了 patch 的代码，还有其他的许多新代码(相比与 release-2022 来说)。<br>所以我们就只需要把 feature 分支上的和 patch 相关的 commit 代码合并。还有一种方法就是在 release-2022 的基础上新切一个分支，然后把 patch 的代码再 copy 过来一遍，这种如果代码很多很分散，<br>就不容易操作。</p>
<p>以下是操作步骤</p>
<ol>
<li>切到 feature 分支，查看哪些 commit 是和 patch 相关的 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
 记住列出来的 commit id， 比如说是 62ecb3</li>
<li>在 release-2022 分支的基础上，新切出来分支 release-patch</li>
<li>将和 patch 有关的 commit 合并到 release-patch 分支 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout release-patch  </span><br><span class="line">git cherry-pick 62ecb3  </span><br></pre></td></tr></table></figure></li>
<li>提交 PR: release-patch -&gt; release-2022</li>
</ol>
<h2 id="Update-Project-To-be-continue"><a href="#Update-Project-To-be-continue" class="headerlink" title="Update Project (To be continue)"></a>Update Project (To be continue)</h2>]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap vs ConcurrentHashMap</title>
    <url>/2022/08/21/2022-08-21-HashMap%20vs%20ConcurrentHashMap/</url>
    <content><![CDATA[<p>经典 Java 面试题，虽然已经工作快 3 年了，但是之前挖的坑还是填上好了。这个问题主要关注下面几点，HashMap 和 ConcurrentHashMap 的区别，还有这两个的实现方式在 JDK1.7和 JDK1.8 之间的不同。</p>
<span id="more"></span>

<h2 id="HashMap-1-7"><a href="#HashMap-1-7" class="headerlink" title="HashMap 1.7"></a>HashMap 1.7</h2><p>在 JDK 1.7 中， HashMap 是由 <code>数组</code> + <code>链表</code> 组成的。 下面是几个重要的成员变量，具体含义就不再解释了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount; <span class="comment">// https://xls56iii.github.io/2021/12/12/ConcurrentModificationException/</span></span><br></pre></td></tr></table></figure>

<p>其实 HashMap 就是一个 Entry 数组，然后每个 Entry 中有一个指向下一个的指针，可以组成链表。</p>
<p>在 JDK 1.7 中，插入数据时，使用的是头插法，但是在 JDK 1.8 则是尾插法。</p>
<h2 id="HashMap-1-8"><a href="#HashMap-1-8" class="headerlink" title="HashMap 1.8"></a>HashMap 1.8</h2><p>在 JDK 1.8 中，HashMap 的实现则是 <code>数组</code> + <code>链表</code> + <code>红黑树</code>, 相比于 1.7 有几个多出来的成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>; <span class="comment">// 链表长度为 8 的时候会转为红黑树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>; <span class="comment">// 长度为 6 的时候会从红黑树转为链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>; <span class="comment">// 只有桶内数据量大于 64 的时候才会允许转红黑树, 如果链表长度大于 8，但是总数据量小于 64，则不会转为红黑树，而是做扩容操作</span></span><br></pre></td></tr></table></figure>

<p>为什么 <code>TREEIFY_THRESHOLD</code> 和 <code>UNTREEIFY_THRESHOLD</code> 是 8 和 6 ？首先中间间隔一个 7 是因为防止频繁在链表和红黑树之间互相转换。至于为什么 <code>TREEIFY_THRESHOLD</code> 没有设置的更大，JDK 源码注解中有这么一段话:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Because TreeNodes are about twice the size of regular nodes, we use them only when bins contain enough nodes to warrant use (see TREEIFY_THRESHOLD). And when they become too small (due to removal or resizing) they are converted back to plain bins.  In usages with well-distributed user hashCodes, tree bins are rarely used.  Ideally, under random hashCodes, the frequency of nodes in bins follows a Poisson distribution (http://en.wikipedia.org/wiki/Poisson_distribution) with a parameter of about 0.5 on average for the default resizing threshold of 0.75, although with a large variance because of resizing granularity. Ignoring variance, the expected occurrences of list size k are (exp(-0.5) * pow(0.5, k) / factorial(k)). The first values are:</span><br><span class="line">* 0:    0.60653066</span><br><span class="line">* 1:    0.30326533</span><br><span class="line">* 2:    0.07581633</span><br><span class="line">* 3:    0.01263606</span><br><span class="line">* 4:    0.00157952</span><br><span class="line">* 5:    0.00015795</span><br><span class="line">* 6:    0.00001316</span><br><span class="line">* 7:    0.00000094</span><br><span class="line">* 8:    0.00000006</span><br></pre></td></tr></table></figure>
</blockquote>
<p>也就是说其实桶的长度超过 8 的概率是很小的，其实大部分还是以链表的形式存在的。</p>
<p>有一个很经典的问题就是为什么 HashMap 是线程不安全的，这个问题的答案在 1.7 和 1.8 的回答是不同的。</p>
<p>在 1.7 中，因为使用的是头插法，所以在并发场景下， resize() 操作可能会出现环形链表，导致死循环。(具体为什么是这个因果关系就要自己看代码，一步一步操作一下了)</p>
<p>在 1.8 中，也会出现死循环的情况，不过不是因为扩容导致的。 1.8 中改用了尾插法，解决了扩容导致的死循环问题。但是在链表转换为树，以及对树进行平衡操作时，还是会出现死循环的情况。</p>
<p>然后就是并发情况下，1.7 和 1.8 都会出现数据丢失的情况。</p>
<h2 id="ConcurrentHashMap-1-7"><a href="#ConcurrentHashMap-1-7" class="headerlink" title="ConcurrentHashMap 1.7"></a>ConcurrentHashMap 1.7</h2><p>在 ConcurrentHashMap 中，则主要用到了 <code>Segment</code> 的概念，其实就是把 Entry 数组平均分成了多个 Segment，在对元素进行操作时，会对 Segment 上锁，Segment 通过继承 ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 Segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/1162587-20190217130616126-737953785.png"></p>
<p>ConcurrentHashMap 中的一些重要成员变量，其中下面省略了一些不太重要的变量，可以发现 <code>Segment</code> 是继承了 <code>ReentrantLock</code> 的，同时 Segment 中的 table 数组是 volatile 的，来保证该变量的可见性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">	<span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有很多细节在 Reference 中的文章中讲的很清楚，我这里简单记录几个小点，</p>
<ol>
<li><p>size() 方法，会首先不加任何锁计算两遍 <code>modCount</code> 有没有变化，如果没有变化的话，说明此时没有任何操作发生，这样就可以直接返回总数。如果有变化的话，则会把所有 segment 上锁，然后再去计算总数，来保证 size 的正确性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">boolean</span> overflow; <span class="comment">// true if size overflows 32 bits</span></span><br><span class="line">    <span class="keyword">long</span> sum;         <span class="comment">// sum of modCount</span></span><br><span class="line">    <span class="keyword">long</span> last = <span class="number">0L</span>;   <span class="comment">// previous sum</span></span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// first iteration isn&#x27;t retry</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                    ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">            &#125;</span><br><span class="line">            sum = <span class="number">0L</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            overflow = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">                <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sum += seg.modCount;</span><br><span class="line">                    <span class="keyword">int</span> c = seg.count;</span><br><span class="line">                    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">                        overflow = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum == last)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            last = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                segmentAt(segments, j).unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>put() 方法，这个方法中有一个操作 scanAndLockForPut()，其主要就是尝试获取锁，只不过在获取锁的过程中，顺便创建一下节点。在源码的注释中也有说明 <code>speculatively</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span><span class="params">(K key, <span class="keyword">int</span> hash, V value)</span> </span>&#123;</span><br><span class="line">	HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</span><br><span class="line">  HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">  HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// negative while locating node</span></span><br><span class="line">  <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">    HashEntry&lt;K,V&gt; f; <span class="comment">// to recheck first below</span></span><br><span class="line">    <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="comment">// speculatively create node</span></span><br><span class="line">                node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">            retries = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">            retries = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            e = e.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">        lock();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</span><br><span class="line">        e = first = f; <span class="comment">// re-traverse if entry changed</span></span><br><span class="line">        retries = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Unsafe 是 Java 提供的一个用于执行低级别、不安全操作的工具类。虽然Unsafe的使用需要谨慎，因为它可能破坏 Java 的内存安全，但在一些高性能的并发库中，Unsafe 被广泛用于实现一些难以通过普通 Java 代码实现的特性。</p>
<p>在 ConcurrentHashMap 中，Unsafe 被用于实现无锁的数据结构。具体来说，ConcurrentHashMap 中的 Entry 数组和链表节点都是使用 Unsafe 来创建的，而不是使用普通的new操作符。这是因为在创建 Entry 数组时，ConcurrentHashMap 需要保证整个数组的初始化是<strong>原子</strong>的，以避免在数组部分初始化的情况下被其他线程访问。</p>
<p>此外，Unsafe 还被用于实现 ConcurrentHashMap 的内存屏障操作。内存屏障是一种用于确保多处理器系统中的内存操作顺序的指令。在ConcurrentHashMap中，内存屏障被用于确保在修改 Entry 的 next 指针后，其他线程能够立即看到这个修改。</p>
</li>
</ol>
<h2 id="ConcurrentHashMap-1-8"><a href="#ConcurrentHashMap-1-8" class="headerlink" title="ConcurrentHashMap 1.8"></a>ConcurrentHashMap 1.8</h2><p>在 JDK 1.8 中更为复杂，首先就是取消了 <code>Segment</code> 的概念。采用 CAS + synchronized 来保证并发安全性。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/map-20230816155924-20240610195029704.png"></p>
<ol>
<li>size() 方法使用 LongAdder 实现，有一个 <code>baseCount</code> 和 <code>CounterCell[]</code> 数组。</li>
<li>transfer() 方法，扩容时 ForwardingNode，高低链表，辅助扩容。</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://www.cnblogs.com/xuwc/p/14044664.html">https://www.cnblogs.com/xuwc/p/14044664.html</a></p>
<p>[2] <a href="https://www.cnblogs.com/jajian/p/10385377.html">https://www.cnblogs.com/jajian/p/10385377.html</a></p>
<p>[3] <a href="https://javabetter.cn/thread/ConcurrentHashMap.html#jdk-1-7">https://javabetter.cn/thread/ConcurrentHashMap.html#jdk-1-7</a></p>
<p>[4] <a href="https://javabetter.cn/thread/Unsafe.html">https://javabetter.cn/thread/Unsafe.html</a></p>
<p>[5] <a href="https://www.cnblogs.com/gunduzi/p/13653505.html">https://www.cnblogs.com/gunduzi/p/13653505.html</a></p>
<p>[6] <a href="https://juejin.cn/post/6922770632358756359">https://juejin.cn/post/6922770632358756359</a></p>
<p>[7] <a href="https://blog.csdn.net/m0_37550986/article/details/125230667">https://blog.csdn.net/m0_37550986/article/details/125230667</a></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HashMap</tag>
        <tag>ConcurrentHashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Code Review</title>
    <url>/2022/09/08/2022-09-08-Code%20Review/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Code-Review-Pyramid"><a href="#Code-Review-Pyramid" class="headerlink" title="Code Review Pyramid"></a>Code Review Pyramid</h2><p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209090054233.png"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.morling.dev/blog/the-code-review-pyramid/">The Code Review Pyramid</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Art</tag>
      </tags>
  </entry>
  <entry>
    <title>三天环青海湖</title>
    <url>/2022/09/12/2022-09-12-%E4%B8%89%E5%A4%A9%E7%8E%AF%E9%9D%92%E6%B5%B7%E6%B9%96/</url>
    <content><![CDATA[<p>今天翻相册发现了之前环青海湖的照片，所以想起来记录一下。2019 年劳动节幸运的可以放 4 天假，于是开启了三天环湖之旅。由于已经过了 3 年之久，有些已经记不太清了。</p>
<span id="more"></span>

<h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2><ul>
<li>4 月 30 日下午从西安出发，高铁到达西宁市，然后坐最后一班大巴车到达西海镇。</li>
<li>5 月 1 日早上 7 点出发，下午 6 点左右到达黑马河乡。</li>
<li>5 月 2 日从黑马河出发，晚上将近 8 点到达刚察县。</li>
<li>5 月 3 日刚察县出发，下午 3 点左右到达西海镇。稍作休整后坐大巴车返回西宁，晚饭和住宿在西宁解决。</li>
<li>5 月 4 日返回西安。</li>
</ul>
<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>大部分人都是选择先到西宁，然后坐大巴前往西海镇。客运站就在西宁高铁站旁边，转乘很方便，大巴车车票我记得好像不是 25 就是 45。西海镇有很多租车行，我到达西海镇后先开始租车，很多租车行也提供住宿服务 ，我为了方便租车和住宿直接选择了同一家车行。车行名字不太记得了，位置是在海北藏族自治州藏医院的对面，也正好在环湖的出发路线上，老板是队伍的军人，人非常好。晚上睡觉需要注意不要着凉，5 月初的青海还是很冷的。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132116409.png" alt="海北藏族自治州藏医院"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132118896.png"></p>
<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>因为我的计划只有 3 天，行程安排还是比较紧的，所以第二天早上 7 点就出发了，出发时天刚刚亮，路上的骑友也很少 ，后面从老板的朋友圈得知我是出发最早的一批了。后来路上老板给我打电话，问我具体的住宿有没有安排，正好有另一个骑友也是一个人，他在路上想找个一起住的同伴，我就答应了，后面的 2 天都是和他一起住的。这个老哥是新疆阿勒泰地区的哈萨克族，是个骑行大神，每天比我后出发，然后比我先到目的地，我到的时候他就已经定好宾馆了，对我来说方便了很多。今天到达宾馆后，同伴给我分享了他买的老酸奶，他说他们新疆那边也是吃这种的，我本以为和平时喝的那种老酸奶差不多，可能没有那么甜而已，吃了一口发现应该是完全没有加过糖发酵的那种，非常酸可能还有一点点苦，我完全吃不来，但是同伴吃的津津有味哈哈，整体来说第二天对于体力的消耗属于正常的那种，没有特别的累。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132131877.png"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132132823.png" alt="109 国道"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132132165.png" alt="二郎剑景区 "></p>
<h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>今天早上起来之后大腿开始发酸，但还是要早早出发，这一天可以说是骑行的 3 天中最累的一天，而且晚上在离目的地还有20 公里的时候又下起了雨，其实下雨倒是不可怕，可怕的是天空基本完全黑了下来，在四周空旷的青藏高原上雷声大作，时常伴有闪电，现在回想起来还是觉得那种情景下内心还是有些恐惧的。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132148182.png"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132146840.png" alt="青藏铁路"></p>
<h2 id="第三天-1"><a href="#第三天-1" class="headerlink" title="第三天"></a>第三天</h2><p>今天是骑行的最后一天，相对前两天来说是最轻松的一天，我是顺时针环湖的，最后的几十公里基本都是下坡。过了下面这个地方就基本都是一路下坡了。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132155292.png"></p>
<p>今天也是第一次我比同伴先回到西海镇，原因是因为他去骑马了哈哈哈，因为他家就在喀纳斯湖附近，从小骑马长大的，所以非常喜欢骑马而且技艺高超，听他讲他去骑马时都是让主人把缰绳给他自己掌控，如果主人担心游客的安全，避免惹来一些麻烦不给他缰绳的话，他就换一家，总有为了赚钱而同意的。下面是他拍的马的主人家的小孩。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132201850.png" alt="藏族小朋友"></p>
<p>我今天在路上还捡到一条狗，说捡也说不上，看狗的状态判断不是附近牧民的狗就是自驾的游客不小心丢的，总之不是野狗。在我骑着的路上看到了它，然后就一直跟着我，因为还要赶路去坐大巴车回西宁，所以只能把它抛弃，当然如果就算不赶路的话，我也没办法把它带回去。难道骑行的捡到狗的概率很大吗？想起来况露捡了个小狗好像叫“太京”，朱志文也捡了个拉布拉多，后来找到了狗主人。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132212922.png"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132213057.png"></p>
<h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>最后一天坐高铁回西安，前一晚上图新鲜，在西宁住的太空舱，感觉除了隔音不太好之外就是卫生也比较一般，之后不想再住了。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132218698.png"></p>
<p>回到西安晚上咥个肉夹馍</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209132222669.png"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回来后暑假抽空考了个摩托车驾照，准备以后有时间再去骑摩托车环个青海湖，估计大概率又要多年之后了。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>Serializer</title>
    <url>/2022/09/25/2022-09-25-Serializer/</url>
    <content><![CDATA[<p>我们在将数据存储到 Redis 中之前，需要先将数据进行序列化，然后再进行网络传输，因为最近接到一个活，需要研究一下序列化后加一步 <code>System.arraycopy</code> 的性能影响，本文以此为契机，正好熟悉一下序列化。</p>
<span id="more"></span>

<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化简单来说就是将数据，一般来说是对象，转换成字节数组的过程，之后利用这个字节数组就可以进行各种通信，进行数据传输，而反序列化，就是指将接收到的字节数组转化为原始的对象的过程。</p>
<h2 id="JDKSerializer"><a href="#JDKSerializer" class="headerlink" title="JDKSerializer"></a>JDKSerializer</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>JDKSerializer 使用 Java 中自带的功能进行序列化</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKSerializer</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">byte</span>[] serialize(T object) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">            oos.writeObject(object);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] serializeData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(serializeData);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">            T t = (T) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="JacksonSerializer"><a href="#JacksonSerializer" class="headerlink" title="JacksonSerializer"></a>JacksonSerializer</h2><h3 id="Intro-1"><a href="#Intro-1" class="headerlink" title="Intro"></a>Intro</h3><p>Jackson 序列化主要是通过 ObjectMapper 类来进行操作，是线程安全的，所以只用全局初始化一个 ObjectMapper 即可，Jackson 序列化可以将一个对象转化为字符串，该字符串是以 Json 格式存储的, 例如 <code>&quot;[\&quot;User\&quot;,&#123;\&quot;name\&quot;:\&quot;a\&quot;,\&quot;sex\&quot;:\&quot;male\&quot;,\&quot;id\&quot;:1&#125;]&quot;</code>, 具有良好的可读性。 </p>
<h3 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonSerializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        objectMapper.enableDefaultTyping();</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">byte</span>[] serialize(T object) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jsonStr = <span class="keyword">null</span>;</span><br><span class="line">            jsonStr = objectMapper.writeValueAsString(object);</span><br><span class="line">            <span class="keyword">return</span> jsonStr.getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] serializeData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jsonStr = <span class="keyword">new</span> String(serializeData, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (T) objectMapper.readValue(jsonStr, Object.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="KryoSerializer"><a href="#KryoSerializer" class="headerlink" title="KryoSerializer"></a>KryoSerializer</h2><h3 id="Intro-2"><a href="#Intro-2" class="headerlink" title="Intro"></a>Intro</h3><p>Kryo 是一个快速序列化的工具，在序列化速度上有非常大的优势，Kryo 序列化出的结果，是其自定义的、独有的一种格式。需要注意的是 Kryo 不是线程安全的，也就是说每个线程都应该有自己的 Kryo 对象，所以可以使用 ThreadLocal 或者 KryoPool 来解决。</p>
<h3 id="Dependency-1"><a href="#Dependency-1" class="headerlink" title="Dependency"></a>Dependency</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.esotericsoftware<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo-shaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.esotericsoftware<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KryoSerializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> KryoPool KRYO_POOL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Queue&lt;Kryo&gt; QUEUE = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        KryoPool.Builder poolBuilder = <span class="keyword">new</span> KryoPool.Builder(() -&gt; &#123;</span><br><span class="line">            Kryo kryo = <span class="keyword">new</span> Kryo();</span><br><span class="line">            kryo.setReferences(<span class="keyword">true</span>);</span><br><span class="line">            kryo.setRegistrationRequired(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> kryo;</span><br><span class="line">        &#125;);</span><br><span class="line">        KRYO_POOL = poolBuilder.queue(QUEUE).softReferences().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">byte</span>[] serialize(T object) &#123;</span><br><span class="line">        <span class="keyword">return</span> KRYO_POOL.run(kryo -&gt; &#123;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            Output output = <span class="keyword">new</span> Output(baos);</span><br><span class="line">            kryo.writeClassAndObject(output, object);</span><br><span class="line">            output.close();</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] serializeData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> KRYO_POOL.run(kryo -&gt; &#123;</span><br><span class="line">            Input input = <span class="keyword">new</span> Input(serializeData);</span><br><span class="line">            Object object = kryo.readClassAndObject(input);</span><br><span class="line">            input.close();</span><br><span class="line">            <span class="keyword">return</span> (T) object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Store-in-Redis"><a href="#Store-in-Redis" class="headerlink" title="Store in Redis"></a>Store in Redis</h2><p>之前一直有一个误区，认为把对象存储到 Redis 中之后，都是具有可读性的，于是就想看一下上面的三种序列化方式生成的数据存到 Redis 中之后会是什么样的，后来想起来 Redis 中的 5 大数据结构，有 String、List、Hash、Set、Zset, 把一个对象直接序列化后存到 Redis 中应该是使用的 String 数据结构, 一个对象的数据都是固定的，既然不同序列化框架的性能包括序列化后的大小差别这么大，应该存到 Redis 里的数据会大不相同，但是一想对象的数据和类信息都是固定的，又能有多大的不同呢? 这就陷入了开始说的误区，经过实验才恍然大悟，序列化只是一个将对象转化为字节数组的工具，为的是数据的通信传输，接收到数据之后还是要进行反序列化的，所以字节数组对应的 String 并不一定要求是可读的。</p>
<p>以下面这个 User 类的对象为例，进行实验:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String sex, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] ser = JDKSerializer.serialize(user);</span><br><span class="line">        jedis.set(<span class="string">&quot;user&quot;</span>.getBytes(), ser);</span><br><span class="line"></span><br><span class="line">        ser = JacksonSerializer.serialize(user);</span><br><span class="line">        jedis.set(<span class="string">&quot;user1&quot;</span>.getBytes(), ser);</span><br><span class="line">        </span><br><span class="line">        ser = KryoSerializer.serialize(user);</span><br><span class="line">        jedis.set(<span class="string">&quot;user2&quot;</span>.getBytes(), ser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>登陆 Redis 看看实际存储的内容是什么:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202209252037018.png"></p>
<p>可以发现只有 Jackson 序列化的数据是具有可读性的，我们看上面的代码也会发现 Jackson 使用 <code>writeValueAsString</code> 函数将对象先转化为了 String, 然后存储的是这个 String 的字节数组，所以具有可读性，而 JDKSerializer 和 KryoSerializer 就是有自己的格式了。</p>
<h3 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h3><ul>
<li><p>序列化速度: Kryo &gt; Jackson &gt; JDK</p>
</li>
<li><p>反序列化速度: Kryo &gt; Jackson &gt; JDK</p>
</li>
<li><p>序列化数据大小: Kryo &lt; Jackson &lt; JDK</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Serializer</tag>
      </tags>
  </entry>
  <entry>
    <title>Benchmark</title>
    <url>/2022/10/01/2022-10-01-Benchmark/</url>
    <content><![CDATA[<p>在软件开发过程中，经常需要做基准测试，<a href="https://github.com/openjdk/jmh">JMH (Java Microbenchmark Harness)</a> 是 Oracle 官方提供的一个基准测试框架，相对于自己独立来写的基准测试代码，使用 JMH 框架可以避免预热、编译、系统优化造成的测试不精确问题，得到的指标会更加准确，而且熟悉之后，写起来也会更加简单。</p>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>前段时间做序列化相关的 Benchmark 的时候知道了这个框架, 一开始按照网上的例子看了一下相关注解的解释和用法，但是发现做出来的结果和预期的不太符合 (自己做出来发现 Kryo 要比 Jackson 和 JDK 慢很多)， 所以决定仔细研究一下这个框架。以下主要以 JMH 提供的示例代码来进行学习。</p>
<h2 id="How-to-Run"><a href="#How-to-Run" class="headerlink" title="How to Run"></a>How to Run</h2><p>运行 JMH Benchmark 程序有两种方法, 一种是通过命令行，一种是直接使用 IDE 运行</p>
<h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jmh.version</span>&gt;</span>1.25<span class="tag">&lt;/<span class="name">jmh.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javac.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">javac.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uberjar.name</span>&gt;</span>benchmarks<span class="tag">&lt;/<span class="name">uberjar.name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerVersion</span>&gt;</span>$&#123;javac.target&#125;<span class="tag">&lt;/<span class="name">compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;javac.target&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;javac.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;uberjar.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.openjdk.jmh.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Command-line"><a href="#Command-line" class="headerlink" title="Command-line"></a>Command-line</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">java -jar target/benchmarks.jar $&#123;class_name&#125;</span><br></pre></td></tr></table></figure>

<h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p>使用 IDEA 最为方便，直接运行即可，不过官方更推荐使用命令行的方法，因为使用 IDE 的运行环境通常不受控制，得到的指标可能会有偏差。</p>
<blockquote>
<p>Running benchmarks from the IDE is generally not recommended due to generally uncontrolled environment in which the benchmarks run.</p>
<p align="right">--- JMH IDE Support</p>
</blockquote>
<h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="@Benchmark"></a>@Benchmark</h2><div class="note info">
            <p>为了更有目的性和使逻辑更清晰，本文以下内容分析只针对标题内容，而不对其他多余代码进行分析。以下面的代码为例，就只分析 <code>@Benchmark</code> 而略过 <code>main</code> 方法。</p>
          </div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_01_HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wellHelloThere</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this method was intentionally left blank.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_01_HelloWorld.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单来说使用 <code>@Benchmark</code> 注解的方法，就是我们基准测试想要测试的代码。以上面的代码为例，运行结果如下图所示，可以发现测试出来的结果是**每秒会运行该方法1864199891.902次 (忽略 Error)**，虽然 wellHelloThere 方法内没有执行任何代码，理论上来说应该每秒运行无数次，但是 JMH 框架也会有相应的开销。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210012033115.png"></p>
<h2 id="BenchmarkMode"><a href="#BenchmarkMode" class="headerlink" title="@BenchmarkMode"></a>@BenchmarkMode</h2><p>首先介绍一下 <code>@OutputTimeUnit</code>, 因为这个注解比较简单，就不再用单独的小节介绍，这个注解是用来指定 Benchmark 使用的时间单位，和真正的时间没有关系，只是决定了输出结果的单位。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_02_BenchmarkModes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.Throughput)</span></span><br><span class="line">    <span class="meta">@OutputTimeUnit(TimeUnit.SECONDS)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureThroughput</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line">    <span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureAvgTime</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.SampleTime)</span></span><br><span class="line">    <span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureSamples</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.SingleShotTime)</span></span><br><span class="line">    <span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureSingleShot</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(&#123;Mode.Throughput, Mode.AverageTime, Mode.SampleTime, Mode.SingleShotTime&#125;)</span></span><br><span class="line">    <span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureMultiple</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.All)</span></span><br><span class="line">    <span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureAll</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_02_BenchmarkModes.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Mode-Throughput"><a href="#Mode-Throughput" class="headerlink" title="Mode.Throughput"></a>Mode.Throughput</h3><p>这个模式是用来测试吞吐量，即每个时间单位可以执行多少次操作，在这里就是指每个时间单位可以执行多少次被 <code>@Benchmark</code> 注解的函数。以 measureThroughput 函数为例，该函数会 sleep 100ms, 所以理论上得到的吞吐量结果应该是 10，考虑到 JMH 本身的开销，实际结果应该略小于 10。实验结果如下图:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210020008647.png"></p>
<h3 id="Mode-AverageTime"><a href="#Mode-AverageTime" class="headerlink" title="Mode.AverageTime"></a>Mode.AverageTime</h3><p>这个是用来测试平均时间的，其实就是吞吐量的倒数，实验结果如下，倒数约为 9.26。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210020014983.png"></p>
<h3 id="Mode-SampleTime"><a href="#Mode-SampleTime" class="headerlink" title="Mode.SampleTime"></a>Mode.SampleTime</h3><p>这个是用来测试采样时间，也就是在程序运行时，进行随机采样，来获取该方法执行时间的分布，而不是像 <code>AverageTime</code> 一样是把每次执行的时间都记录下来然后算平均，<code>SampleTime</code> 只是随机采样了一部分。执行结果为百分位数结果。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210020024623.png"></p>
<h3 id="Mode-SingleShotTime"><a href="#Mode-SingleShotTime" class="headerlink" title="Mode.SingleShotTime"></a>Mode.SingleShotTime</h3><p>这个测量的是单个执行时间，也就是说 Benchmark 方法只会执行一次，比如 measureAvgTime 方法，该方法在测试时其实是执行 1s (没有指定默认是 1s), 就是在这 1s 时间内一直在执行该方法，可能执行了 10 次，最后算出的平均值作为结果。而如果使用 SingleShotTime 的话，即使指定了默认时间是 1s, 但其实是只执行 1 次函数就结束了，在本例中就是只执行了大约 110ms, 所以该模式通常用来做冷启动测试 (cold startup tests)。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210020036044.png"></p>
<h3 id="Mode-All"><a href="#Mode-All" class="headerlink" title="Mode.All"></a>Mode.All</h3><p>这个模式就是把所有的指标都做测试，并输出结果。当然也可以按照 measureMultiple 方法那样，仅对某几个指定的指标做测试。</p>
<h2 id="Warmup-amp-Measurement"><a href="#Warmup-amp-Measurement" class="headerlink" title="@Warmup &amp; @Measurement"></a>@Warmup &amp; @Measurement</h2><p>两个简单的注解，用来设置预热和真正测试的迭代次数和每一轮迭代测试的时间。因为在程序启动时的前几次往往比较慢，所以需要让程序进行几轮预热，由于 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译为机器码，从而提高执行速度，所以为了让 Benchmark 的结果更加接近真实情况就需要进行预热。</p>
<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示预热 5 轮，每轮执行 100ms</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5, time = 100, timeUnit = TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="comment">// 表示预热 10 轮，每轮执行 10s</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 10, time = 10, timeUnit = TimeUnit.SECONDS)</span></span><br></pre></td></tr></table></figure>

<h3 id="batchSize"><a href="#batchSize" class="headerlink" title="batchSize"></a>batchSize</h3><p>batchSize=5000 的意思是说每轮迭代都运行 5000 次该 Benchmark 函数，而不是像上面一样运行指定的时长。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Warmup(iterations = 5, batchSize = 5000)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5, batchSize = 5000)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Sometimes you need to evaluate operation which doesn’t have the steady state. The cost of a benchmarked operation may significantly vary from invocation to invocation.</p>
<p align="right">--- JMH</p>
</blockquote>
<p>比如下面的例子中，要测试在 list 中间位置加一个元素，随着 list 的长度的增加，开销也会产生变化，所以在这种情境下，使用 time 参数是不合适的，最终的测试结果也说明了这一点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_26_BatchSize</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Warmup(iterations = 5, time = 1)</span></span><br><span class="line">    <span class="meta">@Measurement(iterations = 5, time = 1)</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">measureWrong_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(list.size() / <span class="number">2</span>, <span class="string">&quot;something&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Warmup(iterations = 5, time = 5)</span></span><br><span class="line">    <span class="meta">@Measurement(iterations = 5, time = 5)</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">measureWrong_5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(list.size() / <span class="number">2</span>, <span class="string">&quot;something&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Warmup(iterations = 5, batchSize = 5000)</span></span><br><span class="line">    <span class="meta">@Measurement(iterations = 5, batchSize = 5000)</span></span><br><span class="line">    <span class="meta">@BenchmarkMode(Mode.SingleShotTime)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">measureRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.add(list.size() / <span class="number">2</span>, <span class="string">&quot;something&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setup(Level.Iteration)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_26_BatchSize.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210031820827.png"></p>
<h2 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h2><p>用于测试不同参数下的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@State(Scope.Benchmark)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_27_Params</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Param(&#123;&quot;1&quot;, &quot;31&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> arg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Param(&#123;&quot;0&quot;, &quot;1&quot;, &quot;2&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> certainty;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bench</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BigInteger.valueOf(arg).isProbablePrime(certainty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_27_Params.class.getSimpleName())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210031620867.png"></p>
<h2 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h2><p>使用 <code>@State</code> 标记的对象，就是一个共享对象，其共享范围由我们自己指定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Warmup(iterations = 0)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 1, time = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_03_States</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State(Scope.Benchmark)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BenchmarkState</span> </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">double</span> x = Math.PI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State(Scope.Thread)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">double</span> x = Math.PI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureUnshared</span><span class="params">(ThreadState state)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread name = &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, state = &quot;</span> + state.hashCode() + <span class="string">&quot;, x = &quot;</span> + state.x);</span><br><span class="line">        state.x++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureShared</span><span class="params">(BenchmarkState state)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread name = &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, state = &quot;</span> + state.hashCode() + <span class="string">&quot;, x = &quot;</span> + state.x);</span><br><span class="line">        state.x++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_03_States.class.getSimpleName())</span><br><span class="line">                .threads(<span class="number">4</span>)</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scope-Thread"><a href="#Scope-Thread" class="headerlink" title="Scope.Thread"></a>Scope.Thread</h3><p>这个共享范围是指线程内共享，也就是说不同线程使用的 State 对象不是同一个实例。以 measureUnshared 函数为例，首先通过 main 函数可以知道在测量这个 Benchmark 时，启动了 4 个线程，测试结果如下，可以发现 4 个线程所使用的 State 对象的 hashCode 是不一样的，也就是不同线程使用的是不同的对象实例，而以 worker-2 为例，同一个线程使用的是同一个对象实例。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210021345940.png"></p>
<h3 id="Scope-Benchmark"><a href="#Scope-Benchmark" class="headerlink" title="Scope.Benchmark"></a>Scope.Benchmark</h3><p>这个共享范围是指 Benchmark 内共享，就是同一个 Benchmark 方法，不管同时启动了多少个线程在跑，这些不同的线程所使用的对象实例是同一个，测试结果如下。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210021350854.png"></p>
<h3 id="Scope-Group"><a href="#Scope-Group" class="headerlink" title="Scope.Group"></a>Scope.Group</h3><p>具体使用方法将会在 <a href="#@Group">@Group</a> 中介绍。</p>
<div class="note danger">
            <p>这个比较复杂，需要和 <code>@Group</code> 一起使用，单独使用时会报错，比如上面的程序，把 BenchmarkState 改为 <code>@State(Scope.Group)</code>，则会报下面的错误:</p><p>java: Only @Group methods can reference @State(Scope.Group) states.</p>
          </div>

<h2 id="Setup-amp-TearDown"><a href="#Setup-amp-TearDown" class="headerlink" title="@Setup &amp; @TearDown"></a>@Setup &amp; @TearDown</h2><p> <code>Setup</code> 方法是在 <code>Benchmark</code> 方法执行前需要执行的方法，比如状态的初始化等， <code>TearDown</code> 方法是在 <code>Benchmark</code> 方法执行完之后需要执行的方法，比如执行完释放某些资源等，<code>Setup</code> 和 <code>TearDown</code> 方法执行时的开销是不算在 <code>Benchmark</code> 里面的。这两种方法也叫做 <code>Fixture</code> method。因为两个方法类似，所以下面都以 <code>TearDown</code> 方法举例。</p>
<div class="note danger">
            <p>需要注意的是 <code>Fixture</code> 方法必须放在有 <code>@State</code> 注解的类里面，否则编译会报错:</p><p>java: @TearDown annotation is placed within a class not having @State annotation. This is prohibited because it would have no effect.</p>
          </div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Warmup(iterations = 0)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 3, time = 1)</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_06_FixtureLevel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TearDown(Level.Iteration)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Iteration tearDown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TearDown(Level.Trial)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardown1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Trial tearDown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TearDown(Level.Invocation)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teardown2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Invocation tearDown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureRight</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_06_FixtureLevel.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .jvmArgs(<span class="string">&quot;-ea&quot;</span>)</span><br><span class="line">                .shouldFailOnError(<span class="keyword">false</span>) <span class="comment">// switch to &quot;true&quot; to fail the complete run</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Level-Trial"><a href="#Level-Trial" class="headerlink" title="Level.Trial"></a>Level.Trial</h3><p>这个设置是在每次执行 <code>Benchmark</code> 方法之后才会执行，比如执行一个 <code>Benchmark</code> 方法时，可能会执行多次迭代，但只有在最后一次迭代执行完后，才执行 <code>TearDown</code> 方法。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210021543585.png"></p>
<h3 id="Level-Iteration"><a href="#Level-Iteration" class="headerlink" title="Level.Iteration"></a>Level.Iteration</h3><p>这个设置是指每次迭代执行完之后都会执行，也就是说当测试一个 <code>Benchmark</code> 方法时，可能会执行多次迭代，那么有多少次迭代，就会执行多少次 <code>TearDown</code> 方法。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210021544793.png"></p>
<h3 id="Level-Invocation"><a href="#Level-Invocation" class="headerlink" title="Level.Invocation"></a>Level.Invocation</h3><p>这个设置就是每次执行 <code>Benchmarlk</code> 方法后都会执行，官方建议这个设置谨慎使用。比如上面的方法每次执行方法会 sleep 200ms， 设置了一次迭代执行 1s, 所以可以看到每次迭代都会调用 5 次 <code>Invocation</code> 方法。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210021545844.png"></p>
<h2 id="Fork"><a href="#Fork" class="headerlink" title="@Fork"></a>@Fork</h2><p>这个配置用来设置跑 <code>Benchmark</code> 方法时，使用几个进程来测试，因为在同一个进程中运行不同的测评代码会互相影响，也会出现一些意想不到的结果。比如下面这个例子，设置 <code>Fork</code> 为 0 时，就代表这些测试 (measure_1_c1、measure_2_c2 和 measure_3_c1_again) 是在同一个进程中跑的，测评环境并没有相互隔离，导致结果很诡异，出现这种结果的原因我也不是很明白，总之就是在跑 <code>Benchmark</code> 时，要设置 <code>Fork</code> 的值大于 0，保证每次测试都是使用<strong>相互隔离和完全一致</strong>的测评环境。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 1, time = 1)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 3, time = 1)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_12_Forking</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter1</span> <span class="keyword">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter2</span> <span class="keyword">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure</span><span class="params">(Counter c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            s += c.inc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Counter c1 = <span class="keyword">new</span> Counter1();</span><br><span class="line">    Counter c2 = <span class="keyword">new</span> Counter2();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(0)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure_1_c1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> measure(c1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(0)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure_2_c2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> measure(c2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(0)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure_3_c1_again</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> measure(c1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure_4_forked_c1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> measure(c1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure_5_forked_c2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> measure(c2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_12_Forking.class.getSimpleName())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果如下，发现 measure_1_c1 和 measure_3_c1_again 方法虽然一样，但是结果却相差非常多。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210022146530.png"></p>
<p>那当 <code>Fork</code> 的值大于 1 时有什么用呢？因为 JVM 是一个复杂的系统，会有很多不确定性，所以使用 Fork &gt; 1，可以在多个进程中运行，然后将结果汇总，以减少偶然的不确定性。</p>
<blockquote>
<p>JVMs are complex systems, and the non-determinism is inherent for them. This requires us to always account the run-to-run variance as the one of the effects in our experiments.Luckily, forking aggregates the results across several JVM launches.</p>
<p align="right">--- JMH</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_13_RunToRun</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State(Scope.Thread)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepyState</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">long</span> sleepTime;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Setup</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sleepTime = (<span class="keyword">long</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baseline</span><span class="params">(SleepyState s)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(s.sleepTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(5)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fork_1</span><span class="params">(SleepyState s)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(s.sleepTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Fork(20)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fork_2</span><span class="params">(SleepyState s)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(s.sleepTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_13_RunToRun.class.getSimpleName())</span><br><span class="line">                .warmupIterations(<span class="number">0</span>)</span><br><span class="line">                .measurementIterations(<span class="number">3</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210022218844.png"></p>
<h2 id="Group"><a href="#Group" class="headerlink" title="@Group"></a>@Group</h2><p>之前的例子每个线程中执行的都是同一个 Benchmark 方法，如果想进行非对称测试 (asymmetric test)，也就是一个测试中将多个方法绑定在一起，不同线程执行不同的方法，可以使用 <code>@Group</code> 来实现。</p>
<div class="note primary">
            <p>在这里首先要搞清楚 2 个概念，组 (Group) 和执行组 (Execution Group)，以下面的代码为例：</p><ul><li>组的概念是指两个 Benckmark 方法 inc 和 get 组成一个组，在执行时虽然是不同的 Benchmark，但由于同属于一个组，所以会在同一个进程中执行，而不是像之前的代码那样，不同的 Benchmark 会有相互隔离的进程。</li><li>执行组则和线程数有关系，在下面的代码中，线程数为 8，inc 方法线程配置为 3， get 方法线程配置为 1，所以此时会有 2 个执行组 (8/(3+1))。</li></ul>
          </div>

<p>当 State 的范围设置为 <code>Scope.Group</code> 时，其实是指执行组内 State 共享，而不同的执行组之间进程是不会共享的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 1, time = 1)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 3, time = 1)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_15_Asymmetric</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State(Scope.Group)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BenchmarkState</span> </span>&#123;</span><br><span class="line">        AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Group(&quot;g&quot;)</span></span><br><span class="line">    <span class="meta">@GroupThreads(3)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(BenchmarkState state)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, Method: inc, State: &quot;</span> + state.hashCode());</span><br><span class="line">        <span class="keyword">return</span> state.counter.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@Group(&quot;g&quot;)</span></span><br><span class="line">    <span class="meta">@GroupThreads(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(BenchmarkState state)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, Method: get, State: &quot;</span> + state.hashCode());</span><br><span class="line">        <span class="keyword">return</span> state.counter.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_15_Asymmetric.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .threads(<span class="number">8</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下，可以发现线程 1，2，3，4 属于一个执行组，5，6，7，8 属于一个执行组，而不同执行组之间的 State 的 hashCode 是不一样的，说明没有共享同一对象，而同一个执行组之中，虽然 get 和 inc 方法属于不同的 Benchmark，但是执行组内会共享同一个 State 对象。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210030057945.png"></p>
<div class="note danger">
            <p>当使用 <code>@Group</code> 时，发现了一个不符合逻辑的现象，我不知道是不支持这么使用还是说我的写法不正确，场景是这样的，我把上面的代码第 7 行的 <code>@State(Scope.Group)</code> 改成 <code>@State(Scope.Benchmark)</code>，我预想到的结果应该是同一个执行组内的 Benchmark 方法之间不共享 State 对象，但是 Benchmark 方法内不同的线程间应该共享同一个 State 对象，也就是说以上面图中为例，应该 6，7，8 线程的 inc 方法是共享的同一个 State，而线程 5 的 get 方法，虽然在一个执行组内，但是不是一个 Benchmark 方法，应该其 State 对象是和 6，7，8 中的不一样的。但是实际执行结果如下，发现线程 1，2，3，4，5，6，7，8 共享了同一个 State 对象，也就是说不仅同一个执行组内的不同 Benchmark 方法间共享了 State，就连不同执行组之间也共享了同一个 State。</p><p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210030113237.png"></p>
          </div>

<h2 id="Dead-Code-Elimination-DCE"><a href="#Dead-Code-Elimination-DCE" class="headerlink" title="Dead-Code Elimination (DCE)"></a>Dead-Code Elimination (DCE)</h2><p>死代码消除 (DCE) 是因为编译器足够聪明，可以推断出一些计算是多余的并完全消除它们。如果删除的部分是我们的基准代码，那么测试得到的结果就会有问题。比如下面的代码中，可以看出实际要测试的方法是 compute 方法，但是该方法没有使用 <code>Benchmark</code> 注解，而是通过其他 <code>Benchmark</code> 方法调用的，这时 measureWrong 方法中仅仅是调用了 compute 方法，而并没有对得到的结果做任务处理，编译器则会认为这一步是没用的，就会消除这部分代码，导致测试结果有问题。解决这个问题的方法一个是拿到结果并加以利用，在本例的表现就是 return 出去，另一个就是使用 Blackhole 消费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 0)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 3, time = 1)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_08_DeadCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x = Math.PI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">10</span>; c++) &#123;</span><br><span class="line">            d = d * d / Math.PI;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baseline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing, this is a baseline</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureWrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        compute(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">measureRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compute(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureBh</span><span class="params">(Blackhole bh)</span> </span>&#123;</span><br><span class="line">        bh.consume(compute(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_08_DeadCode.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210021616588.png"></p>
<p>还有一种情况也会出现死码消除，就是当对常量进行计算时，如果发现计算结果和常量本身结果一致，那么 JVM 也会对此进行优化，解决方法就是使用 non-final 的变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 0)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 3, time = 1)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_10_ConstantFold</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x = Math.PI;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> wrongX = Math.PI;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">compute</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">10</span>; c++) &#123;</span><br><span class="line">            d = d * d / Math.PI;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">baseline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">measureWrong_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compute(Math.PI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">measureWrong_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compute(wrongX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">measureRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compute(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_10_ConstantFold.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210021637333.png"></p>
<h2 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h2><p>在做基准测试时，不推荐使用循环，比如有一个场景，要测执行一次的时间，一种方法是使用 for 循环 100 次，然后将总时间除以 100 得到执行一次的时间，但其实这样测出来是会有问题的，下面的例子说明了这种情况。首先解释一下 <code>@OperationsPerInvocation</code> 注解，这个注解可以用来得到循环函数中执行一次的时间，官方是这么解释的，</p>
<blockquote>
<p>OperationsPerInvocation annotations allows to communicate the benchmark does more than one operation, and let JMH to adjust the scores appropriately. For example, a benchmark which uses the internal loop to have multiple operations, may want to measure the performance of a single operation</p>
<p align="right">--- JMH</p>
</blockquote>
<p>以函数 measureWrong_10 为例，使用的注解为 <code>@OperationsPerInvocation(10)</code>，JMH 会认为每执行一次 measureWrong_10 函数，里面做了 10 次操作，在生成结果的时候会除以 10 来得到执行一次操作的结果，所以函数里面的 reps(10) 传递的参数也是 10，这里要对应，不然计算结果也是不对的。这里可能会混淆，因为之前的例子中说过，比如吞吐量，得到的结果就是每个时间单位可以执行多少次 <code>Benchmark</code> 函数，但是在这里，由于使用了 <code>OperationsPerInvocation</code> 注解，得到的结果就不是函数的执行次数 (Call)，而是 Operation 执行的次数，比如 <code>@OperationsPerInvocation(10)</code>, 则认为一个函数 Call 中带有 10 个 Operation。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 1, time = 1)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 3, time = 1)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_11_Loops</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x + y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">reps</span><span class="params">(<span class="keyword">int</span> reps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; reps; i++) &#123;</span><br><span class="line">            s += (x + y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@OperationsPerInvocation(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureWrong_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reps(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@OperationsPerInvocation(10)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureWrong_10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reps(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@OperationsPerInvocation(100)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureWrong_100</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reps(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@OperationsPerInvocation(1_000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureWrong_1000</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reps(<span class="number">1_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@OperationsPerInvocation(10_000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureWrong_10000</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reps(<span class="number">10_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@OperationsPerInvocation(100_000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureWrong_100000</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reps(<span class="number">100_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_11_Loops.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实验结果如下，可以发现当使用 for 循环这种方式来测量一次执行的时间是不准确的，大大小于实际执行一次的时间，原因也是因为在有大量循环时，编译器对代码做了优化。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210021852448.png"></p>
<h2 id="Safe-Loops"><a href="#Safe-Loops" class="headerlink" title="Safe Loops"></a>Safe Loops</h2><p>有些时候使用循环是必不可免的，比如需要遍历数据集中的每一个元素，这时也是有安全的基准测试方法的。</p>
<div class="note primary">
            <p>虽然说有 Safe Loops 的方法，但我还是建议能不使用循环就不要使用，因为总会出现一些意想不到的坑。</p>
          </div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line"><span class="meta">@Fork(3)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_34_SafeLooping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BASE + x;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Param(&#123;&quot;1&quot;, &quot;10&quot;, &quot;100&quot;, &quot;1000&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] xs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setup</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        xs = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; size; c++) &#123;</span><br><span class="line">            xs[c] = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureWrong_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> acc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : xs) &#123;</span><br><span class="line">            acc = work(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measureWrong_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> acc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : xs) &#123;</span><br><span class="line">            acc += work(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureRight_1</span><span class="params">(Blackhole bh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : xs) &#123;</span><br><span class="line">            bh.consume(work(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureRight_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : xs) &#123;</span><br><span class="line">            sink(work(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CompilerControl(CompilerControl.Mode.DONT_INLINE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// IT IS VERY IMPORTANT TO MATCH THE SIGNATURE TO AVOID AUTOBOXING.</span></span><br><span class="line">        <span class="comment">// The method intentionally does nothing.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_34_SafeLooping.class.getSimpleName())</span><br><span class="line">                .forks(<span class="number">3</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>measureRight_1 方法使用了 Blackhole 去消费结果，但是 Blackhole 本身也会带来开销，尤其是当 Benchmark 本身的开销为纳秒级别时，可能由 Blackhole 所带来的开销会占主导地位，导致测试结果不准确，这时可以使用 measureRight_2 中的那样调用一个非内联的空方法解决。不过这种 sink 方法官方也不推荐使用，只是说在 nano-benchmarks 时，可以当作一种比较 tricky 方案。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210031747378.png"></p>
<h2 id="CompilerControl"><a href="#CompilerControl" class="headerlink" title="@CompilerControl"></a>@CompilerControl</h2><p>首先了解一个概念叫<strong>方法内联</strong>，我们知道当发生方法调用时，都会生成一个栈帧，当函数调用数量很大，生成的栈帧内存超过 Java 栈总内存时，就会发生 StackOverflowError, 而且方法调用也会有多余的操作指令。方法内联就是把目标方法的代码复制到发起调用的方法之中，避免发生真实的方法调用。JVM 会自动识别热点方法然后进行方法内联优化，这个也会影响基准测试的结果。一段代码需要执行多少次才会触发 JIT 优化通常这个值由 <code>-XX:CompileThreshold</code> 参数进行设置。</p>
<p>但是一个方法就算被 JVM 标注成为热点方法，JVM 仍然不一定会对它做方法内联优化。其中有个比较常见的原因就是这个方法体太大了，分为两种情况。</p>
<ul>
<li>如果方法是经常执行的，默认情况下，方法大小小于 325 字节的都会进行内联（可以通过 <code>-XX:MaxFreqInlineSize=N</code> 来设置这个大小）</li>
<li>如果方法不是经常执行的，默认情况下，方法大小小于 35 字节才会进行内联（可以通过 <code>-XX:MaxInlineSize=N</code> 来设置这个大小）</li>
</ul>
<blockquote>
<p>我们可以通过增加这个大小，以便更多的方法可以进行内联；但是除非能够显著提升性能，否则不推荐修改这个参数。因为更大的方法体会导致代码内存占用更多，更少的热点方法会被缓存，最终的效果不一定好。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_16_CompilerControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_blank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this method was intentionally left blank</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CompilerControl(CompilerControl.Mode.DONT_INLINE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_dontInline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this method was intentionally left blank</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CompilerControl(CompilerControl.Mode.INLINE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">target_inline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this method was intentionally left blank</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">baseline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this method was intentionally left blank</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target_blank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dontinline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target_dontInline();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target_inline();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_16_CompilerControl.class.getSimpleName())</span><br><span class="line">                .warmupIterations(<span class="number">0</span>)</span><br><span class="line">                .measurementIterations(<span class="number">3</span>)</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>理论上来说内联后的性能应该比没有内联的好，实验结果也是如此:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210031349717.png"></p>
<h2 id="Branch-Prediction"><a href="#Branch-Prediction" class="headerlink" title="Branch Prediction"></a>Branch Prediction</h2><p>分支预测是指 CPU 会在处理有规律的数据时要比处理没有规律的数据快，CPU 可以预测这种规律，因此也会对基准测试产生影响。原因可以参考 <a href="https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array">What is Branch Prediction?</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line"><span class="meta">@Fork(5)</span></span><br><span class="line"><span class="meta">@State(Scope.Benchmark)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_36_BranchPrediction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] sorted;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] unsorted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setup</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sorted = <span class="keyword">new</span> <span class="keyword">byte</span>[COUNT];</span><br><span class="line">        unsorted = <span class="keyword">new</span> <span class="keyword">byte</span>[COUNT];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(<span class="number">1234</span>);</span><br><span class="line">        random.nextBytes(sorted);</span><br><span class="line">        random.nextBytes(unsorted);</span><br><span class="line">        Arrays.sort(sorted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@OperationsPerInvocation(COUNT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sorted</span><span class="params">(Blackhole bh1, Blackhole bh2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> v : sorted) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                bh1.consume(v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bh2.consume(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="meta">@OperationsPerInvocation(COUNT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsorted</span><span class="params">(Blackhole bh1, Blackhole bh2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> v : unsorted) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                bh1.consume(v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bh2.consume(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(<span class="string">&quot;.*&quot;</span> + JMHSample_36_BranchPrediction.class.getSimpleName() + <span class="string">&quot;.*&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210031636217.png"></p>
<h2 id="WarmupMode"><a href="#WarmupMode" class="headerlink" title="WarmupMode"></a>WarmupMode</h2><p>这个用的不是很多，应用场景就是我们在运行一个 Benchmark 时，想把其他的 Benchmark 也一起预热一遍，之前的代码中都是一个 Benchmark 在一个进程中运行，在该进程中也只运行自己的 Warmup，而通过设置这个 WarmupMode 参数，可以指定在一个进程中运行 Benchmark 时，也把其他的 Benchmark 进行预热，需要注意的是，只是运行其他 Benchmark 的 Warmup，而其他 Benchmark 的正常迭代不会一起运行。</p>
<ul>
<li>WarmupMode.INDI (只预热自己的 Benchmark)</li>
<li>WarmupMode.BULK (在每个Benchmark执行前都预热所有的Benchmark)</li>
<li>WarmupMode.BULK_INDI (在每个Benchmark执行前都预热所有的Benchmark，且需要再预热本次执行的Benchmark)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JMHSample_32_BulkWarmup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter1</span> <span class="keyword">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter2</span> <span class="keyword">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Counter c1 = <span class="keyword">new</span> Counter1();</span><br><span class="line">    Counter c2 = <span class="keyword">new</span> Counter2();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CompilerControl(CompilerControl.Mode.DONT_INLINE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure</span><span class="params">(Counter c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            s += c.inc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure_c1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> measure(c1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">measure_c2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> measure(c2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">        Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">                .include(JMHSample_32_BulkWarmup.class.getSimpleName())</span><br><span class="line">                .warmupMode(WarmupMode.BULK)</span><br><span class="line">                .forks(<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/openjdk/jmh/tree/master/jmh-samples/src/main/java/org/openjdk/jmh/samples">JMH Examples</a></li>
<li><a href="https://blog.csdn.net/m0_37607945/article/details/111467801">https://blog.csdn.net/m0_37607945/article/details/111467801</a></li>
<li><a href="https://lexburner.github.io/java-jmh/">https://lexburner.github.io/java-jmh/</a></li>
<li><a href="https://www.youtube.com/watch?v=VaWgOCDBxYw">Java Microbenchmark Harness: The Lesser of Two Evils</a></li>
<li><a href="https://icode.best/i/67313731258235">方法内联</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>JMH</tag>
        <tag>Benchmark</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库事务隔离级别</title>
    <url>/2022/10/16/2022-10-16-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
    <content><![CDATA[<p>数据库的事务级别有 4 种，由低到高依次为 <code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code> 和 <code>SERIALIZABLE</code>，这篇文章依次了解一下这四种隔离级别。</p>
<span id="more"></span>

<h2 id="Prepair"><a href="#Prepair" class="headerlink" title="Prepair"></a>Prepair</h2><p>首先需要在自己的机器上安装 MySQL，进行试验前的准备工作，这里对于 MySQL 的安装不作介绍，主要介绍一下如何查看当前的隔离级别，和如何修改隔离级别。我使用的 MySQL 版本是 Server version: 8.0.31 Homebrew</p>
<ul>
<li><p>查看全局隔离级别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT @@global.transaction_isolation;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162144722.png"></p>
</li>
<li><p>修改隔离级别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>SESSION: 表示修改的事务隔离级别将应用于当前 SESSION 内的所有事务；</li>
<li>GLOBAL: 表示修改的事务隔离级别将应用于所有 SESSION（全局）中的所有事务，且当前已经存在的 SESSION 不受影响；</li>
<li>如果省略 SESSION 和 GLOBAL，表示修改的事务隔离级别将应用于当前 SESSION 内的下一个还未开始的事务。</li>
</ul>
</li>
</ul>
<h2 id="READ-UNCOMMITTED"><a href="#READ-UNCOMMITTED" class="headerlink" title="READ UNCOMMITTED"></a>READ UNCOMMITTED</h2><p>这种事务隔离级别下，会出现脏读现象，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据。</p>
<p>实验步骤如下:</p>
<ul>
<li><p>首先有一个 test 表，后面在 test 表中进行实验，test 表中的数据为:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162159850.png"></p>
</li>
<li><p>然后用两个 SESSION，分别按照下面的步骤进行读写操作:</p>
<table>
<thead>
<tr>
<th align="center">Step</th>
<th align="center">SESSION A (Transaction A)</th>
<th align="center">SESSION B (Transaction B)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td>
<td align="center">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">BEGIN;</td>
<td align="center">BEGIN;</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">UPDATE test SET value = ‘world’ WHERE id = 1;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"></td>
<td align="center">SELECT * FROM test WHERE id = 1;</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">ROLLBACK;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"></td>
<td align="center">SELECT * FROM test WHERE id = 1;</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"></td>
<td align="center">COMMIT;</td>
</tr>
</tbody></table>
<p>实验结果如下: 可以发现出现了脏读现象。<br><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162211096.png"></p>
</li>
</ul>
<h2 id="READ-COMMITTED"><a href="#READ-COMMITTED" class="headerlink" title="READ COMMITTED"></a>READ COMMITTED</h2><p>在这种隔离级别下，不会出现脏读现象，但是会出现不可重复读，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。</p>
<p>实验步骤如下:</p>
<ul>
<li><p>使用之前的 test 表；</p>
</li>
<li><p>还是按照上面的步骤进行读写操作，先来验证不会出现脏读现象；发现在另一个事务的更改没有 COMMIT 时，其他事务是无法读到的，所以不会出现脏读现象；</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162238563.png"></p>
</li>
<li><p>按照新的步骤测试不可重复读现象:</p>
<table>
<thead>
<tr>
<th align="center">Step</th>
<th align="center">SESSION A (Transaction A)</th>
<th align="center">SESSION B (Transaction B)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td>
<td align="center">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">BEGIN;</td>
<td align="center">BEGIN;</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"></td>
<td align="center">SELECT * FROM test WHERE id = 1;</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">UPDATE test SET value = ‘world’ WHERE id = 1;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">COMMIT;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"></td>
<td align="center">SELECT * FROM test WHERE id = 1;</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"></td>
<td align="center">COMMIT;</td>
</tr>
</tbody></table>
<p>实验结果如下，出现了不可重复读现象:<br><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162243114.png"></p>
</li>
</ul>
<h2 id="REPEATABLE-READ"><a href="#REPEATABLE-READ" class="headerlink" title="REPEATABLE READ"></a>REPEATABLE READ</h2><p>这种隔离级别下，不会出现不可重复读的现象，但是会出现”幻读”，幻读现象比较复杂，在一个事务中，第一次查询某条记录，发现没有，但是在这个事务还没有结束时，另一个事务插入了这条记录，再次在第一个事务中查询该条记录还是没有，但是当试图更新这条”不存在”的记录时，可以更新成功，并且再次读取同一条记录时，就可以查找到了。前面提到的 <code>READ COMMITTED</code> 级别，一个事务是可以察觉到另一个事务 COMMIT 的更新操作的，但是幻读现象，我们发现一个事务”读”时，无法察觉到另一个事务已经 COMMIT 的插入数据操作。</p>
<p>实验步骤如下:</p>
<ul>
<li><p>仍然使用 test 表；</p>
</li>
<li><p>按照上面的步骤测试，验证不会出现不可重复读现象，也就是同一个事务内读多次的值都是一样的；</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162315911.png"></p>
</li>
<li><p>按照如下步骤测试”幻读”现象:</p>
<table>
<thead>
<tr>
<th align="center">Step</th>
<th align="center">SESSION A (Transaction A)</th>
<th align="center">SESSION B (Transaction B)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td>
<td align="center">SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">BEGIN;</td>
<td align="center">BEGIN;</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"></td>
<td align="center">SELECT * FROM test WHERE id = 2;</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">INSERT INTO test (id, value) VALUES (2, ‘world’);</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">COMMIT;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"></td>
<td align="center">SELECT * FROM test WHERE id = 2;</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"></td>
<td align="center">UPDATE test SET value = ‘hello world’ WHERE id = 2;</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center"></td>
<td align="center">SELECT * FROM test WHERE id = 2;</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center"></td>
<td align="center">COMMIT;</td>
</tr>
</tbody></table>
<p>实验结果如下，出现了幻读现象:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162301593.png"></p>
</li>
</ul>
<h2 id="SERIALIZABLE"><a href="#SERIALIZABLE" class="headerlink" title="SERIALIZABLE"></a>SERIALIZABLE</h2><p>Serializable 是最严格的隔离级别。在 Serializable 隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。虽然 Serializable 隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable隔离级别。</p>
<p>按照 <code>READ UNCOMMITTED</code> 中的实验步骤进行试验，发现同时开启两个事务后，会按照顺序执行，当一个事务没有执行完时，另一个事务会处于等待状态。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162305510.png"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202210162306086.png"></p>
<h2 id="MVCC-Multi-Version-Concurrency-Control"><a href="#MVCC-Multi-Version-Concurrency-Control" class="headerlink" title="MVCC (Multi Version Concurrency Control)"></a>MVCC (Multi Version Concurrency Control)</h2><p>MySQL 数据库的事务隔离是使用 MVCC(多版本并发控制) 来实现的，可以在论文 <a href="https://people.eecs.berkeley.edu/~brewer/cs262/concurrency-distributed-databases.pdf">Concurrency Control in Distributed Database Systems</a> 中见其详细描述。想要了解在 MySQL InnoDB 中是如何实现 MVCC 的，首先还要先了解一些其他知识。</p>
<h3 id="表的隐藏列"><a href="#表的隐藏列" class="headerlink" title="表的隐藏列"></a>表的隐藏列</h3><p>在 MySQL 数据表中，每行记录除了我们自定义的字段外，还有一些数据库隐式定义的字段，如 <code>DB_ROW_ID</code>、<code>DB_TRX_ID</code>、和 <code>DB_ROLL_PTR</code> 等。关于这些隐藏的字段，如何来查看其字段值是什么，我没有找到相关的方法。下面介绍一下这几个字段值存的是什么信息。</p>
<ul>
<li><p>DB_ROW_ID</p>
<p>长度为 6 字节，是隐藏的主键，如果数据表中没有主键，那么 InnoDB 会自动生成一个 <code>DB_ROW_ID</code>。</p>
</li>
<li><p>DB_TRX_ID</p>
<p>长度为 6 字节，用于记录最近修改事务的 ID，记录创建这条记录或者最后一次修改该记录的事务 ID，读的不算。</p>
</li>
<li><p>DB_ROLL_PTR</p>
<p>长度为 7 字节，是一个回滚指针，指向这条记录的上一个版本，用于和 <code>undo log</code> 配合，指向上一个版本，<code>undo log</code> 会在之后进行介绍。</p>
</li>
</ul>
<p>比如下面的一个例子，有一个简单的表</p>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">age</th>
<th align="center">gender</th>
<th align="center">DB_ROW_ID</th>
<th align="center">DB_TRX_ID</th>
<th align="center">DB_ROLL_PTR</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Jack</td>
<td align="center">22</td>
<td align="center">male</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">null</td>
</tr>
</tbody></table>
<p>在这个表中有一条记录，这条记录是刚插进去的，可以发现此时 DB_ROW_ID 是数据库默认为该记录生成的唯一隐式主键，DB_TRX_ID 是当前创建该条数据的事务 ID，DB_ROLL_PTR 是一个回滚指针，指向上一个旧版本，因为该条数据是第一个版本，所以此字段这个时候为 null 。</p>
<h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3>]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Java - Creating &amp; Destroying Objects</title>
    <url>/2022/10/23/2022-10-23-Effective%20Java%20-%20Creating%20and%20Destroying%20Objects/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Item-1-Consider-static-factory-methods-instead-of-constructors"><a href="#Item-1-Consider-static-factory-methods-instead-of-constructors" class="headerlink" title="Item 1: Consider static factory methods instead of constructors"></a>Item 1: Consider static factory methods instead of constructors</h2><p>使用静态工厂方法获取一个类的实例，而不是使用构造方法，一个简单的静态工厂方法的例子， 比如 Boolean 类中的 valueOf 方法，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，这里的静态工厂方法和设计模式中的工厂方法模式并不相同，没有直接的等价。下面介绍静态工厂方法的优点和缺点。在通常情况下，使用静态工厂方法是更可取的，因此要先考虑静态工厂方法再考虑使用其他方法。</p>
<h3 id="Unlike-constructors-they-have-names"><a href="#Unlike-constructors-they-have-names" class="headerlink" title="Unlike constructors, they have names"></a>Unlike constructors, they have names</h3><p>静态工厂方法每个方法都有自己的名字。更易于使用和阅读，而构造方法的名字就是类名，只有一个，只能通过参数的不同来区分方法的不同，容易出错。</p>
<h3 id="Unlike-constructors-they-are-not-required-to-create-a-new-object-each-time-they’re-invoked"><a href="#Unlike-constructors-they-are-not-required-to-create-a-new-object-each-time-they’re-invoked" class="headerlink" title="Unlike constructors, they are not required to create a new object each time they’re invoked"></a>Unlike constructors, they are not required to create a new object each time they’re invoked</h3><p>不会每次调用时都创建一个新对象，如果是构造方法，则会在每次调用时都会创建一个新的实例。如果经常请求等价的对象，使用静态工厂方法会极大的提高性能。当然为了保证每次使用静态工厂方法时，都是返回的同一对象，需要类本身对任何时候存在的类的实例有严格的控制，这被称为 <code>instance-controlled</code>， 比如该类是单例(singleton)或者不可实例化的(noninstantiable)。</p>
<h3 id="Unlike-constructors-they-can-return-an-object-of-any-subtype-of-their-return-type"><a href="#Unlike-constructors-they-can-return-an-object-of-any-subtype-of-their-return-type" class="headerlink" title="Unlike constructors, they can return an object of any subtype of their return type"></a>Unlike constructors, they can return an object of any subtype of their return type</h3><p>可以返回其返回类型的任何子类对象，这样可以不用关心子类的对象具体如何创建的，比如下面的例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">newUser</span><span class="params">(UserEnum type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> ADMIN: <span class="keyword">return</span> <span class="keyword">new</span> Admin();</span><br><span class="line">            <span class="keyword">case</span> STAFF: <span class="keyword">return</span> <span class="keyword">new</span> StaffMember();</span><br><span class="line">            <span class="keyword">case</span> CLIENT: <span class="keyword">return</span> <span class="keyword">new</span> Client();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unsupported user. You input: &quot;</span> + type);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get a Admin user</span></span><br><span class="line">User admin = UserFactory.newUser(ADMIN); </span><br></pre></td></tr></table></figure>

<p>而且如果我想更改子类的实现，比如之前的 Admin 类已经不符合要求，我只需要实现一个新的类 NewAdmin, 然后将 return new Admin() 改为 return new NewAdmin() 即可，这样改动对于使用静态工厂方法的人来说是无感的，而且使用方不需要做任何代码改动。</p>
<h3 id="The-class-of-the-returned-object-can-vary-from-call-to-call-as-a-function-of-the-input-parameters"><a href="#The-class-of-the-returned-object-can-vary-from-call-to-call-as-a-function-of-the-input-parameters" class="headerlink" title="The class of the returned object can vary from call to call as a function of the input parameters"></a>The class of the returned object can vary from call to call as a function of the input parameters</h3><p>这一条其实和上面的差不多，可以根据输入参数的不同返回的对象不同，其实也就是可以返回不同的子类，书中给的例子是 <code>EnumSet</code>, 根据枚举类型的大小返回不同的对象实例，但 <code>RegularEnumSet</code> 和 <code>JumboEnumSet</code> 都是 <code>EnumSet</code> 的子类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; <span class="function">EnumSet&lt;E&gt; <span class="title">noneOf</span><span class="params">(Class&lt;E&gt; elementType)</span> </span>&#123;</span><br><span class="line">    Enum&lt;?&gt;[] universe = getUniverse(elementType);</span><br><span class="line">    <span class="keyword">if</span> (universe == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(elementType + <span class="string">&quot; not an enum&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (universe.length &lt;= <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RegularEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JumboEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="The-class-of-the-returned-object-need-not-exist-when-the-class-containing-the-method-is-written"><a href="#The-class-of-the-returned-object-need-not-exist-when-the-class-containing-the-method-is-written" class="headerlink" title="The class of the returned object need not exist when the class containing the method is written"></a>The class of the returned object need not exist when the class containing the method is written</h3><p>这一条主要用来将类的实现和静态工厂方法分离，比如如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyInterface <span class="title">getMyInterfaceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// load instance dynamically and return it.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在实现静态工厂方法的时候，并不需要关注 MyInterface 这个接口的实现类是如何实现的，具体的实现类的实例会在运行时动态的加载，比如通过反射或者 ServiceLoader 等。这样即使没有接口的实现类，编译也会通过，只是运行时会报错。比如 <code>java.sql.DriverManager</code> 中的 <code>DriverManager.getConnection()</code> 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Connection</span>  <span class="keyword">extends</span> <span class="title">Wrapper</span>, <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// methods</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url, String user, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    java.util.Properties info = <span class="keyword">new</span> java.util.Properties();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">        info.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="keyword">null</span>) &#123;</span><br><span class="line">        info.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (getConnection(url, info, Reflection.getCallerClass()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要定义返回类型的接口，而不需要有其实现类。</p>
<h3 id="Only-providing-static-factory-methods-classes-without-public-or-protected-constructors-cannot-be-subclassed"><a href="#Only-providing-static-factory-methods-classes-without-public-or-protected-constructors-cannot-be-subclassed" class="headerlink" title="Only providing static factory methods, classes without public or protected constructors cannot be subclassed"></a>Only providing static factory methods, classes without public or protected constructors cannot be subclassed</h3><p>因为没有可访问的构造方法，所以该类不可以被继承，在 <code>Collections Framework</code> 中，不可能将任何 Convenience implementation 的类子类化。</p>
<p>集合框架提供了6个类别的实现类:</p>
<ul>
<li>General-purpose implementations: 包括最常用的集合类,例如 HashSet</li>
<li>Special-purpose implementations: 用于特殊场合，具有非标准的性能特点和限制性的使用, 例如 EnumSet 和 CopyOnWriteArraySet</li>
<li>Concurrent implementations: 它们是 java.util.concurrent 包的一部分，被用来设计支持并发,例如 ConcurrentHashMap</li>
<li>Wrapper implementations: 这些类通常结合常用的集合类，来增加或者限制集合类的功能,例如 SynchronizedSet, UnmodifiableSet</li>
<li>Convenience implementations: 通常由静态工厂方法提供，作为一些通常类的高效便捷的替代类，例如 SingletonSet 和 EmptySet</li>
<li>Abstract implementations: 用来为自定义集合类作准备，通常大多数人不需要了解, 例如 AbstractSet。</li>
</ul>
<p>SingletonSet 没有公有和受保护的构造方法，所以其不可被继承。</p>
<h3 id="They-are-hard-for-programmers-to-find"><a href="#They-are-hard-for-programmers-to-find" class="headerlink" title="They are hard for programmers to find"></a>They are hard for programmers to find</h3><p>构造方法在 API 文档中很容易找到，静态工厂方法比较难找。</p>
<h2 id="Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters"><a href="#Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters" class="headerlink" title="Item 2: Consider a builder when faced with many constructor parameters"></a>Item 2: Consider a builder when faced with many constructor parameters</h2><p>在构造方法参数过多时，使用 builder 模式。因为静态工厂方法和构造函数都有一个限制，就是当构造一个类的实例时，如果可选参数很多，那么使用静态工厂方法和构造函数就会比较麻烦而且容易出错。</p>
<h3 id="Telescoping-Constructor-Pattern"><a href="#Telescoping-Constructor-Pattern" class="headerlink" title="Telescoping Constructor Pattern"></a>Telescoping Constructor Pattern</h3><p>按照书中给的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Telescoping constructor pattern - does not scale well!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;  <span class="comment">// required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;     <span class="comment">// required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;     <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;          <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;       <span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate; <span class="comment">// optional</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(servingSize, servings, calories, fat, sodium, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings, <span class="keyword">int</span> calories, <span class="keyword">int</span> fat, <span class="keyword">int</span> sodium, <span class="keyword">int</span>        carbohydrate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">        <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        <span class="keyword">this</span>.calories = calories;</span><br><span class="line">        <span class="keyword">this</span>.fat = fat;</span><br><span class="line">        <span class="keyword">this</span>.sodium = sodium;</span><br><span class="line">        <span class="keyword">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当创建一个实例时，需要:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts(<span class="number">240</span>, <span class="number">8</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">27</span>);</span><br></pre></td></tr></table></figure>

<p>虽然对于 fat 参数并不关心，但还是需要传递一个 0，而且随着可选参数数量的增加，会很容易失控，而且还会增加代码的可读性。</p>
<h3 id="JavaBeans-Pattern"><a href="#JavaBeans-Pattern" class="headerlink" title="JavaBeans Pattern"></a>JavaBeans Pattern</h3><p>JavaBeans 模式就是使用 setter 方法来设置参数值，相比于上面的方法，使用 setter 方法更加具有可读性而且不易出错。但是这种方式有一个严重的缺点，就是会出现一致性问题。比如下面的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> firstName; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123; <span class="keyword">this</span>.firstName = firstName; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> lastName; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123; <span class="keyword">this</span>.lastName = lastName; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在多线程环境下，我想把初始化的 Person 对象: <code>FirstName: George, LastName: Bush</code> 改成 <code>FirstName: Barak, LastName: Obama</code>，需要调用 2 次 setter 方法，则可能会出现 <code>FirstName: Barak, LastName: Bush</code> 这种不一致的情况。</p>
<p>一种方法将 Person 变成不可变的，就是将属性设置为 final 的，并且没有了 setter 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">    </span><br><span class="line">    Person(String firstName, String lastName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> firstName; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> lastName; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 Person 是不可变的，所以就不能使用老的对象来改变他的任何属性。不过这样的话，创建对象时就又和使用构造函数一样了。</p>
<h3 id="Builder-Pattern"><a href="#Builder-Pattern" class="headerlink" title="Builder Pattern"></a>Builder Pattern</h3><p>Builder 模式结合了 Telescoping Constructor 模式的安全性和 JavaBeans 模式的可读性。比如下面的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Builder Pattern</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line">    </span><br><span class="line">  	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required parameters</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">        <span class="comment">// Optional parameters - initialized to default values</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="keyword">this</span>.servings = servings;</span><br><span class="line">				&#125;</span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">            </span>&#123; calories = val; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">            </span>&#123; fat = val; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">            </span>&#123; sodium = val; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">            </span>&#123; carbohydrate = val; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">      	servings = builder.servings;</span><br><span class="line">				calories = builder.calories;</span><br><span class="line">				fat = builder.fat;</span><br><span class="line">				sodium = builder.sodium;</span><br><span class="line">				carbohydrate = builder.carbohydrate;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建对象时使用 builder 对象的类似 setter 的方法来设置每个可选参数，最后，调用一个无参的 build 方法来生成对象。Builder 是所构建类的一个静态成员类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>)</span><br><span class="line">                                            .calories(<span class="number">100</span>)</span><br><span class="line">                                            .sodium(<span class="number">35</span>)</span><br><span class="line">                                            .carbohydrate(<span class="number">27</span>)</span><br><span class="line">                                            .build();</span><br></pre></td></tr></table></figure>

<h4 id="Well-suited-to-class-hierarchies"><a href="#Well-suited-to-class-hierarchies" class="headerlink" title="Well suited to class hierarchies"></a>Well suited to class hierarchies</h4><p>Builder 模式非常适合类层次结构，把每个 builder 嵌套在相应的类中，抽象类有抽象的 builder，具体类有具体的 builder。这句话的意思要好好思考一下，首先先搞清楚下面的两个概念。</p>
<h5 id="Covariant-Return-Typing"><a href="#Covariant-Return-Typing" class="headerlink" title="Covariant Return Typing"></a>Covariant Return Typing</h5><p>协变返回类型，是指子类重写父类的方法时，返回的类型可以是父类方法返回类型的子类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Simulated-self-type"><a href="#Simulated-self-type" class="headerlink" title="Simulated self-type"></a>Simulated self-type</h5><p>这里有一个有意思的问题，首先我们知道在 Java 中有多态的概念，也就是我们可以用父类来接收一个子类，比如下面的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">      	dog.call();</span><br><span class="line">      </span><br><span class="line">      	System.out.println(dog.getClass().getName());</span><br><span class="line">        Class&lt;?&gt; clazz = dog.getClass();</span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method: methods) &#123;</span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// dog</span></span><br><span class="line"><span class="comment">// org.example.Dog</span></span><br><span class="line"><span class="comment">// call</span></span><br><span class="line"><span class="comment">// call1</span></span><br></pre></td></tr></table></figure>

<p>可以发现实际上 dog 的类还是 Dog，但是我们如果调用 <code>dog.call1()</code> 编译就会出错，在 IDEA 中直接出现红线。说明我们如果用父类来接子类的话，真正能够调用的只有父类所拥有的那些方法。于是，就引出了下面一个稍微复杂的问题，我现在想在有继承关系的类中使用 Builder 模式，加入代码写成如下的样子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rabbit</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        sex = builder.sex;</span><br><span class="line">        name = builder.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> String sex;</span><br><span class="line">        <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sex = sex;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Rabbit <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rabbit(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lop</span> <span class="keyword">extends</span> <span class="title">Rabbit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> earLength;</span><br><span class="line">    <span class="keyword">public</span> String furColour;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lop</span><span class="params">(LopBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        <span class="keyword">this</span>.earLength = builder.earLength;</span><br><span class="line">        <span class="keyword">this</span>.furColour = builder.furColour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LopBuilder</span> <span class="keyword">extends</span> <span class="title">Rabbit</span>.<span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">float</span> earLength;</span><br><span class="line">        <span class="keyword">protected</span> String furColour;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LopBuilder</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LopBuilder <span class="title">earLength</span><span class="params">(<span class="keyword">float</span> length)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.earLength = length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LopBuilder <span class="title">furColour</span><span class="params">(String colour)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.furColour = colour;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Lop <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Lop(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么使用下面的代码是会有编译错误的，因为<code>.name()</code> 方法返回的类已经是 Rabbit.Builder 父类了，所以后面不能使用 <code>.earLength()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lop lop = <span class="keyword">new</span> Lop.LopBuilder().furColour(<span class="string">&quot;Gray&quot;</span>).name(<span class="string">&quot;Rabbit&quot;</span>).earLength(<span class="number">4.6f</span>).build();</span><br></pre></td></tr></table></figure>

<p>但是如果更改调用的顺序即可，因为他是先调用的所有返回子类的方法，再调用的返回父类的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lop lop = (Lop) <span class="keyword">new</span> Lop.LopBuilder().furColour(<span class="string">&quot;Gray&quot;</span>).earLength(<span class="number">4.6f</span>).name(<span class="string">&quot;Rabbit&quot;</span>).build();</span><br></pre></td></tr></table></figure>

<p>但是这里还会有一个问题，就是最后 <code>.name(&quot;Rabbit&quot;).build()</code> 返回的对象是父类 Rabbit，这样我们使用子类 Lop 来接的话，还要手动转换一次，这样就有点困惑，虽然我们使用的是 <code>new Lop.LopBuilder().xxx</code> 但是返回的却是父类对象，还需要强转为子类才行。</p>
<div class="note danger">
            <p>所以会发现这里有 2 个问题:</p><ul><li>当有继承关系时，对于 Builder 模式，要有严格的调用顺序</li><li>需要子类对象时，必须要手动强转</li></ul>
          </div>

<p>下面来看如何解决上面的两个问题: 使用带有递归类型参数的泛型类型和抽象的 self 方法结合，允许方法链在子类中正常工作，而且不需要强制转换。代码改成下面的样子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rabbit</span><span class="params">(Builder&lt;?&gt; builder)</span> </span>&#123;</span><br><span class="line">        sex = builder.sex;</span><br><span class="line">        name = builder.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> String sex;</span><br><span class="line">        <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">sex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sex = sex;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">self</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> Rabbit <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lop</span> <span class="keyword">extends</span> <span class="title">Rabbit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> earLength;</span><br><span class="line">    <span class="keyword">public</span> String furColour;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lop</span><span class="params">(LopBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        <span class="keyword">this</span>.earLength = builder.earLength;</span><br><span class="line">        <span class="keyword">this</span>.furColour = builder.furColour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LopBuilder</span> <span class="keyword">extends</span> <span class="title">Rabbit</span>.<span class="title">Builder</span>&lt;<span class="title">LopBuilder</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">float</span> earLength;</span><br><span class="line">        <span class="keyword">protected</span> String furColour;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LopBuilder</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> LopBuilder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">Lop <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Lop(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LopBuilder <span class="title">earLength</span><span class="params">(<span class="keyword">float</span> length)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.earLength = length;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> LopBuilder <span class="title">furColour</span><span class="params">(String colour)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.furColour = colour;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时使用任意的调用顺序，都不会出现错误了。该代码一开始直接看可能比较困惑，但是自己按照顺序来实践一下就会有更深的理解:</p>
<div class="note info">
            <ul><li>首先先把 Rabbit 类改成抽象类，其中的 Builer 也改成抽象类，因为抽象类是不能被实例化的，所以 build() 方法也要变为抽象方法</li><li>Lop 类此时需要去实现子类的 build() 方法，根据之前提到的协变返回类型，子类的返回类型可以为 Lop，实践到这一步时，编译错误还是存在的，其实还没有解决上面的问题</li><li>最后将父类抽象类中返回类型为 Builder 的方法，改为返回泛型 T，因为 Java 语法不能直接 <code>return T</code>，所以就还需要加一个抽象的 self() 方法，并在子类去实现它</li></ul>
          </div>

<p>至此就全部完成了，这部分代码还是比较绕的，最好上手操作一下，第一次看这部分的时候好多概念搞不懂，断断续续看了好久，博客的这部分内容也拖了好久才写完。</p>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Builder 模式非常灵活，它的缺点是需要多创建一个类的 Builder，虽然创建这个 Builder 的成本在实践中不太可能被注意到，但在性能关键的情况下可能会出现问题。在可选参数足够多，或者未来可能要添加更多的参数时，值得使用这种模式。而且 Builder 模式比 JavaBeans 更安全。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>Effective Java</li>
<li><a href="https://stackoverflow.com/questions/21086417/builder-pattern-and-inheritance">https://stackoverflow.com/questions/21086417/builder-pattern-and-inheritance</a></li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Effective Java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程和线程池</title>
    <url>/2022/12/01/2022-11-19-Thread%20&amp;%20ThreadPool/</url>
    <content><![CDATA[<p>这篇文章介绍一下线程和线程池。</p>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>有一个概念之前一直没搞清楚，所以导致自己对线程池的理解一直有问题，先说一下自己之前理解的误区，因为我们知道线程的状态有这么几种: </p>
<table>
<thead>
<tr>
<th align="center">Status</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NEW</td>
<td align="center">初始状态，线程被构建，但是还没有调用 start() 方法</td>
</tr>
<tr>
<td align="center">RUNNABLE</td>
<td align="center">运行状态，Java 线程将操作系统中的就绪和运行两种状态笼统的称作“运行中”</td>
</tr>
<tr>
<td align="center">BLOCKED</td>
<td align="center">阻塞状态，表示线程阻塞于锁</td>
</tr>
<tr>
<td align="center">WAITING</td>
<td align="center">等待状态，表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作(通知或中断)</td>
</tr>
<tr>
<td align="center">TIME_WAITING</td>
<td align="center">超时等待状态，该状态不同于 WAITING，它是可以在指定的时间自行返回的</td>
</tr>
<tr>
<td align="center">TERMINATED</td>
<td align="center">终止状态，表示当前线程已经执行完毕</td>
</tr>
</tbody></table>
<p>之前觉得线程运行完任务之后就终止了，如果按照线程池的理解，线程运行完之后是没有被销毁的，而是在一个”池子“里，以便于之后再运行时就不用再重新创建线程了。当时就想既然之前这个线程都已经把任务执行完了，为什么还会再次运行呢？有这个误解其实是因为我把”线程“和”任务“混为一谈了，认为线程就是任务，任务就是线程，这是不对的。以下面的一段代码为例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;Runnable&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      </span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runnable r = queue.take();</span><br><span class="line">                    r.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            queue.put(() -&gt; System.out.println(<span class="string">&quot;Test: &quot;</span> + m++));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Test: 0</span></span><br><span class="line"><span class="comment">// Test: 1</span></span><br><span class="line"><span class="comment">// Test: 2</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>这段代码是在一个线程里面按顺序执行了 20 个任务，通过这段代码就可以知道线程和任务是不同的两个概念，用同一个线程是可以执行多个任务的，所以线程池不销毁线程就可以在别的新任务来的时候，复用已经有的线程，避免创建线程的开销。</p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>池化是经常使用的一个技术，比如线程池、数据库连接池等。池化都是为了减少资源开销，提高响应速度。显然既然需要线程池，那就说明创建线程是一个开销很大的操作。最简单来说创建一个线程需要给它分配内存，列入调度，同时在线程进行切换时，还需要执行内存换页，清空 CPU 缓存等操作。</p>
<p>当启动一个新线程时，Java 虚拟机为该线程创建一个新的线程栈，什么是线程栈呢？它是线程独有的，保存其运行状态和局部变量的。线程栈在线程开始的时候初始化，并且每个线程的栈互相独立，默认一个线程的线程栈大小是 1 Mb，也就是说每创建一个线程就需要消耗 1 Mb 的内存。所以说如果不对线程的创建进行有效监控、管理，风险巨大:</p>
<ul>
<li><p>频繁申请/销毁资源和调度资源，将带来额外的消耗，可能会非常巨大</p>
</li>
<li><p>对资源无限申请，缺少抑制手段，将引发系统内存资源耗尽的风险</p>
</li>
<li><p>系统无法合理管理内部的资源分布，将降低系统的稳定性</p>
</li>
</ul>
<h2 id="如何创建一个线程"><a href="#如何创建一个线程" class="headerlink" title="如何创建一个线程"></a>如何创建一个线程</h2><p>创建一个线程一般有 3 种方法(这里不讨论线程池)。</p>
<ul>
<li><p>继承 Thread 类，并重写 run() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;  &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadTest t = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现 Runnable 接口，重写 run() 方法，并将该对象传递给 Thread 类对。(这里的 Runnable 对象相当于任务)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadTest tr = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(tr);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有一种等价的更简便的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把上面换成使用 lambda 表达式更为简单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面两种方法其实是差不多的，我们通过 Thread 类的源码可以发现，线程去执行任务时<strong>本质都是去执行重写的 Runnable 接口的 run() 方法</strong>，下面是 Thread 类的 run() 方法，如果我们使用的是前面第一种方法，那么 ThreadTest 执行的 run() 方法就是 ThreadTest 子类自己实现的，如果使用第二种方法，那么其实执行的就是下面源码中的 target 的 run() 方法，而这个 target 就是我们传进去的那个实现了 Runnable 接口的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是第二种方法比第一种好，理由如下: </p>
<ul>
<li>可以将线程对象和任务对象分离开，降低了耦合性，利于维护。</li>
<li>可以提高性能减少开销，因为第一种每次运行一个任务都要新建一个独立的线程类去运行，而第二种方法只用把任务传给已有的线程即可。(相当于线程池大小为 1)</li>
<li>Java 语言不支持双继承，第一种方法中，如果我们的类一旦继承了 Thread 类，那么它后续就没有办法再继承其他的类，这样一来，如果未来这个类需要继承其他类实现一些功能上的拓展，它就没有办法做到了，相当于限制了代码未来的可拓展性</li>
</ul>
</li>
<li><p>通过 Callable 和 Future 创建线程</p>
<p>这种线程创建方式是通过有返回值的 Callable 创建线程，Runnable 创建线程是无返回值的，而 Callable 和与之相关的 Future、FutureTask，它们可以把线程执行的结果作为返回值返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CallableTest ct = <span class="keyword">new</span> CallableTest();</span><br><span class="line">        FutureTask&lt;String&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(ct);</span><br><span class="line"></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">        t.start();</span><br><span class="line">        </span><br><span class="line">        System.out.println(ft.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现 Callable 接口的子类要重写 call() 方法，根据 FutureTask 源码中的 run() 方法可以发现，实际上就是调用了重写的 call() 方法，<code>result = c.call()</code></p>
</li>
</ul>
<h2 id="如何使用线程池"><a href="#如何使用线程池" class="headerlink" title="如何使用线程池"></a>如何使用线程池</h2><h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p>创建线程池的方法总共可以分为 2 类，一类是使用 <code>ThreadPoolExecutor</code>，另一类是使用 <code>Executors</code>。这里先说结论，阿里巴巴的《Java 开发手册》中提到，线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，原因是因为这样可以更明确线程池的运行规则，规避资源耗尽的风险，使用 Executors，容易出现 OOM 的问题。</p>
<h4 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h4><h5 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h5><p>创建一个固定大小的线程池，可以控制并发的线程数，超出的线程会在 <code>LinkedBlockingQueue</code> 队列中等待。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  ExecutorService threadPool = Executors.newFixedThreadPool(n);</span><br><span class="line"></span><br><span class="line">  Runnable runnable = () -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Start:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">      Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    threadPool.execute(runnable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  threadPool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现当 <code>n=2</code> 时，线程池中只有 2 个线程，处理 4 个任务时，就会先处理 2 个，然后另外两个需要排队等待。当 <code>n=4</code> 时，4 个任务就会同时处理。</p>
<h5 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h5><p>可缓存的线程池，当目前线程数超过任务处理所需要的线程，那么过一段时间多余的线程就会被回收，如果当前的线程数小于任务处理所需的线程，那么就创建新的线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ExecutorService threadPool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    threadPool.execute(() -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Start:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">  		<span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="SingleThreadExecutor"><a href="#SingleThreadExecutor" class="headerlink" title="SingleThreadExecutor"></a>SingleThreadExecutor</h5><p>创建单个线程数的线程池，可以保证先进先出的执行顺序。代码示例和上述一样。</p>
<h5 id="ScheduledThreadPool"><a href="#ScheduledThreadPool" class="headerlink" title="ScheduledThreadPool"></a>ScheduledThreadPool</h5><p>执行延迟任务的线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ScheduledExecutorService threadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;Task add at:&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">  </span><br><span class="line">  threadPool.schedule(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Task execute at:&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Task add at:Sat Jun 10 22:24:19 CST 2023</span></span><br><span class="line"><span class="comment">// Task execute at:Sat Jun 10 22:24:24 CST 2023</span></span><br></pre></td></tr></table></figure>

<h5 id="SingleThreadScheduledExecutor"><a href="#SingleThreadScheduledExecutor" class="headerlink" title="SingleThreadScheduledExecutor"></a>SingleThreadScheduledExecutor</h5><p>单线程的可以执行延迟任务的线程池</p>
<h5 id="WorkStealingPool"><a href="#WorkStealingPool" class="headerlink" title="WorkStealingPool"></a>WorkStealingPool</h5><p>这个线程池和之前线程池不同的点在于，前面的线程池中，一个线程的集合去另外一个共享的任务队列里取任务执行。<code>WorkStealing</code> 每一个线程都有自己的单独队列，所以任务不断往里扔的时候它会在每一个线程的队列上不断的累积，当某一个线程执行完自己的任务之后，就会去另外一个线程上面偷。</p>
<h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><p>最原始的创建线程池的方法，可以自定义参数，完全由程序员自己掌控生成什么样的线程池。</p>
<ul>
<li>corePoolSize</li>
<li>maximumPoolSize</li>
<li>keepAliveTime</li>
<li>TimeUnit</li>
<li>BlockingQueue&lt;Runnable&gt;</li>
<li>ThreadFactory</li>
<li>RejectedExecutionHandler<ul>
<li>AbortPolicy</li>
<li>CallerRunsPolicy (这种可以让所有的任务都执行完毕)</li>
<li>DiscardOldestPolicy</li>
<li>DiscardPolicy</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">100</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> index = i;</span><br><span class="line">    threadPool.execute(() -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;index: &quot;</span> + index + <span class="string">&quot;, thread:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  threadPool.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li>《Java 并发编程艺术》</li>
<li><a href="https://zhuanlan.zhihu.com/p/161628226">https://zhuanlan.zhihu.com/p/161628226</a></li>
<li><a href="https://stackoverflow.com/questions/31145052/difference-between-call-stack-and-thread-stack">https://stackoverflow.com/questions/31145052/difference-between-call-stack-and-thread-stack</a></li>
<li><a href="https://learn.lianglianglee.com/">https://learn.lianglianglee.com/</a></li>
<li><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html</a></li>
<li><a href="https://www.cnblogs.com/vipstone/p/14149065.html">https://www.cnblogs.com/vipstone/p/14149065.html</a></li>
<li><a href="https://blog.csdn.net/dabusiGin/article/details/105323796">https://blog.csdn.net/dabusiGin/article/details/105323796</a></li>
<li><a href="https://blog.csdn.net/weixin_48052161/article/details/120585437">https://blog.csdn.net/weixin_48052161/article/details/120585437</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Thread</tag>
        <tag>ThreadPool</tag>
      </tags>
  </entry>
  <entry>
    <title>GC</title>
    <url>/2022/12/01/2022-11-20-GC/</url>
    <content><![CDATA[<p>这篇文章会介绍一下 G1GC 和 CMS，起因是有一次组长让帮忙查一下目前线上使用的 GC 是什么，当时不知道是什么意思，后来才知道 JVM 中垃圾收集器是有很多种的(当时只知道有不同的垃圾回收算法)。</p>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Most of the time, the default settings should work just fine. If necessary, you can adjust the heap size to improve performance. If the performance still doesn’t meet your goals, you can modify the collector as per your application requirements:</p>
<ul>
<li><strong>Serial</strong> - If the application has a small data set (up to approximately 100 MB) and/or it will be run on a single processor with no pause-time requirements</li>
<li><strong>Parallel</strong> - If peak application performance is the priority and there are no pause-time requirements or pauses of one second or longer are acceptable</li>
<li><strong>CMS / G1</strong> - If response time is more important than overall throughput and garbage collection pauses must be kept shorter than approximately one second</li>
<li><strong>ZGC</strong> - If response time is a high priority, and/or you are using a very large heap</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.freecodecamp.org/news/garbage-collection-in-java-what-is-gc-and-how-it-works-in-the-jvm/">https://www.freecodecamp.org/news/garbage-collection-in-java-what-is-gc-and-how-it-works-in-the-jvm/</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1767661?from=article.detail.1592943">https://cloud.tencent.com/developer/article/1767661?from=article.detail.1592943</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1429131">https://cloud.tencent.com/developer/article/1429131</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>Tiered Redis</title>
    <url>/2022/11/28/2022-11-28-Tiered%20Redis/</url>
    <content><![CDATA[<p>分层缓存解决方案，将冷数据存到 Blob Storage</p>
<span id="more"></span>

<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202211291424801.png" style="zoom:60%;" />

<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202211291427641.png" style="zoom:60%;" />

<h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202211291426562.png" style="zoom:60%;" />

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/szstonelee/redrock">https://github.com/szstonelee/redrock</a></li>
<li><a href="https://github.com/ccb1900/redisbygo">https://github.com/ccb1900/redisbygo</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Distributed Lock</title>
    <url>/2022/11/30/2022-11-30-Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<p>使用 <code>SETNX</code> 和 <code>Lua</code> 脚本实现 Redis 分布式锁。</p>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>最近工作中遇到了一个 BigKey 的问题，就是有一个任务会在某个时间把 Redis 中的一个 BigKey 给清掉。这时其他很多台 Server 发现 Redis 中没有值，会同时往 Redis 中写值，导致 Redis 被击垮。当时研究了 3 种可能的方案:</p>
<ul>
<li><p>Pagination + Pipeline: 因为我们的 BigKey 都是 Hash Object，所以一种想法是通过简单的分页来降低 Key 的大小，比如一个 Hash Object 有 12000 对 key-value(这里的 key 指 Hash 对象中的 field，而不是整个 Hash Object 的 key)，我们可以把 12000 个拆成 120 份，每次 hset 其中的 100 对 key-value。</p>
<ul>
<li>hset KEY key-1 val-1 key-2 val-2 … key-100 val-100</li>
<li>hset KEY key-101 val-101 … key-200 val-200</li>
<li>…</li>
</ul>
<p>同时为了提高效率，使用 Jedis 的 Pipeline 来实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pagination</span><span class="params">(String key, Map&lt;String, String&gt; map, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;(map.keySet());</span><br><span class="line"> </span><br><span class="line">    Pipeline pipeline = jedis.pipelined();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i += pageSize) &#123;</span><br><span class="line">        <span class="keyword">int</span> endPoint = Math.min(i + pageSize, map.size());</span><br><span class="line">        List&lt;String&gt; subKeys = keys.subList(i, endPoint);</span><br><span class="line"> </span><br><span class="line">        Map&lt;String, String&gt; subMap = map.entrySet().stream().filter(ent -&gt; subKeys.contains(ent.getKey())).collect(Collectors.toMap(e -&gt; e.getKey(), e -&gt; e.getValue()));</span><br><span class="line"> </span><br><span class="line">        pipeline.hset(key, subMap);</span><br><span class="line">    &#125;</span><br><span class="line">    pipeline.sync();</span><br><span class="line">    jedis.disconnect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Redis Transaction: 因为上面的方法是通过分页去 hset 进去的，中间可能有其他的 get 命令插进来，导致 get 到的数据并不是全量的，如果业务对数据齐全要求很高，那么就会有问题。第二种就是使用 Redis Transaction 和 Pagination 结合起来，使其不会出现中间有其他命令插进去的情况。这两种方法只能从一定程度上解决，但由于这两种分页的命令也都是全发过去之后再去执行的，所以对于 Redis Memory 的消耗也是很大的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transaction</span><span class="params">(String key, Map&lt;String, String&gt; map, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">         </span><br><span class="line">    jedis.watch(key);</span><br><span class="line">    Transaction tx = jedis.multi();</span><br><span class="line">         </span><br><span class="line">    List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;(map.keySet());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i += pageSize) &#123;</span><br><span class="line">        <span class="keyword">int</span> endPoint = Math.min(i + pageSize, map.size());</span><br><span class="line">        List&lt;String&gt; subKeys = keys.subList(i, endPoint);</span><br><span class="line">        Map&lt;String, String&gt; subMap = map.entrySet().stream().filter(ent -&gt; subKeys.contains(ent.getKey())).collect(Collectors.toMap(e -&gt; e.getKey(), e -&gt; e.getValue()));</span><br><span class="line"> </span><br><span class="line">        tx.hset(key, subMap);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    tx.exec();</span><br><span class="line">    jedis.disconnect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Distributed Lock: 最直接的方法是使用分布式锁，只让一个 Server 的 “写” 请求可以打到 Redis， 其余 Server 都因为没有抢到锁而被拒绝。</p>
</li>
</ul>
<h2 id="Redis-Distributed-Lock"><a href="#Redis-Distributed-Lock" class="headerlink" title="Redis Distributed Lock"></a>Redis Distributed Lock</h2><p>使用 Redis 实现分布式锁，需要使用 <code>SETNX</code> 和 <code>Lua</code> 脚本才可以，只使用 <code>SETNX</code> 也是会出现问题的。</p>
<h3 id="SETNX"><a href="#SETNX" class="headerlink" title="SETNX"></a>SETNX</h3><p><code>SETNX</code> 命令是只有在指定的 key 不存在时，才会为 key 设置指定的值，这样就可以用来做一个锁，当第一个 Client <code>SETNX</code> 成功之后，其他 Client <code>SETNX</code> 就会失败，因为已经有这个 key 了，相当于没抢到锁。但是为了防止死锁的出现，还会为这个锁设置一个过期时间，使用 <code>SETNX</code> + <code>EXPIRE</code> 不是一个原子操作，所以使用下面的原子性操作命令来进行加锁:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET $&#123;LOCK&#125; $&#123;UUID&#125; NX PX 10000</span><br></pre></td></tr></table></figure>

<p>释放锁也很简单，就是直接把 key 从 Redis 中删掉即可。只不过需要先 get 一下这个 key 的值，看看是不是当初自己设置的那个值，再去删除。下面是实例代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createOrder</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String key = user.getUsername();</span><br><span class="line">    String value = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Boolean flag = redisTemplate.opsForValue().setIfAbsent(key, value, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    <span class="keyword">if</span> (flag != <span class="keyword">null</span> &amp;&amp; flag) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Get LOCK: &#123;&#125; successfully&quot;</span>, key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">15</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String lockValue = (String) redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (lockValue != <span class="keyword">null</span> &amp;&amp; lockValue.equals(value)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">            log.info(<span class="string">&quot;Unlock &#123;&#125; successfully&quot;</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Get LOCK: &#123;&#125; fail&quot;</span>, key);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;FAIL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码已经对锁中存的值进行了检查，但是还是会有小概率情况会出现问题，假设下面这种情况:</p>
<table>
<thead>
<tr>
<th align="center">Client A</th>
<th align="center">Client B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">6: GET LOCK ✅</td>
<td align="center">❌</td>
</tr>
<tr>
<td align="center">15: redisTemplate.opsForValue().get(key) ✅</td>
<td align="center">❌</td>
</tr>
<tr>
<td align="center">16: Check ✅</td>
<td align="center">❌</td>
</tr>
<tr>
<td align="center"><strong>Now LOCK is expired</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">6: GET LOCK SUCCESS ✅</td>
</tr>
<tr>
<td align="center">17: redisTemplate.delete(key)</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>在这种极端情况下，Client A 会把 Client B 的锁给释放掉，这显然是不对的。</p>
<h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><p>为了解决上面的问题，我们需要使用 Lua 脚本，Lua 脚本最重要的功能就是可以将多个 Redis 命令组合成一个原子操作。如果我们仔细观察可以发现，上面出问题的根本原因就是，在 get 和 delete 中间插入了新的 setnx 命令，如果我们把 get 和 delete 这两个命令组合成原子操作就不会有问题了，因为 Redis 是单线程的。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- util.lua</span></span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultRedisScript&lt;Long&gt; script;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        script = <span class="keyword">new</span> DefaultRedisScript&lt;Long&gt;();</span><br><span class="line">        script.setResultType(Long.class);</span><br><span class="line">        script.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;util.lua&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createOrder</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String key = user.getUsername();</span><br><span class="line">        String value = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Boolean flag = redisTemplate.opsForValue().setIfAbsent(key, value, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (flag != <span class="keyword">null</span> &amp;&amp; flag) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Get LOCK: &#123;&#125; successfully&quot;</span>, key);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span> * <span class="number">15</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String lockValue = (String) redisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">if</span> (lockValue != <span class="keyword">null</span> &amp;&amp; lockValue.equals(value)) &#123;</span><br><span class="line"></span><br><span class="line">                List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                keys.add(key);</span><br><span class="line">                redisTemplate.execute(script, keys, lockValue);</span><br><span class="line"></span><br><span class="line">                log.info(<span class="string">&quot;Unlock &#123;&#125; successfully&quot;</span>, key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Get LOCK: &#123;&#125; fail&quot;</span>, key);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;FAIL&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码就是把删除 key 时换成了使用 Lua 脚本去删除。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/xls56iii/redis-distributed-lock">完整代码</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title>问汝平生功业，黄州惠州儋州</title>
    <url>/2023/01/01/2023-01-01-%E9%97%AE%E6%B1%9D%E5%B9%B3%E7%94%9F%E5%8A%9F%E4%B8%9A%EF%BC%8C%E9%BB%84%E5%B7%9E%E6%83%A0%E5%B7%9E%E5%84%8B%E5%B7%9E/</url>
    <content><![CDATA[<p>经过 Omicron 10 天的折磨，终于恢复的差不多了。</p>
<span id="more"></span>

<h2 id="“阳过”"><a href="#“阳过”" class="headerlink" title="“阳过”"></a>“阳过”</h2><p>从石家庄等第一批城市的放开，到全国全面放开，然后大面积的感染高峰的到来，当然之后是全民免疫之后的生产生活的恢复，可以说每个人都是要来这么一遭的。我是 2022 年 12 月 21 日开始出现症状，到 12 月 30 日基本恢复过来，总共用了 10 天时间。</p>
<ul>
<li>2022-12-21: 早上起来嗓子有点干，以为是昨晚空调开多了，中午嗓子开始难受，变得有点哑，下午的时候开始发冷，量体温是 37.6 度，确认大概率中招了。晚上睡觉前 39.2 度，吃了一粒布洛芬。</li>
<li>2022-12-22 ～ 2022-12-23: 这 2 天主要症状就是头疼高烧，白天晚上基本发烧都是 38.2 度到 38.8 度之间，没有上过 39 度，嗓子有不适感，但是不疼，这两天也是吃布洛芬，但是感觉没啥效果，不知道是不是因为布洛芬主要还是止痛，对退烧的效果一般，所以第 2 天下午没吃药，到晚上离上次吃布洛芬过了 12 小时，改吃泰诺。</li>
<li>2022-12-24 ～ 2022-12-25: 这两天发热症状好了一些，白天的时候维持在 37 度多，但是晚上经常被烧醒，体温也不算特别高，38.2 - 38.5 的样子，但是晚上高烧会头痛痛醒，同时这两天也是继续吃泰诺，不过白天不太烧的话药量会减半。</li>
<li>2022-12-26 ～ 2022-12-27: 从今天开始就没有发烧症状了，也不头疼了，但是嗓子症状开始严重起来，“刀片嗓”，同时眼睛有点疼，看屏幕多了会流泪，这两天主要就还是躺着休息，没吃什么药。</li>
<li>2022-12-28 ～ 2022-12-30: 嗓子一直难受没有好的迹象，吃了 3 天的 “蓝芩颗粒”，到最后一天嗓子好了很多，虽然有时候还是感觉不舒服，但是基本不痛了。</li>
</ul>
<p>这就是我感染到康复的过程，不过也不能说完全康复，现在嗓子还是有些不舒服，会有鼻涕，而且体力和之前差了很多，出去吃个饭走走路骑个共享单车，就会觉得有些累。只能说虽然对年轻人来说致死率极低，但还是要多加重视，并不是简单的大号流感那么简单，至少我身边就有遇到许多成年人因新冠过世的，更不必说老年人了。</p>
<h2 id="“阳康”"><a href="#“阳康”" class="headerlink" title="“阳康”"></a>“阳康”</h2><blockquote>
<p>心似已灰之木，身如不系之舟。问汝平生功业，黄州惠州儋州。</p>
<p align="right">---苏轼《自题金山画像》</p>
</blockquote>
<p>一直以来最喜欢的词人就是“苏辛”二人，尤其是苏轼一生中所表现出来的豁达。在得病的这段时间，看到了网络上的各种言论，这里不去评判其中的对错，只是这些反映出了世间的人生百态，颇有意味。有认为“早阳早好”的，有呼吁“能晚阳就晚阳，能不阳就不阳的”，有阳了之后分享康复过程的，同时也有家中老人不幸离世的，还有大多数人是默默经历这段过程的，一切皆是旅程，坦然以对，顺其自然。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>无聊的崇明岛之行</title>
    <url>/2023/03/23/2023-03-23-%E7%8E%AF%E5%B4%87%E6%98%8E%E5%B2%9B/</url>
    <content><![CDATA[<p>去年没用完的假就要过期了，所以正好借这个机会去崇明岛环岛骑行，上一次骑行还是 2019 年环青海湖，没想到已然过了 4 年光景。想到这里又不免有些惆怅，不过这篇博文主要是记录一下环崇明岛的经历，氐惆留给以后。</p>
<span id="more"></span>

<h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>其实想去骑车环岛也算是临时起意，第一天中午才睡醒，然后吃完饭又在床上躺到了 2 点多，之后坐地铁赶去宝山取车，这也是自己第一次买自行车，在公路车和山地车中间纠结了很久，因为自己之前骑车也都是骑的山地车，并且如果买公路车的话，不上碳架又觉得不够意思，于是就买了现在的 XTC 820。</p>
<p>买完车都已经快 5 点了，因为之前也没看攻略，准备出发去渡口的时候才发现晚上 5:30 是最后一班轮渡，想来是赶不上了，但还是努力往那边赶，想着还可以节省半天的时间。当然结果还是没赶到，当天晚上就在宝山住下了。没找到可以把多段路程在地图上拼接起来的软件，等找到了，再把路线图贴一下。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232308166.png" alt="这是啥花？就觉得春天来了，生机勃勃的感觉"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232310878.png" alt="第一天的天气还是不错的，温度也刚刚好"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232311585.png" alt="随便住下休整一下"></p>
<h2 id="轮渡前往崇明，抵达陈家镇"><a href="#轮渡前往崇明，抵达陈家镇" class="headerlink" title="轮渡前往崇明，抵达陈家镇"></a>轮渡前往崇明，抵达陈家镇</h2><p>早上起来直接去石洞口码头去坐轮渡，连人带车收了 20 块，当时还很好奇，我看 b 站 up 住咋是 24 呢？难道是降价了，不可能啊，后来才发现，一般环岛的话都是从崇明南门出发，而我是坐到了新河镇，怪不得说在船上没看到啥骑车的呢。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232318993.png" alt="石洞口码头"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232317030.png" alt="石洞口-新河"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232319907.png" alt="上海果然没有海,全是黄的，可能是入海口的原因吧？"></p>
<p>可以看到今天的天气不太好，今天一直多云，而且温度也就 10 度，骑起车来还是比较冷的。到了新河镇之后开始骑车往陈家镇走，路上看看上海的农村长啥样。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232323731.png" alt="大别野"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232324871.png" alt="崇明这边的地都是在自家房子旁边呀，也不大，是不是说明很久以前这边的人也不以种地为生，主要还是去打渔？"></p>
<p>崇明这边种的菜好像都是圆白菜，要不就是大棚里面种草莓，奇怪，没有看到种上海青的，那我们吃的上海青是从哪来的啊，还是说这个季节不种上海青呢？</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232330936.png" alt="好多白菜"></p>
<p>去陈家镇的路上一开始是走崇明大道，路况很好，之后就是一段下面的林荫小道，我来的太早了，树叶还没有完全张开，再晚几个月应该会更好看。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232332479.png" alt="林荫小道"></p>
<p>之后的路就很难走了，也不能说难走，主要后面就没有非机动车道了，旁边经常有汽车飞驰而过，而且当天还比较冷，就让人骑的很郁闷，一看天气预报，发现明天还是下雨天，就更崩溃了。崇明这边好多下面这种小水沟，每次经过都有一股腥臭味。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303232335646.png" alt="臭水沟"></p>
<p>本来打算今天去东滩湿地公园的，但是一个是时间有点赶，另一个就是今天天气不好，再加上路上感觉崇明这边也没啥意思，最后也就不打算去了，直接在陈家镇住下。规划一下明天的路线，都想早些回家了，骑了一天感觉实在太无聊了。这时候谁又能知道明天更有意思呢？</p>
<h2 id="陈家镇前往南门渡口，遭遇台风天气，轮渡停航"><a href="#陈家镇前往南门渡口，遭遇台风天气，轮渡停航" class="headerlink" title="陈家镇前往南门渡口，遭遇台风天气，轮渡停航"></a>陈家镇前往南门渡口，遭遇台风天气，轮渡停航</h2><p>今天的打算是从陈家镇前往南门渡口，然后去宝山找高中同学吃饭。可是从早上开始就一直下小雨，下小雨还是小问题，好在一个小时之后雨就停了，关键是还刮风。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242048236.png" alt="陈家镇出发，早上开始下小雨"></p>
<p>今天的路上也是没有非机动车道，而且下雨天比较危险，我就一直在旁边的小路上骑，这些小路就在周围的民宿人家的门口，回去的这一条路上竟然全是民宿。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242100273.png" alt="左边是民宿门口的小路，右边是大马路"></p>
<p>路上还看到了种的盆景，为了不让最下面的叶子乱长，人们专门在上面放了几个砖头，好惨，不能肆意的生长。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242104885.png" alt="为了满足人们的审美，而不能肆意生长的绿植"></p>
<p>哈哈哈这次骑车的路上又遇到了小狗跟着我，上次去青海湖也是被一只小狗跟了好久。</p>
<iframe src='//player.bilibili.com/player.html?bvid=BV13L411R78i&cid=1070167988&page=1&share_source=copy_web&autoplay=0' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true'></iframe>

<p>我骑车的时候感觉风挺大的，但也不是特别大的那种，没想到中午吃饭查下午的轮渡时间表的时候，才发现轮渡因为刮风的原因停航了，看来被迫又需要在崇明住一晚上了。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242112535.png" alt="中午吃的地锅鸡，一般般，有热水喝非常好，快要冻死了"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242116884.png" alt="停航了，非常伤心"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242118855.png"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242119451.png" alt="找个地方给车子拍个照"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242124556.png"></p>
<p>晚上饿了下去找吃的，走到一家超市门口，结果刚好超市闭店了，后面跟着进来一个男孩子发现闭店了之后，笑着说了一句“可恶”，就蹦蹦跳跳的转身走了，然后又突然放慢了脚步等我，非常热情的和我聊天，跟说说要不要和他一起去另一个超市啥的，我觉得有点远，就和他在旁边的一个摊位买手抓饼吃。等着的时候他还问我崇明有什么好玩的，什么过几天有个女孩子来找他，他不知道去玩什么。他自己也是刚来崇明没几天在这里找了个工作，昨天老板说要和他签 3 年的劳动合同，他觉得时间太长了啥的。总之，交流下来他应该就是一个刚毕业来工作的，不过身上还是充满了学生时代的朝气，只希望他可以工作顺利，把这份朝气保持的久一点。</p>
<h2 id="赶紧赶回家，太无聊了"><a href="#赶紧赶回家，太无聊了" class="headerlink" title="赶紧赶回家，太无聊了"></a>赶紧赶回家，太无聊了</h2><p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242126029.png" alt="南门-石洞口"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242131008.png"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202303242131723.png" alt="回家的路上全是这种大车"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>梅子黄时雨</title>
    <url>/2023/04/02/2023-04-02-%E6%A2%85%E5%AD%90%E9%BB%84%E6%97%B6%E9%9B%A8/</url>
    <content><![CDATA[<p>今天天气很好，上周因为一些上线流程的事情搞得神经很紧张，虽然并不是什么大事，而且干的活也不多，但是想到第一次要和大老板开会就很紧张，开下来还不错，而且老板人也很好。所以今天周日就有些无聊，而且突然刷到李健的一首歌，直接把思绪勾回了多年前晚上看《我是歌手》的夜晚。</p>
<span id="more"></span>

<h2 id="“闲愁”"><a href="#“闲愁”" class="headerlink" title="“闲愁”"></a>“闲愁”</h2><blockquote>
<p>试问闲愁都几许？一川烟草，满城风絮，梅子黄时雨。</p>
<p align="right">---贺铸《青玉案·凌波不过横塘路》</p>
</blockquote>
<p>之前我一直找不到一个确切的词用来形容，经常用矫情，或者无病呻吟，可是这两个词又是属于贬义词，自嘲的时候用来说还可以。今天突然想到了上面贺铸的著名的词，“闲愁”很是合适，然后发现闲愁一词在宋词中出现的概率还挺高。这个词确切倒是确切，可是反而会给人一种文艺装逼范儿。</p>
<p>切回主题，有些场景想起来其实很普通，却不知为何会能在脑海中一直留存下来。每次想到《我是歌手》，脑海里就会浮现出那个夜晚。忘了是暑假还是寒假了，晚上自己一个人在客厅看电视，由于已经比较晚了，所以把灯调的比较暗，声音也调的比较低。那期有李健，谭维维，今天特意查了一下是《我是歌手3》第 12 期。就是这样一个简单的场景，却深深的印在了心中时常浮现，可能是当时那种平静的心态让自己难忘吧？</p>
<h2 id="太原南"><a href="#太原南" class="headerlink" title="太原南"></a>太原南</h2><p>上学的时候，后来回家就都买从太原南中转的票了，只记得是在大四，有一次从太原南站中转，在候车厅刚好遇到一群兵哥哥，不知道是不是到了退伍的时间了，因为大家后来解散后就直接分散开了，各自去哪个火车的都有。其中有一个是和我同车，猜测大概是老乡吧，他有那么几个打包的行李，在他去检票口排队的时候，感觉有些手忙脚乱，又有一些不自然有一些慌张，偶尔会抬头四处看看他的战友。感觉像是有一种不舍，又有一种突然退伍后的迷茫。有一点不知道是不是我记错了，他的脸看上去到没看出当兵的那种坚毅，反而看上去稍显稚嫩。但这么一想，稚嫩好像又和迷茫有些不谋而合了。这个场景也是偶尔会在脑海中浮现，但自己也不清楚为何会将此记得这么久。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>晚安程艾影</title>
    <url>/2023/04/20/2023-04-20-%E6%99%9A%E5%AE%89%E7%A8%8B%E8%89%BE%E5%BD%B1/</url>
    <content><![CDATA[<p>今天有个前同事要离职了，之前经常一起踢球吃饭，看到他朋友圈分享了一首赵雷的《程艾影》，之前我可能也听过，但没什么印象，今天听的时候有些感触，同时又联想到了之前有个学长毕业时分享的丢火车的《晚安》。</p>
<span id="more"></span>

<h2 id="晚安"><a href="#晚安" class="headerlink" title="晚安"></a>晚安</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=2010501159&auto=0&height=66"></iframe>

<p>这个学长也是研究生在学院踢球认识的，他是研二才从青岛校区回来，虽然一起踢球一共没多少次，但当他毕业的时候，看到朋友圈分享的这首歌，还是有些感慨，又有一群人要各奔东西了，当时我正去澡堂洗澡，路上刷到了这条朋友圈，洗澡的时候边洗澡边放这首歌，无法切身感受学长当时的心境，我只知道当天晚上他正坐着火车前往工作地。自己感觉可能有那么一些对学生时代的一种不舍和留恋，但又确实到了告别的时候。同时马上去新城市工作，又有些许期待，但是他去的那个城市没什么朋友同学，离家也不近，可能又充满了未知与迷茫吧。可能还有一种对自己和对同学朋友的祝福在里面。</p>
<h2 id="程艾影"><a href="#程艾影" class="headerlink" title="程艾影"></a>程艾影</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1974443815&auto=0&height=66"></iframe>

<p>听到这首歌的第一句就知道他为什么要分享这首歌了，“伍岚正和程艾影从上海到武汉”。这个同事大学研究生都在武汉读的，女朋友也在武汉，真心为他们祝福。还记得有一次晚上出去玩，当时他正在和女朋友吵架，还和我们开玩笑说什么他女朋友作啊，这次坚决不哄啥的。可是吃完饭看他女朋友还没找他，就忍不住打电话过去哄了。当时我们只觉得打脸了好笑，现在看来倒是体现了他们的感情吧，所以今天得知他要回武汉了，倒没什么惊讶的，反而有点高兴和祝福。不知道该怎么表达此时的想法，以我对他的了解，知道他肯定是要回武汉找女朋友的，只是时间问题罢了。什么时候回呢，就说明什么时候想安定下来，多些时间去陪伴了。也是对自己一个阶段的告别吧。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>以后不许王太太坐这个车子</title>
    <url>/2023/05/01/2023-05-01-%E4%BB%A5%E5%90%8E%E4%B8%8D%E8%AE%B8%E7%8E%8B%E5%A4%AA%E5%A4%AA%E5%9D%90%E8%BF%99%E4%B8%AA%E8%BD%A6%E5%AD%90/</url>
    <content><![CDATA[<p>今天看《圆桌派》，听到周轶君提到一个观点，“孩子是大人的祖先”，仔细想想从某些方面来讲，我们确实有很多需要向孩子学习的地方。</p>
<span id="more"></span>

<h2 id="孩子是大人的祖先"><a href="#孩子是大人的祖先" class="headerlink" title="孩子是大人的祖先"></a>孩子是大人的祖先</h2><p>这句话的出处是，上世纪意大利的著名儿童教育家玛利亚-蒙台梭利的《幼儿教育方法》。我觉得及早认识到这一点是很重要的，倒不是说对于幼儿教育有什么用，毕竟我现在还从未考虑过之后孩子的教育问题，而且为时尚早。主要是对于自己现在有一些启发，一是这样我们会更有意识的注意到孩子身上所具备的，而大人所丧失的优点，可以引起我们的思考，而不是像从前一样把孩子的行为想象的很简单或者直接忽略。二是当孩子渐渐长大后，由于受到各种因素和周围环境的影响，他的行为习惯也会逐渐发生改变，小时候的一些我们也许能学习到的“点”也会慢慢消失（当然也一定会有新的优点出现）。</p>
<p>为什么想说这个话题呢，因为我发现大部分中国人，包括我自己在内，在表达“爱”时，会显得拘谨和笨拙，甚至会有一种羞耻感。这里需要说明一下，我这里所说的爱，是指那种已经有了感情基础的爱，比如亲人之间，或者是夫妻，恋人之间。</p>
<p>以我自己而言，向家人表达爱或者想念，我是说不出口的，从小就没有这种习惯，虽然自己知道说出来并没有什么不好，甚至还会让家人父母觉得高兴欣慰，但总是有一种力量在阻止你表达出来。这一点我从我表弟身上就学习到了很多，在我表弟还小的时候，有时候和我妈打电话就会问到比如“哥哥什么时候回来呀”，“我都想他了”这些话，这些话在我当时听来一是觉得高兴，再一个就是觉得小孩子天真可爱。但是今天想想会觉得应该向他学习，爱就要表达出来，而不是只让它存在于细腻含蓄的情感中。不过现在随着表弟的长大，他也很少说这些“肉麻”的话了，可能在儒家文化的影响下，中国人随着长大就会慢慢的变得含蓄，而小时候那种更为直接的，来自祖先动物基因的表达感就会消失吧。</p>
<h2 id="以后不准王太太坐这个车子"><a href="#以后不准王太太坐这个车子" class="headerlink" title="以后不准王太太坐这个车子"></a>以后不准王太太坐这个车子</h2><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/DEjpFV9AsS0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>一直很喜欢《相爱相亲》这个电影，尤其是最后一个片段，这个电影没有什么跌宕起伏，就是简单的表现家庭中遇到的各种事情，但是片子看下来让人觉得温馨平和。</p>
<p>片子的最后一段的老两口，相亲相爱一辈子，也是那种传统中国家庭，平时默默付出，互相也都知道各自的情感，只是从来不会表达。在经历了一些事情之后，两人在车里或者说在那种氛围之下，各自把之前的想法喷涌而出，让人看的感动。把自己代入到人物中去，也会感觉到一种突如而来的幸福感和如释重负的轻松感。</p>
<p>但是我更希望在平时生活中，让这种表达成为习惯，让这种感情细水长流，共勉。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>逐渐丧失了发呆的能力</title>
    <url>/2023/07/20/2023-07-20-%E9%80%90%E6%B8%90%E4%B8%A7%E5%A4%B1%E4%BA%86%E5%8F%91%E5%91%86%E7%9A%84%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<p>今天洗澡时，用手机在旁边放着歌，一首歌放完后跳到了《斑马，斑马》，说实话我很少听宋冬野的歌，而且对与这首歌也没什么感觉，但是还是勾起了我那遥远的回忆。</p>
<span id="more"></span>

<h2 id="你多久没发呆了？"><a href="#你多久没发呆了？" class="headerlink" title="你多久没发呆了？"></a>你多久没发呆了？</h2><p>听到斑马这首歌的时候，让我回想起来大学的一段时光，应该是大四的时候，当时经常在斗鱼上看户外直播，其中看过一个重庆的一个女主播，关于她的记忆几乎已经全部变得模糊，只有两个画面还能偶尔记起。一个是她在直播间唱斑马，当然我现在也记不起当时的情况，只记得她经常唱斑马，而且唱的一般，这也是为什么我听到斑马这首歌，总能想到她的原因。当然这不是我想表达的重点，重点是另一个画面，她有段时间经常晚上去重庆的小街道和一群滑板少年玩滑板，现在想起来那个画面其实和我们一群人踢球没什么区别，就是一群年轻人用爱好打发时间的一种方式，我也不知道为什么当时我能连着看好几天。</p>
<p>联想到这里发现，好像之前做的很多事情也没有什么意义，但是却可以做一下午甚至一整天，至少在研究生之前，我是经常会发呆的，可能是在胡思乱想，也可能是根本什么也没想。但是好像现在慢慢的丧失了这种能力，我似乎已经多年没有体会过发呆的感觉了，甚至如今都无法回忆起发呆是个什么感觉。所以发呆是一种能力吗？是后天的还是先天的？还是人类基因就自带这种能力？现在不会发呆了是好还是不好呢？不会发呆的原因是因为有了各种压力不像大学那样无忧无虑了，还是因为其他呢？</p>
<h2 id="几个刷到都会停下来的视频和歌曲"><a href="#几个刷到都会停下来的视频和歌曲" class="headerlink" title="几个刷到都会停下来的视频和歌曲"></a>几个刷到都会停下来的视频和歌曲</h2><p>同样是今天，后来我又想起了几个视频和歌，好像每次想到其中一个时，都会把其他的都联想出来，可能确实有一些相似之处吧。</p>
<p>第一个是一个黑人小哥花了 20 年找《恋曲1990》这首歌。</p>
<iframe src="//player.bilibili.com/player.html?aid=54115586&bvid=BV1R4411H7eA&cid=94667204&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>第二个是两个中国人在日本街头唱《海阔天空》。</p>
<iframe src="//player.bilibili.com/player.html?aid=8823273&bvid=BV1Zx411y769&cid=14555448&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>第三个是一个小姐姐在悉尼用二胡演奏 《Yesterday Once More》</p>
<iframe src="//player.bilibili.com/player.html?aid=947512754&bvid=BV1SW4y1G76i&cid=959755352&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>第四个是《500 Miles》</p>
<iframe src="//player.bilibili.com/player.html?aid=330624190&bvid=BV1FA411s7df&cid=262875402&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p>第五个是《北国之春》，不过每次听这首歌总想到弹粉色钢琴的小哥哈哈哈。</p>
<iframe src="//player.bilibili.com/player.html?aid=583908337&bvid=BV1Sz4y1D7Sv&cid=214093833&page=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>如何读 Gradle Dependency</title>
    <url>/2023/11/05/2023-11-05-%E5%A6%82%E4%BD%95%E8%AF%BB%20Gradle%20Dependeny/</url>
    <content><![CDATA[<p>当我们在开发 <code>gradle</code> 构建的项目时，有时候会出现依赖的版本冲突，或者某个依赖有安全性的问题，但是这个依赖包又不是我们直接引进的，我们想要查看是谁将这个依赖引进来的。这时候就需要我们查看 <code>gradle</code> 的依赖树。本文主要讲解一下如何看懂依赖树的信息</p>
<span id="more"></span>

<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>我们在使用 <code>./gradlew dependencies</code> 查看依赖树时，经常会见到下面三个标识，他们具体都是什么意思呢？</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/image-20231106203946032.png"></p>
<p>先来说一句题外话，我的实验基本都是按照参考中的提到的文章来做的，在本地做实验的时候一开始就遇到了下面的错误:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/image-20231106202751688.png"></p>
<p>这个依赖我明明已经在本地 Maven Local Repository 中已经有了，但还是 FAILED，这个错误之前在工作中也遇到过，查到的结果是因为版本依赖有冲突，但是这里也没有提示到底是哪里出现了冲突。查了很久也看不出来啥，然后问了问 ChatGPT，它建议我清一下缓存重新 <code>build</code> 一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./gradlew clean build --refresh-dependencies</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/image-20231106203413122.png"></p>
<p>于是我试了一下，发现我这里的问题是因为本地 JDK 版本和依赖所要求的不一致导致的冲突，于是将本地 JDK 升级到 17 就可以了。(这应该只是一种情况，工作中遇到的问题的原因不一定是这个)</p>
<h2 id="gt-Dependency-Resolution"><a href="#gt-Dependency-Resolution" class="headerlink" title="-&gt; (Dependency Resolution)"></a>-&gt; (Dependency Resolution)</h2><p><code>-&gt;</code> 就是表示有依赖的版本冲突，也就是说对于同一个依赖，在全局来看有多个版本，大多数情况下会选取最高版本，比如下面这个就是从 1.7.36 升级成了 2.0.7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--- org.apache.logging.log4j:log4j-api:2.20.0</span><br><span class="line">\--- org.slf4j:slf4j-api:1.7.36 -&gt; 2.0.7</span><br></pre></td></tr></table></figure>

<h3 id="Base-Demo"><a href="#Base-Demo" class="headerlink" title="Base Demo"></a>Base Demo</h3><p>我现在有一个依赖 <code>module_a</code>，它的定义很简单</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module_a</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop:3.1.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我的应用引入了此依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.0.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时我的应用的依赖树为 (省略了一些不必要的)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\--- org.example:module_a:1.0.0</span><br><span class="line">     +--- org.springframework.boot:spring-boot-starter-web:3.1.1</span><br><span class="line">     |    +--- xxx</span><br><span class="line">     \--- org.springframework.boot:spring-boot-starter-aop:3.1.1</span><br><span class="line">          +--- xxx</span><br></pre></td></tr></table></figure>

<h3 id="Simple-Dependency-Resolution"><a href="#Simple-Dependency-Resolution" class="headerlink" title="Simple Dependency Resolution"></a>Simple Dependency Resolution</h3><ul>
<li><p>module_a</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module_a</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop:3.1.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>module_b</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module_b</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.2&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop:3.1.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_b:1.0.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>dependencies</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--- org.example:module_a:1.0.0</span><br><span class="line">|    +--- org.springframework.boot:spring-boot-starter-web:3.1.1 -&gt; 3.1.2</span><br><span class="line">|    |    +--- xxx</span><br><span class="line">|    \--- org.springframework.boot:spring-boot-starter-aop:3.1.1</span><br><span class="line">|         +--- xxx</span><br><span class="line">\--- org.example:module_b:1.0.0</span><br><span class="line">     +--- org.springframework.boot:spring-boot-starter-web:3.1.2 (*)</span><br><span class="line">     \--- org.springframework.boot:spring-boot-starter-aop:3.1.1 (*)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>可以看到当 <code>module_b</code> 引入了更高版本的 <code>spring-boot-starter-web:3.1.2</code> 时，最终 <code>module_a</code> 会以高版本的为准。</p>
<p>通过上面两个例子很容易就可以理解 <code>-&gt;</code> 的含义，参考文章中还举例了 2 个复杂一点的依赖关系，但其实本质是一样的，这里不再赘述。</p>
<h2 id="Dependency-Omitted"><a href="#Dependency-Omitted" class="headerlink" title="* (Dependency Omitted)"></a>* (Dependency Omitted)</h2><p>这个 <code>*</code> 号也很简单，就是指前面已经展示过的关系树，这里就省略不展示了，不然整个关系树展示下来会非常长。我将上一章节中 Base Demo 中的依赖关系树展示的多一下如下:</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/image-20231106212711931.png"></p>
<p>可以看到 <code>org.springframework:spring-core:6.0.10</code> 只在第一次出现时展示了完整的依赖树，后面再次出现就用 <code>*</code> 代表省略了。</p>
<h2 id="c-Dependency-Constraint"><a href="#c-Dependency-Constraint" class="headerlink" title="c (Dependency Constraint)"></a>c (Dependency Constraint)</h2><p><code>c</code> 这个一开始我也没搞懂，因为对应的英文是 constraint，我一开始以为是指定死一个版本号，不会因为版本冲突被更高级的版本替代，后来工作时发现并不是这样的，也很容易理解，如果存在 2 个版本的依赖，那当我要去使用当中的一个类时，岂不是要分别使用两个版本中的包中的类，显然是不对的。在参考文章中将这个词翻译成了闭包，我感觉也是不对的，因为这个用法既不符合数学中闭包的定义，也不符合计算机语言中闭包的定义。所以我们可以先不用在意如何翻译，而是将重点放在如何使用和理解上。</p>
<h3 id="Base-Demo-1"><a href="#Base-Demo-1" class="headerlink" title="Base Demo"></a>Base Demo</h3><ul>
<li><p>module_a: 1.0.0</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop:3.1.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>module_a: 1.1.0</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.2&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop:3.1.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.0.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>假设此时 <code>spring-boot-starter-web:3.1.1</code> 有一个 bug，需要升级到 3.1.2，我们可以在 service 中使用 <code>module_a:1.1.0</code> 版本，但是如果我们同时不想升级 <code>spring-boot-starter-aop:3.1.1</code> 呢？那一个简单的方法就是写成下面这样:</p>
<ul>
<li><p>service</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>dependency</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--- org.example:module_a:1.0.0</span><br><span class="line">|    +--- org.springframework.boot:spring-boot-starter-web:3.1.1 -&gt; 3.1.2</span><br><span class="line">|    |    +--- xxx</span><br><span class="line">|    \--- org.springframework.boot:spring-boot-starter-aop:3.1.1</span><br><span class="line">|         +--- xxx</span><br><span class="line">\--- org.springframework.boot:spring-boot-starter-web:3.1.2 (*)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这么写的缺点就是，我们的 service 之前是通过 <code>module_a</code> 来间接依赖的 <code>spring-boot-starter-web</code>，但是现在变成直接依赖了。换句话说，我们的服务之前只需要依赖一个 <code>module_a</code> 就足以保证运行了，但是现在还要直接依赖一个 <code>spring-boot-starter-web</code>。目前看下来是没有什么问题，如果我们的 <code>module_a</code> 又做了一次升级呢？</p>
<ul>
<li><p>module_a: 1.2.0</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop:3.1.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.2.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>dependency</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--- org.example:module_a:1.2.0</span><br><span class="line">|    \--- org.springframework.boot:spring-boot-starter-aop:3.1.2</span><br><span class="line">|         +--- xxx</span><br><span class="line">\--- org.springframework.boot:spring-boot-starter-web:3.1.2</span><br><span class="line">     +--- xxx</span><br></pre></td></tr></table></figure></li>
</ul>
<p>虽然运行起来没什么问题，但其实我已经不需要依赖 <code>spring-boot-starter-web</code> 这个了，因为最早的时候我只需要依赖 <code>module_a</code> 就够了，我加入 <code>spring-boot-starter-web</code> 这个直接依赖也只是为了临时解决版本问题。所以这时就引入了多余的依赖。</p>
<h3 id="Dependency-Constraint"><a href="#Dependency-Constraint" class="headerlink" title="Dependency Constraint"></a>Dependency Constraint</h3><p>那我们怎么解决这个问题呢？一个最直接的就是把 <code>service</code> 中不用的直接依赖去掉，这其实在现实中是很麻烦的，因为现实中依赖很多，我们很难去排查到底哪个直接依赖属于上面提到的情况。</p>
<p>所以我们就可以使用 constraints 来解决这个问题:</p>
<ul>
<li><p>service (use module_a:1.0.0)</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.0.0&#x27;</span></span><br><span class="line">    constraints &#123;</span><br><span class="line">        implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>dependency</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--- org.example:module_a:1.0.0</span><br><span class="line">|    +--- org.springframework.boot:spring-boot-starter-web:3.1.1 -&gt; 3.1.2</span><br><span class="line">|    |    +--- xxx</span><br><span class="line">|    \--- org.springframework.boot:spring-boot-starter-aop:3.1.1</span><br><span class="line">|         +--- xxx</span><br><span class="line">\--- org.springframework.boot:spring-boot-starter-web:3.1.2 (c)</span><br></pre></td></tr></table></figure></li>
<li><p>service (use module_a:1.2.0)</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.2.0&#x27;</span></span><br><span class="line">    constraints &#123;</span><br><span class="line">        implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>dependency</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\--- org.example:module_a:1.2.0</span><br><span class="line">     \--- org.springframework.boot:spring-boot-starter-aop:3.1.2</span><br><span class="line">          +--- xxx</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这样看起来就没有 <code>spring-boot-starter-web</code> 直接依赖了。</p>
<h3 id="为什么我之前理解的“指定死一个版本号”不对"><a href="#为什么我之前理解的“指定死一个版本号”不对" class="headerlink" title="为什么我之前理解的“指定死一个版本号”不对"></a>为什么我之前理解的“指定死一个版本号”不对</h3><p>这时我们又升级了版本</p>
<ul>
<li><p>module_a: 1.3.0</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.3&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop:3.1.3&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.3.0&#x27;</span></span><br><span class="line">    constraints &#123;</span><br><span class="line">        implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>dependency</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--- org.example:module_a:1.3.0</span><br><span class="line">|    +--- org.springframework.boot:spring-boot-starter-web:3.1.3</span><br><span class="line">|    |    +--- xxx</span><br><span class="line">|    \--- org.springframework.boot:spring-boot-starter-aop:3.1.3</span><br><span class="line">|         +--- xxx</span><br><span class="line">\--- org.springframework.boot:spring-boot-starter-web:3.1.2 -&gt; 3.1.3 (c)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>发现 <code>spring-boot-starter-web</code> 还是使用了最高的 3.1.3 版本。</p>
<h2 id="strictly-Downgrading-Versions"><a href="#strictly-Downgrading-Versions" class="headerlink" title="strictly (Downgrading Versions)"></a>strictly (Downgrading Versions)</h2><p>除了取高版本的升级策略外，还有一种降级策略，使用 <code>strictly</code> 关键字:</p>
<ul>
<li><p>module_a: 1.1.0</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web:3.1.2&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-aop:3.1.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.example:module_a:1.1.0&#x27;</span></span><br><span class="line">    implementation(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span>) &#123;</span><br><span class="line">        version &#123;</span><br><span class="line">            strictly <span class="string">&#x27;3.1.1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>dependency</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--- org.example:module_a:1.1.0</span><br><span class="line">|    +--- org.springframework.boot:spring-boot-starter-web:3.1.2 -&gt; 3.1.1</span><br><span class="line">|    |    +--- xxx</span><br><span class="line">|    \--- org.springframework.boot:spring-boot-starter-aop:3.1.2</span><br><span class="line">|         +--- xxx</span><br><span class="line">\--- org.springframework.boot:spring-boot-starter-web:&#123;strictly 3.1.1&#125; -&gt; 3.1.1 (*)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/591478424">https://zhuanlan.zhihu.com/p/591478424</a></p>
<p><a href="https://github.com/xls56iii/gradleTraining">Code</a></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>手开平方根</title>
    <url>/2023/11/05/2023-11-05-%E6%89%8B%E5%BC%80%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
    <content><![CDATA[<p>这篇文章主要介绍 2 个比较简单的手开平方根的方法，实际上本质还是一种。</p>
<span id="more"></span>

<p>我们在数学公式中经常会遇到计算一个数的平方根，虽然大部分情况下我们就直接用根号就可以，不需要具体计算出来，那如果在没有计算器的情况下，又该如何手动计算呢？</p>
<h2 id="x-a-2-b-Continued-Fraction-连分数"><a href="#x-a-2-b-Continued-Fraction-连分数" class="headerlink" title="$x = a^2 + b$ (Continued Fraction, 连分数)"></a>$x = a^2 + b$ (Continued Fraction, 连分数)</h2><p>当我们需要计算 $\sqrt{x}$ 时，只需要让 a 尽可能的大，然后再慢慢逼近 b，根据上面的公式推导如下:<br>$$<br>x = a^2 + b \<br>x - a^2 = b \<br>(\sqrt{x}+a)(\sqrt{x}-a) = b \<br>\sqrt{x}-a = \frac{b}{a+\sqrt{x}} \<br>\sqrt{x} = a+\frac{b}{a+\sqrt{x}} \<br>=a+\frac{b}{a+a+\frac{b}{a+\sqrt{x}}} \<br>=a+\frac{b}{2a+\frac{b}{a+\sqrt{x}}} \<br>=a+\frac{b}{2a+\frac{b}{2a+ \frac{b}{2a+…}}}<br>$$<br> 所以如果要计算 $\sqrt{7}$ 的话，利用上面的公式, $\sqrt{7}$ = $2^2+3$<br>$$<br>\sqrt{7} \approx 2+\frac{3}{4+\frac{3}{4+ \frac{3}{4+\frac{3}{4+…}}}}= 2.645<br>$$<br>这样计算的话其实是有一个问题的，像上面的式子，我计算了 4 层然后四舍五入得到 2.645，而实际的 $\sqrt{7}\approx2.64575=2.646$，也就是说我们计算出来的最后一位其实是不准确的，所以说如果要求精确到 3 位小数，我们使用这种方法，很难第一时间就知道要计算几层才可以，只能多试几层，直到第三位小数保持不变。</p>
<h2 id="x-a-b-2-直式开方法，长除式算法"><a href="#x-a-b-2-直式开方法，长除式算法" class="headerlink" title="$x = (a + b)^2$ (直式开方法，长除式算法)"></a>$x = (a + b)^2$ (直式开方法，长除式算法)</h2><p>这里直接给出一个视频和维基百科的计算方法</p>
<p><a href="https://zh.wikipedia.org/zh-cn/%E5%B9%B3%E6%96%B9%E6%A0%B9#%E9%95%B7%E9%99%A4%E5%BC%8F%E7%AE%97%E6%B3%95">长除式算法</a></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/t6IGKzHVIGw?si=8-VFL5VkB-UvbTnj" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>这种方法可以直接精确到第 $n$ 位，只不过计算方式要比第一种复杂一点。<br>$$<br>x = (a+b)^2=a^2+b^2+2ab=a^2+(2a+b)b<br>$$<br>也是先找到最大的一个 $a$ 然后再慢慢逼近，假设第一个是 $a_1$, 那么有:<br>$$<br>x-a_1^2=(2a_1+b)b<br>$$<br>然后在 $a_1$ 确定的情况下，就可以找一个最大的 $b_1$, 使得<br>$$<br>x-a_1^2&gt;(2a_1+b_1)b_1<br>$$<br>然后令 $a_2=a_1+b_1$, 因为 $x &gt; (a_1+b_1)^2$， 所以 $x = (a_2+b)^2$<br>$$<br>x-a_2^2=(2a_2+b)b \<br>x-(a_1+b_1)^2=(2a_2+b)b\<br>x-a_1^2-(2a_1+b_1)b_1=(2a_2+b)b<br>$$<br>以此类推接着算下一个 $b$ 即可.</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>坨坨</title>
    <url>/2024/01/21/2024-01-21-%E5%9D%A8%E5%9D%A8/</url>
    <content><![CDATA[<p>总会有些事情直击心灵却又无能为力。我能做的只有保持感悟，不停思考。</p>
<span id="more"></span>

<h2 id="少年自有少年狂"><a href="#少年自有少年狂" class="headerlink" title="少年自有少年狂"></a>少年自有少年狂</h2><p>今天想写这篇博客的原因很简单，源自于之前看的一个短视频。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/TPXbnepBZ80?si=Jp8a3ab9DyLGUmK-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>起初看到这个短视频的时候觉得非常有意思，唱歌的小朋友以一种自己的方式去安慰他的好朋友，在我们大人眼中可能觉得有些可爱，“幼稚”甚至“无厘头”，总之会让人至少让我有一种莫名的笑点。随后几天便有很多博主以“蹭热度”的方式去模仿当中的片段以博取流量(当然我本身并不认为这有什么不对，因为并没有给任何人带来什么困扰)。然后我又想到了《小王子》开篇写的话，“所有大人最初都是孩子(但这很少有人记得)”。确实啊，当我们第一次看到这个视频，下意识的噗嗤一笑的时候，其实是否想过我们当初童年的时候可能也是这样的呢？只是随着我们的长大，习惯了成年人的相处模式，说的更残酷一些，习惯了非亲密关系之间成年人的相处模式，渐渐的忘记了曾经那些属于我们自己的最真挚甚至有些幼稚的表达方式呢。</p>
<p>看到这个视频如果我们第一时间还能笑得出来，或许我们也该庆幸吧！至少可以说明你当下是没有被什么大事情所困扰的，而且你的童年也一定是充满友情与快乐的。不然我很难想象出来一个没有童年的人，这个视频会对他有任何的情感触动。</p>
<p>哈哈，当然这其实不是我想要表达的重点了。昨天看到了这个小男孩的另一个视频，才让我有了想法写下这篇博客。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/s3_DhSs9sZo?si=nzWAjIPC0W-ewQ5_" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<p>原来我们看似平常的一首歌，实际在小男孩心中，更像是平时用来激励和安慰自己的一种方式。他想念外出打工的父母时，会有这首歌来鼓励自己，来疏解自己的情绪，那反过来当他唱这首歌时，是否又会想起打工的父母或者其他自己需要鼓励和支持的时刻呢？我认为是会的吧？基于这个前提，所以我觉得这个小男孩内心是善良的，有点像是安慰别人的同时，要把自己内心柔弱的部分暴露出来，虽不至于说是放在太阳下“暴晒”，可是让其暴露在阳光底下，甚至只是一点点光亮，也是需要极大的勇气或者拥有极致的浪漫来支撑的吧。最重要的这个视频勾起了我对留守儿童的思考，这也是这篇博客的写作初衷，当然也仅仅是初衷了，思维总是发散的，语言总是啰嗦的，我想表达的是，虽然初衷是为了写留守儿童，但是所表达的其他想法也是同样重要的。</p>
<h2 id="红领巾"><a href="#红领巾" class="headerlink" title="红领巾"></a>红领巾</h2><p>既然已经啰嗦到了这里，那就让我再插一个话题，最后再来说留守儿童的事情吧。</p>
<img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/image-20240121235750363.png" style="zoom:50%" />

<p>看到这个图片，我的第一眼就被吸引在了红领巾上，我向来是对政治不感兴趣的，此刻我才发现红领巾对于我的意义或者说在我心中的概念发生了改变，特地查了一下少先队的全称是“少年先锋队”，而红领巾在我心中的概念则从“少先队”变成了“少先”。没错，就是少年先锋，丝毫不带有一点政治倾向，这么说可能显得我思想觉悟不高。但“少先”这个词让我觉得更纯真，少年先锋当是做时代的先锋，未来的先锋，这便是青春该有的样子！</p>
<h2 id="坨坨"><a href="#坨坨" class="headerlink" title="坨坨"></a>坨坨</h2><p>有一部以留守儿童为题材的电影《遥望南方的童年》，里面的小主人公的名字就叫坨坨。里面有一段对话:</p>
<p>“佰佰，我爸爸去哪里了呀？”</p>
<p>“去打工去了”</p>
<p>“去哪里打工去了啊”</p>
<p>“去深圳打工去了”</p>
<p>“深圳在哪里呀”</p>
<p>“深圳在南方啊”</p>
<p>“南方在哪里啊”</p>
<p>“南方啊，南方在…”</p>
<p>对于没有地理概念的小孩子来说，他们并不懂什么是南方，哪里是深圳，可能对于他们，南方和深圳就更会像是父母的另一个代号一样吧。</p>
<p>我曾经跟“长官”聊过留守儿童的问题，当然，可能从我俩的角度来说会很片面，但一定也是真实存在的一种情况。我曾经问过他你们那边镇上的留守儿童怎么样，他说有一部份挺乖的，会好好学习，但是大部分都是父母不在身边没人管，每天抱着手机玩游戏，混到毕业就出去打工。其实听来挺让人唏嘘，我们不以恶意去揣测别人的人生，单纯做一个假设，如果说电影中的坨坨或者是一开始唱歌的少年，后来变成了长官口中的不学无术，浪费光阴的少年，又让人心中会有多少的五味杂陈呢？</p>
<p>他们做错了什么吗？你可以说他们自我控制力不够强，没能管住自己，但是如果是换一个环境呢？其实很难说，人在大环境面前是会被推着走的，即使你感受不到，这也是我想说的无能为力的第一点，是他们自己的无能为力。第二点则是我的无能为力，我看到这些人的经历，我也会觉得可惜甚至觉得不公平，可是扪心自问，真要是让你和他们互换，甚至更简单的，让你放弃自己的工作生活，去他们那里支教，甚至只需一年时间，你愿意吗？我不得不诚恳的说，目前的状态我是不会愿意的，这也是我对此的无能为力，因为我只能徒自感伤，而不能真正的做些什么，甚至会自私的认为这不是我该尽的责任（这种心态也让我从来不会对此有任何负面或者责怪自己的情绪）。</p>
<p>我不会做一个简单的旁观者，虽然我并不奢望自己能做什么。就像我出去玩，会逛各种地方，走街串巷，去乡下村庄，去景点观光，我所希望的是了解我所在的地方，而且是多方面了解，不只是了解它的光鲜，也要了解它的“不堪”，然后试着去接受它，理解它，有能力的话为改变它出一份绵薄之力。就如同歌词唱的一样“我要永远这样陪伴着你，因为我最知道你的痛苦”。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>Circle CI 初体验</title>
    <url>/2022/01/28/CICD%EF%BC%88%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%EF%BC%89/</url>
    <content><![CDATA[<p>CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。CI/CD 的核心概念是持续集成、持续交付和持续部署。Circle CI 是其中一种常用的 CI/CD 工具。</p>
<span id="more"></span>

<h2 id="CI-CD（持续集成与持续部署）"><a href="#CI-CD（持续集成与持续部署）" class="headerlink" title="CI/CD（持续集成与持续部署）"></a>CI/CD（持续集成与持续部署）</h2><ul>
<li>持续集成 (Continuous Integration)</li>
<li>持续部署 (Continuous Deployment)</li>
</ul>
<p><code>持续集成</code> 是指开发人员提交了新代码之后，立刻进行构建，单元测试，并根据测试结果反馈，决定新代码和原有代码能否正确的集成在一起。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131814555.png" alt="Continuous Integration"></p>
<p>在持续集成和持续部署之间还有一个 <code>持续交付(Continuous Delivery)</code> , <code>持续交付</code> 是在持续集成的基础上，将集成后的代码部署到 <code>Staging</code> 环境（预发布环境，可以理解为发布环境的一个镜像）下，进行测试，如果代码没有问题，继续 <code>手动部署</code> 到生产环境当中。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131814687.png" alt="Continuous Delivery"></p>
<p><code>持续部署</code> 则是指在持续交付的基础上，把部署到生产环境的过程自动化。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131814641.png" alt="Continuous Deployment"></p>
<h2 id="自动化流程的意义"><a href="#自动化流程的意义" class="headerlink" title="自动化流程的意义"></a>自动化流程的意义</h2><p>1、自动化流程可以减少人为失误，提高软件质量。（比如运维人员部署时丢失文件；生产和测试环境不一致（异构），导致出错）</p>
<p>2、效率迭代，便捷部署</p>
<p>3、快速交付，便于管理</p>
<h2 id="CI-CD-工具"><a href="#CI-CD-工具" class="headerlink" title="CI/CD 工具"></a>CI/CD 工具</h2><table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">Jenkins</th>
<th align="center">Travis CI</th>
<th align="center">Circle CI</th>
</tr>
</thead>
<tbody><tr>
<td align="center">本地部署</td>
<td align="center">支持</td>
<td align="center">云平台</td>
<td align="center">云平台</td>
</tr>
<tr>
<td align="center">配置</td>
<td align="center">高度可配置</td>
<td align="center">YAML文件</td>
<td align="center">YAML文件</td>
</tr>
<tr>
<td align="center">跨平台</td>
<td align="center">是</td>
<td align="center">Linux + Mac</td>
<td align="center">Linux + Mac</td>
</tr>
<tr>
<td align="center">多服务器</td>
<td align="center">是</td>
<td align="center">否</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">费用</td>
<td align="center">免费</td>
<td align="center">收费</td>
<td align="center">收费</td>
</tr>
</tbody></table>
<p>Jenkins 多服务是指，版本控制需要一台服务器，Jenkins 也需要一台，放在一起也可以，只不过对机器性能要求比较高，还有如果有大量的构建服务，并且需要并行进行，这个时候需要一个 Jenkins 主服务器连接多个伺服机并行进行，Travis CI 和 Circle CI 是基于容器的，所以不需要多服务器。</p>
<h2 id="Circle-CI-使用示例"><a href="#Circle-CI-使用示例" class="headerlink" title="Circle CI 使用示例"></a>Circle CI 使用示例</h2><p>在 <code>Circle CI</code> <a href="https://circleci.com/docs/">官方文档链接地址</a>中可以找到，使用 <code>Circle CI</code> 需要如下4个步骤：</p>
<ul>
<li>Creating a repository</li>
<li>Setting up CircleCI</li>
<li>Digging into your first pipeline</li>
<li>Collaborating with teammates</li>
</ul>
<p>1、创建一个仓库，以 Github 为例，创建一个名为 <code>circle-demo</code> 的共有仓库</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131815190.png" alt="建立公有仓库"></p>
<p>2、然后按照下图中的步骤 <code>Setting up CircleCI</code></p>
<ul>
<li><p><code>CircleCI</code> 在控制面板中选中刚才的项目，点击 <code>Set Up Project</code></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131815846.png" alt="Set Up Project"></p>
</li>
<li><p>然后使用官网默认的 <code>config.yml</code> 模版</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131815507.png" alt="Add configgration file"></p>
</li>
<li><p>然后模版选择简单的 <code>Hello World</code> 模版，点击右边的 <code>Commit and Run</code> 按钮，之后 <code>CircleCI</code> 会默认在一个新分支 <code>circleci-project-setup</code> 分支下创建名为 <code>.circleci/config.yml</code> 的配置文件，并且可以看到流水自动执行了。</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131815387.png" alt="Commit and Run"></p>
</li>
</ul>
<p>3、我们更改一下 <code>config.yml</code> 文件中的内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">circleci/node:10</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure>

<p>将代码 <code>push</code> 上去之后， <code>CircleCI</code> 会重新自动构建</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131815919.png" alt="Rebuild"></p>
<h2 id="CircleCI-构建-Vue-项目，并发布到-Github-Pages-上"><a href="#CircleCI-构建-Vue-项目，并发布到-Github-Pages-上" class="headerlink" title="CircleCI 构建 Vue 项目，并发布到 Github Pages 上"></a>CircleCI 构建 Vue 项目，并发布到 Github Pages 上</h2><h3 id="配置-SSH-密钥和-yarn-命令"><a href="#配置-SSH-密钥和-yarn-命令" class="headerlink" title="配置 SSH 密钥和 yarn 命令"></a>配置 SSH 密钥和 yarn 命令</h3><p>为了节约步骤，我们使用 <code>Vue</code> 脚手架新建项目<code>circle-demo-vue</code>,然后将该项目中的文件移动到我们的 <code>circle-demo</code> 项目中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create circle-demo-vue</span><br></pre></td></tr></table></figure>

<p>之后改写我们的配置文件 <code>config.yml</code> ，首先当我们将代码推送到 Github 时，<code>CircleCI</code> 需要拉取相应分支，所以需要在配置文件中加入拉取分支的配置，以及 <code>checkout</code> 用来拉取代码，同时官网文章中对 <code>checkout</code> 提到需要使用 <code>ssh</code> 证书来拉取远程代码。</p>
<blockquote>
<p>If you require doing git over HTTPS you should not use this step as it configures git to checkout over ssh</p>
</blockquote>
<p>所以还需要添加 <code>ssh</code> 密钥，并且配置 <code>fingerprints</code> ,如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131816684.png" alt="config.yml"></p>
<p>之后我们在控制面板添加 <code>fingerprints</code> ，操作步骤如下：</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131816609.png" alt="config.yml"></p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131816455.png" alt="config.yml"></p>
<p>之后就可以得到所需要的 <code>User Key</code> ， <code>Deploy Key</code> 是有读取权限，并且只对特定仓库有权限，而 <code>User Key</code> 时对自己账户下的所有仓库都有读写权限。</p>
<p>配置好 <code>fingerprints</code> 之后，将代码提交，就会发现 <code>CircleCI</code>. 重新构建了。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">circleci/node:10</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">circleci-project-setup</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">add_ssh_keys:</span></span><br><span class="line">          <span class="attr">fingerprints:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;cf:88:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">build</span></span><br></pre></td></tr></table></figure>

<h3 id="优化-yarn-install"><a href="#优化-yarn-install" class="headerlink" title="优化 yarn install"></a>优化 yarn install</h3><p>每次推送代码，自动构建都会执行 <code>yarn install</code> 耗费大量时间，我们可以在配置文件中加入 <code>save_cache</code> 将 <code>node_modules</code> 缓存起来，并在每次构建时使用 <code>restore_cache</code> 读取缓存</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">circleci/node:10</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">circleci-project-setup</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">add_ssh_keys:</span></span><br><span class="line">          <span class="attr">fingerprints:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;cf:88:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">restore_cache:</span></span><br><span class="line">          <span class="attr">keys:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">save_cache:</span></span><br><span class="line">          <span class="attr">path:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">build</span></span><br></pre></td></tr></table></figure>

<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>通过执行 <code>shell</code> 脚本来部署我们的项目，在 <code>config.yml</code> 配置文件中添加配置项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">circleci/node:10</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">circleci-project-setup</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">add_ssh_keys:</span></span><br><span class="line">          <span class="attr">fingerprints:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;cf:88:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">restore_cache:</span></span><br><span class="line">          <span class="attr">keys:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">dependencies_demo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">save_cache:</span></span><br><span class="line">          <span class="attr">paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">dependencies_demo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">shell</span> <span class="string">commands</span></span><br><span class="line">          <span class="comment"># shell chmod +x 赋予执行权限</span></span><br><span class="line">          <span class="comment"># 执行shell脚本</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">scripts/deploy.sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Github</span> <span class="string">pages</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">./scripts/deploy.sh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对应的部署 <code>shell</code> 脚本如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> abort the script <span class="keyword">if</span> there is a non-zero error</span></span><br><span class="line">set -e</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印当前的工作路径</span></span><br><span class="line">pwd</span><br><span class="line">remote=$(git config remote.origin.url)</span><br><span class="line"></span><br><span class="line">echo &#x27;remote is: &#x27;$remote</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个发布的目录</span></span><br><span class="line">mkdir gh-pages-branch</span><br><span class="line">cd gh-pages-branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建的一个新的仓库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置发布的用户名与邮箱</span></span><br><span class="line">git config --global user.email &quot;$GH_EMAIL&quot;</span><br><span class="line">git config --global user.name &quot;$GH_NAME&quot;</span><br><span class="line">git init</span><br><span class="line">git remote add --fetch origin &quot;$remote&quot;</span><br><span class="line"></span><br><span class="line">echo &#x27;email is: &#x27;$GH_EMAIL</span><br><span class="line">echo &#x27;name is: &#x27;$GH_NAME</span><br><span class="line">echo &#x27;sitesource is: &#x27;$siteSource</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换gh-pages分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt;/dev/null 2&gt;&amp;1 用来避免shell命令或者程序等运行中有内容输出</span></span><br><span class="line">if git rev-parse --verify origin/gh-pages &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">  git checkout gh-pages</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 删除掉旧的文件内容</span></span><br><span class="line">  git rm -rf .</span><br><span class="line">else</span><br><span class="line">  git checkout --orphan gh-pages</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把构建好的文件目录给拷贝进来</span></span><br><span class="line">cp -a &quot;../$&#123;siteSource&#125;/.&quot; .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把所有的文件添加到git</span></span><br><span class="line">git add -A</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一条提交内容</span></span><br><span class="line">git commit --allow-empty -m &quot;Deploy to GitHub pages [ci skip]&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送文件</span></span><br><span class="line">git push --force --quiet origin gh-pages</span><br><span class="line"><span class="meta">#</span><span class="bash"> 资源回收，删除临时分支与目录</span></span><br><span class="line">cd ..</span><br><span class="line">rm -rf gh-pages-branch</span><br><span class="line"></span><br><span class="line">echo &quot;Finished Deployment!&quot;</span><br></pre></td></tr></table></figure>

<p>在上面的脚本中，涉及到了 3 个系统变量 <code>$GH_EMAIL</code>,  <code>$GH_NAME</code>, 和 <code>$siteSource</code>, 这三个系统变量在 <code>CircleCI</code> 控制面板中进行设置，并且 <code>$siteSource</code> 设置为 <code>dist</code> ，因为 <code>Vue</code> 会将 <code>yarn build</code> 打包好的文件放在 <code>dist</code> 目录中。</p>
<p>  <img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131816685.png" alt="Environment Variables"></p>
<p>最后由于我们的项目部署在 <code>https://xls56iii.github.io/circle-demo/</code> ,根据 <code>Vue Cli</code> 官网配置参考指南：</p>
<blockquote>
<p>默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上，例如 <code>https://www.my-app.com/</code>。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 <code>publicPath</code> 为 <code>/my-app/</code>。</p>
</blockquote>
<p>我们还需要在项目中添加 <code>vue.config.js</code> 文件，并添加 <code>publicPath</code> 配置项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/circle-demo&#x27;</span> : <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p>
<p>[2] <a href="https://circleci.com/docs/2.0/getting-started/#setting-up-circleci">Your First Green Build</a></p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>自动化部署</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentModificationException</title>
    <url>/2021/12/12/ConcurrentModificationException/</url>
    <content><![CDATA[<p>阿里开发手册中有一条，不要在 <code>foreach</code> 循环里进行元素的 <code>remove\add</code> 操作， <code>remove</code> 元素请使用 <code>Iterator</code> 方式，如果并发操作，需要对 <code>Iterator</code> 对象加锁。</p>
<span id="more"></span>


<h2 id="for-each"><a href="#for-each" class="headerlink" title="for-each"></a>for-each</h2><p>首先 <code>foreach</code> 是一种语法糖，也就是使用 <code>foreach</code> 编写的代码在编译时并不会直接转换成字节码，而是先由编译器转成对应的语法，然后再转成字节码。 <code>foreach</code> 语法糖的底层实现方式有 2 种：</p>
<ul>
<li>对于集合类或者实现 <code>Iterator </code>接口的集合，使用迭代器的遍历方式</li>
<li>对于数组集合，使用数组的遍历方法。</li>
</ul>
<p>针对第一种集合类的情况，以下两种代码是等价的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Integer item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Iterator iter = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    Integer item = (Integer) iter.next();</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对第二种数组的情况，以下两种代码是等价的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> item : arr) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> item = arr[i];</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ConcurrentModificationException"><a href="#ConcurrentModificationException" class="headerlink" title="ConcurrentModificationException"></a>ConcurrentModificationException</h2><p>在知道了 <code>foreach</code> 在集合类中实际的实现方式是使用迭代器 <code>Iterator</code> 后，就引出了后面的问题，当使用 <code>foreach</code> 进行集合遍历时，不能进行元素的 <code>remove\add</code> 操作，或者说不能对集合长度进行修改。</p>
<p>比如以下代码:</p>
<p><code>add</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;c&quot;</span>.equals(string)) &#123;</span><br><span class="line">        list.add(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>remove</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;c&quot;</span>.equals(string)) &#123;</span><br><span class="line">        list.remove(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上 2 种代码都会抛出 <code>ConcurrentModificationException</code> 异常，并且异常出错的地方都在 <code>for (String string : list)</code> 这一句，原因是什么呢？</p>
<h2 id="ArrayList-中实现的-Iterator-接口"><a href="#ArrayList-中实现的-Iterator-接口" class="headerlink" title="ArrayList 中实现的 Iterator 接口"></a>ArrayList 中实现的 Iterator 接口</h2><p>首先来看一下 <code>ArrayList</code> 中实现的 <code>Iterator</code> 接口中的方法源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在 <code>next()</code> 函数中，会先执行 <code>checkForComodification</code> 来比较 <code>modCount</code> 和 <code>expectedModCount</code> 两个变量是否相等</p>
<h2 id="ArrayList-中的-remove-操作"><a href="#ArrayList-中的-remove-操作" class="headerlink" title="ArrayList 中的 remove 操作"></a>ArrayList 中的 remove 操作</h2><p>下面在看 <code>ArrayList</code> 的 <code>remove</code> 操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Private remove method that skips bounds checking and does not</span></span><br><span class="line"><span class="comment"> * return the value removed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常原因"><a href="#异常原因" class="headerlink" title="异常原因"></a>异常原因</h2><p>其实每次改变集合长度都会使 <code>modCount++</code> ，所以按照上面的例子，初始化 <code>ArrayList</code> 进行了 3 次 <code>add</code> 操作，所以此时 <code>modCount</code> 的值为 3 ，当使用 <code>foreach</code> 进行遍历时，首先会得到集合的迭代器，此时 <code>int expectedModCount = modCount;</code> 该语句将 <code>expectedModCount</code> 赋值为 3 ，其实 <code>expectedModCount</code> 变量只会赋值为 <code>modCount</code>,其自身不会进行自增操作，所以在进行 <code>remove</code> 操作时，<code>modCount</code> 自增 1 ，但是 <code>expectedModCount</code> 并没有改变，所以在下一次执行 <code>next()</code> 时，就会抛出 <code>ConcurrentModificationException</code> 异常。</p>
<h2 id="Why-next"><a href="#Why-next" class="headerlink" title="Why next()"></a>Why next()</h2><p>还有一点值得分析，就是为什么会执行 <code>next()</code> 函数呢？首先可以理解的是，当需要删除的元素在 <code>ArrayList</code> 中间时，很显然删除元素之后，还需要接着往下遍历，所以需要执行 <code>next()</code> 函数，但是如果要删除的元素是最后一个，删除之后为什么还要执行 <code>next()</code> 呢？很显然，执行 <code>next()</code> 前提是 <code>hasNext()</code> 函数返回为 <code>true</code> ，根据上面的例子，当删除的元素是最后一个，即第 3 个时，当遍历到第 3 个时，此时 <code>cursor = 3</code> ,同时 <code>size = 3</code> ,如果不删除，下一次执行 <code>hasNext()</code> 函数会返回 <code>false</code> ，但是删除元素后会执行 <code>elementData[--size] = null;</code> 此时 <code>size</code> 进行了改变变成了 2 ，所以 <code>hasNext()</code> 还是为 <code>true</code> ,就会接着往下遍历。</p>
<p>于是就有一个有意思的现象，当删除的元素是倒数第2个时，并不会抛出异常，因此删除之后，会有 <code>cursor</code> 的值和 <code>size</code> 的值相同，<code>hasNext() </code>返回 <code>false</code>，直接停止继续遍历，所以尽管不会抛出异常，但是实际上没有遍历到最后一个元素，如果最后一个元素也是需要删除的话，则逻辑会出错，比如下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String string : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;c&quot;</span>.equals(string)) &#123;</span><br><span class="line">        list.remove(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一个 &#x27;c&#x27; 没有被删除</span></span><br><span class="line"><span class="comment">// [a, c]</span></span><br></pre></td></tr></table></figure>

<p>同时 <code>add</code> 都会抛出异常，因为 <code>add</code> 一定会使 <code>hasNext()</code> 返回 <code>true</code></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用迭代器 <code>Iterator</code> 的 <code>remove</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    String element = iterator.next();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;c&quot;</span>.equals(element))&#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ArrayList 实现的 <code>Iterator</code> 接口中 <code>remove</code> 方法对 <code>cursor</code>,  <code>lastRet</code> 和 <code>expectedModCount</code> 都进行了更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    checkForComodification();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ConcurrentModificationException</tag>
        <tag>ArrayList</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/2021/11/23/React/</url>
    <content><![CDATA[<p><strong>React</strong> 是一个用于构建用户界面的 JavaScript 库，本篇文章主要对React的基础知识进行了简要介绍。</p>
<span id="more"></span>

<h2 id="React-用于构建用户界面的-JavaScript-库"><a href="#React-用于构建用户界面的-JavaScript-库" class="headerlink" title="React 用于构建用户界面的 JavaScript 库"></a>React 用于构建用户界面的 JavaScript 库</h2><p>React有如下特点<code>声明式</code>,<code>组件化</code>,<code>一次学习，随处编写</code></p>
<h2 id="脚手架构建-create-react-app-运行-React"><a href="#脚手架构建-create-react-app-运行-React" class="headerlink" title="脚手架构建 create-react-app 运行 React"></a>脚手架构建 create-react-app 运行 React</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line"></span><br><span class="line">cd my-app</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<h2 id="电脑全局安装-Typescript"><a href="#电脑全局安装-Typescript" class="headerlink" title="电脑全局安装 Typescript"></a>电脑全局安装 Typescript</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<h2 id="创建-React-项目-Typescript"><a href="#创建-React-项目-Typescript" class="headerlink" title="创建 React 项目 (Typescript)"></a>创建 React 项目 (Typescript)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --template typescript</span><br></pre></td></tr></table></figure>

<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>JSX 是一种 JavaScript 的语法扩展，也在很多地方称之为 JavaScript XML，因为看起来就是一段 XML 语法；</p>
<p>JSX 是一种语法糖，用来替代 React.createElement()，返回一个 ReactElement 对象，该对象本质上来说就是一个 JavaScript 的 Object 对象；</p>
<p>它用于描述我们的 UI 界面，并且其完成可以和 JavaScript 融合在一起使用；</p>
<p>它不同于 Vue 中的模块语法，你不需要专门学习模块语法中的一些指令（比如 v-for、v-if、v-else、v-bind）</p>
<p>所以可以写出如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> todoList = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>];</span><br><span class="line">        <span class="keyword">const</span> isLogin = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;</span></span><br><span class="line"><span class="xml">                    todoList.map(item =&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    )</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;isLogin ? &#x27;你已经登录&#x27; : &#x27;请登录&#x27;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Welcome</span><br></pre></td></tr></table></figure>

<h2 id="State-与-Props"><a href="#State-与-Props" class="headerlink" title="State 与 Props"></a>State 与 Props</h2><ul>
<li>props 是组件对外的接口，而 state 是组件对内的接口</li>
<li>props 用于组件间数据传递，而 state 用于组件内部的数据传递</li>
</ul>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><ul>
<li><p>state 是私有的，可以认为 state 是组件的“私有属性”</p>
</li>
<li><p>用 setState() 修改 state，不能直接修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">  <span class="attr">params</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>构建函数 constructor 是唯一可以初始化 state 的地方</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">super</span>(props)</span><br><span class="line">  <span class="built_in">this</span>.state = &#123;</span><br><span class="line">    <span class="attr">params</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用 setState 后，state 不会立刻改变，是异步操作</p>
</li>
<li><p>不要依赖当前的 state 计算下一个 state（因为可能会把多次的 state 修改合并成一个）</p>
</li>
</ul>
<h2 id="Props（Properties）"><a href="#Props（Properties）" class="headerlink" title="Props（Properties）"></a>Props（Properties）</h2><ul>
<li>本质上，props 就是传入函数的参数，是传入组件内部的数据。更准确的说，是从父组件传递向子组件的数据（因为 React 的数据是单向流动的）。</li>
<li>所有的 props 都是只读的，不能改变，只能通过销毁、重建来改变数据。</li>
</ul>
<p>组件像一个函数一样，接收特定的输入 <code>props</code>，产出特定的输出 <code>React elements</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameCard</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, number, isHuman, tags &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>电话：&#123;number&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;isHuman ? &#x27;人类&#x27; : &#x27;外星人&#x27;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          	&#123;   tags.map( (tag,index) =&gt; (<span class="tag">&lt;<span class="name">span</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;tag&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>) )   &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件可以写成函数式写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> NameCard = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, number, isHuman, tags &#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>电话：&#123;number&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;isHuman ? &#x27;人类&#x27; : &#x27;外星人&#x27;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;   tags.map( (tag,index) =&gt; (<span class="tag">&lt;<span class="name">span</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;tag&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>) )   &#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="箭头函数处理-this-的问题"><a href="#箭头函数处理-this-的问题" class="headerlink" title="箭头函数处理 this 的问题"></a>箭头函数处理 this 的问题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里 this 指的是 handleClick 函数本身，所以会出错</span></span><br><span class="line"><span class="function"><span class="title">handleClick</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;<span class="attr">isOpen</span>: !<span class="built_in">this</span>.state.isOpen&#125;);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//这里 this 指的是外面的类，使用 ES6 语法的箭头函数解决 this 的问题</span></span><br><span class="line">handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;<span class="attr">isOpen</span>: !<span class="built_in">this</span>.state.isOpen&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">e.target <span class="comment">// target 描述的是事件发生的元素</span></span><br><span class="line">e.currentTarget <span class="comment">// currentTarget 描述的是事件处理绑定的元素</span></span><br></pre></td></tr></table></figure>

<h2 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h2><p><img src="/images/reactlifestyle.png" alt="reactlifestyle"></p>
<ul>
<li><p>Mounting(初始化): 创建虚拟 DOM，渲染 UI</p>
<blockquote>
<p>constructor -&gt; getDerivedStateFromProps -&gt; render():渲染UI -&gt; componentDidMount</p>
</blockquote>
</li>
<li><p>Updating(更新)：更新虚拟 DOM，重新渲染 UI</p>
<blockquote>
<p>getDerivedStateFromProps -&gt; shouldComponentUpdate -&gt; render():渲染UI -&gt; componentDidUpdate</p>
</blockquote>
</li>
<li><p>Unmounting(销毁)：删除虚拟 DOM，移除 UI</p>
<blockquote>
<p>componentWillUnmount</p>
</blockquote>
</li>
</ul>
<h2 id="setState-函数：异步更新，同步执行"><a href="#setState-函数：异步更新，同步执行" class="headerlink" title="setState() 函数：异步更新，同步执行"></a>setState() 函数：异步更新，同步执行</h2><ul>
<li><p>setState() 本身并非异步，但对 state 的处理机制给人一种异步的假象。state 处理一般发生在生命周期变化的时候。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印的 count 和页面显示的不一样</span></span><br><span class="line">&lt;button </span><br><span class="line">  onClick=&#123; </span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;<span class="attr">count</span>: <span class="built_in">this</span>.state.count+<span class="number">1</span>&#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;count: &quot;</span>, <span class="built_in">this</span>.state.count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&gt;</span><br><span class="line">  Click</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印的 count 和页面显示的一样</span></span><br><span class="line"><span class="comment">// setState 有两个参数，第二个参数为回调函数</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">onClick</span>=<span class="string">&#123;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">    () =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">      this.setState( &#123;count: this.state.count+1&#125;, () =&gt;  &#123;console.log(&quot;count: &quot;, this.state.count);&#125; );</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&gt;</span></span><br><span class="line"><span class="xml">  Click</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// count 只 +1</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">onClick</span>=<span class="string">&#123;</span> </span></span></span><br><span class="line"><span class="tag"><span class="xml">    () =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">      this.setState( &#123;count: this.state.count+1&#125;, () =&gt; &#123; console.log(&quot;count: &quot;, this.state.count);&#125; );</span></span><br><span class="line"><span class="xml">      this.setState( &#123;count: this.state.count+1&#125;, () =&gt; &#123; console.log(&quot;count: &quot;, this.state.count);&#125; );</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&gt;</span></span><br><span class="line"><span class="xml">  Click</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>解决方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// count+2</span></span><br><span class="line"><span class="comment">// 可以把 setState 的第一个参数也写成函数形式</span></span><br><span class="line">&lt;button </span><br><span class="line">  onClick=&#123; </span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState( <span class="function">(<span class="params">preState, preProps</span>) =&gt;</span> &#123; <span class="keyword">return</span> &#123;<span class="attr">count</span>: preState.count + <span class="number">1</span>&#125; &#125;, <span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&quot;count: &quot;</span>, <span class="built_in">this</span>.state.count);&#125; );</span><br><span class="line">      <span class="built_in">this</span>.setState( <span class="function">(<span class="params">preState, preProps</span>) =&gt;</span> &#123; <span class="keyword">return</span> &#123;<span class="attr">count</span>: preState.count + <span class="number">1</span>&#125; &#125;, <span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&quot;count: &quot;</span>, <span class="built_in">this</span>.state.count);&#125; );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&gt;</span><br><span class="line">  Click</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="受控组件和非受控组件"><a href="#受控组件和非受控组件" class="headerlink" title="受控组件和非受控组件"></a>受控组件和非受控组件</h2><p>在 HTML 的表单元素中，它们通常自己维护一套 <code>state</code>，并随着用户的输入自己进行 <code>UI</code> 上的更新，这种行为是不被我们程序所管控的。而如果将 <code>React</code> 里的 <code>state</code> 属性和表单元素的值建立依赖关系，再通过 <code>onChange</code> 事件与 <code>setState()</code> 结合更新 <code>state</code> 属性，就能达到控制用户输入过程中表单发生的操作。被 <code>React</code> 以这种方式控制取值的表单输入元素就叫做<strong>受控组件</strong>。</p>
<p>比如现在实现一个简单的输入框，输入框中的内容会随着用户的输入而改变，首先使用受控组件实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class CommentBox extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            value: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = (event) =&gt; &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            value: event.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;form&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input</span><br><span class="line">                        type=&quot;text&quot;</span><br><span class="line">                        placeholder=&quot;请输入内容&quot;</span><br><span class="line">                        onChange=&#123;this.handleChange&#125;</span><br><span class="line">                        value=&#123;this.state.value&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于受控组件，我们需要为每个 <code>state</code> 中的值，编写一个函数来处理。</p>
<p>如果使用非受控组件实现上述功能，非受控组件将真实数据保存在 <code>DOM</code> 中，因此在使用非受控组件时，更容易集成 React 和非 React 代码，通过使用 <code>ref</code> 获取 <code>DOM</code> 元素信息的方式来获取表单元素的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class CommentBox extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit = (event) =&gt; &#123;</span><br><span class="line">        alert(this.textInput.value)</span><br><span class="line">        event.preventDefault() // 阻止默认事件，submit 默认事件会跳转页面</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;input</span><br><span class="line">                        type=&quot;text&quot;</span><br><span class="line">                        placeholder=&quot;请输入内容&quot;</span><br><span class="line">                        ref=&#123;(textInput) =&gt; &#123;this.textInput = textInput&#125;&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="状态提升和单向数据流"><a href="#状态提升和单向数据流" class="headerlink" title="状态提升和单向数据流"></a>状态提升和单向数据流</h2><p>多个组件需要共享一份相同的数据，最好将这个数据提升到父组件中进行管理，这种做法叫做状态提升</p>
<p>比如现在要实现一个留言列表功能，在输入框中输入数据提交后，会在上方的列表组件中显示出来，输入框组件和列表显示组件是 2 个组件，2 个组件之间的传值需要通过相同的父组件进行数据传递。</p>
<p>实现方案如下，包括 3 个文件 <code>App.js</code>、<code>CommentList.js</code> 和 <code>CommentBox.js</code>，其中 <code>App.js </code>是 <code>CommentList.js</code> 和 <code>CommentBox.js</code> 的父组件</p>
<ul>
<li><code>App.js</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line">import CommentBox from &#x27;./component/CommentBox&#x27;;</span><br><span class="line">import CommentList from &#x27;./component/CommentList&#x27;;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      comments: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 将该方法通过 props 传递给子组件 CommentBox,</span><br><span class="line">  // 子组件 CommentBox 调用该方法，实现向父组件传值的功能</span><br><span class="line">  addComment = (comment) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      comments: [...this.state.comments, comment]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; comments &#125; = this.state</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;CommentList comments=&#123;comments&#125;/&gt;</span><br><span class="line">        &lt;CommentBox </span><br><span class="line">          commentsLength=&#123;comments.length&#125;</span><br><span class="line">          onAddComment=&#123;this.addComment&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>2 <code>CommentList.js</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">// 当只是对 props 进行展示时，组件定义可以写成函数的形式简化</span><br><span class="line">const CommentList = (&#123; comments &#125;) =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    comments.map((comment, index) =&gt; </span><br><span class="line">                        &lt;li key=&#123;index&#125;&gt;&#123;comment&#125;&lt;/li&gt;</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default CommentList</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CommentBox.js</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class CommentBox extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            value: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = (event) =&gt; &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            value: event.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit = (event) =&gt; &#123;</span><br><span class="line">        // 相当于调用了外部传入的方法，将值传出去</span><br><span class="line">        this.props.onAddComment(this.state.value)</span><br><span class="line">        event.preventDefault() // 阻止默认事件，submit 默认事件会跳转页面</span><br><span class="line">        // 清空输入框</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            value: &#x27;&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;label&gt;留言内容&lt;/label&gt;</span><br><span class="line">                    &lt;input</span><br><span class="line">                        type=&quot;text&quot;</span><br><span class="line">                        placeholder=&quot;请输入内容&quot;</span><br><span class="line">                        onChange=&#123;this.handleChange&#125;</span><br><span class="line">                        value=&#123;this.state.value&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">                &lt;p&gt;已有&#123;this.props.commentsLength&#125;条评论&lt;/p&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default CommentBox;</span><br></pre></td></tr></table></figure>

<h2 id="Context-React-16-3-版本以上"><a href="#Context-React-16-3-版本以上" class="headerlink" title="Context (React 16.3 版本以上)"></a>Context (React 16.3 版本以上)</h2><p><code>props</code> 属性是由上到下单向传递的，需要层层传递，比如有 3 层组件的嵌套（父 -&gt; 子 -&gt; 孙），当“孙组件”需要“父组件”一个属性值时，则需要“父组件”先传递给“子组件”，然后“子组件”再传递给“孙组件”，即使“子组件”根本用不到这个属性。</p>
<p><code>Context</code> 提供了一种在组件之间共享此类值的方法，而不必通过组件树的每一个层级，显示的传递 <code>props</code>，其设计目的是为了共享那些对于组件来说是<code>全局的数据</code>，比如当前用户，页面语言等，注意<strong>不要因为仅仅避免一两个 props 的层级传递就是用 context</strong></p>
<p>使用 <code>Context</code> 需要 3 步</p>
<ol>
<li>创建 <code>Context</code> 对象</li>
<li>使用 <code>&lt;ThemeContext.Provider value=&#123;&#125;&gt;</code> 将组件包裹</li>
<li>使用到 <code>Context</code> 中的值的组件，需要用 <code>&lt;ThemeContext.Consumer&gt;</code> 包裹，并且使用表达式形式编写代码</li>
</ol>
<p>下面实现使用 <code>Context</code> 切换页面中按钮主题<code>浅色</code>和<code>深色</code>，主要包含 3 个文件 <code>App.js</code>、<code>ThemeBar.js </code>和 <code>theme-context.js</code></p>
<ul>
<li><p><code>theme-context.js</code> 首先创建 <code>Context</code> 对象，注意该文件不要放在 <code>component</code> 文件夹下，因为 <code>Context</code> 并不是一个组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">const ThemeContext = React.createContext()</span><br><span class="line"></span><br><span class="line">export default ThemeContext</span><br></pre></td></tr></table></figure></li>
<li><p><code>App.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line">import ThemeContext from &#x27;./theme-context&#x27;;</span><br><span class="line">import ThemeBar from &#x27;./component/ThemeBar&#x27;;</span><br><span class="line"></span><br><span class="line">const themes = &#123;</span><br><span class="line">  light: &#123;</span><br><span class="line">    classnames: &#x27;btn btn-primary&#x27;,</span><br><span class="line">    bgColor: &#x27;#eeeeee&#x27;,</span><br><span class="line">    color: &#x27;#000&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  dark: &#123;</span><br><span class="line">    classnames: &#x27;btn btn-light&#x27;,</span><br><span class="line">    bgColor: &#x27;#222222&#x27;,</span><br><span class="line">    color: &#x27;#fff&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      theme: &#x27;light&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  changeTheme = (myTheme) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      theme: myTheme</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;ThemeContext.Provider value=&#123;themes[this.state.theme]&#125;&gt;</span><br><span class="line">        &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">          &lt;header className=&quot;App-header&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#theme-switcher&quot;</span><br><span class="line">              className=&#x27;btn btn-light&#x27;</span><br><span class="line">              onClick=&#123;() =&gt; this.changeTheme(&#x27;light&#x27;)&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              浅色主题</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;#theme-switcher&quot;</span><br><span class="line">              className=&#x27;btn btn-dark&#x27;</span><br><span class="line">              onClick=&#123;() =&gt; this.changeTheme(&#x27;dark&#x27;)&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              深色主题</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">          &lt;/header&gt;</span><br><span class="line">          &lt;ThemeBar/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/ThemeContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></li>
<li><p><code>ThemeBar.js</code> （需要切换主题的按钮组件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ThemeContext from &quot;../theme-context&quot;;</span><br><span class="line"></span><br><span class="line">const ThemeBar = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;ThemeContext.Consumer&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                theme =&gt; &#123;</span><br><span class="line">                    return (</span><br><span class="line">                        &lt;div</span><br><span class="line">                            className=&#x27;alert mt-5&#x27;</span><br><span class="line">                            style=&#123;&#123;backgroundColor:theme.bgColor, color: theme.color&#125;&#125;</span><br><span class="line">                        &gt;</span><br><span class="line">                        样式区域</span><br><span class="line">                        &lt;button className=&#123;theme.classnames&#125;&gt;</span><br><span class="line">                            样式按钮</span><br><span class="line">                        &lt;/button&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/ThemeContext.Consumer&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ThemeBar</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>String</title>
    <url>/2021/11/10/String/</url>
    <content><![CDATA[<p>String 对象是使用最频繁的一个对象类型，也是 Java 语言中，内存占据空间最大的一个对象，接下来从实现、特性以及实际应用中的优化，深入了解 String 对象。</p>
<span id="more"></span>

<h2 id="Java-对象是如何实现的？"><a href="#Java-对象是如何实现的？" class="headerlink" title="Java 对象是如何实现的？"></a>Java 对象是如何实现的？</h2><p>Java 中 String 对象做了大量的优化，来节省内存空间和提升性能，如下图所示：<br>    <img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131817946.png"></p>
<ul>
<li><p>1、在 Java6 中，String 对象是通过 offset 和 count 两个属性来定位 char[] 数组。但是 String.substring() 方法会产生内存泄漏。Java6 中的源码如下,可以发现，由 substring(start,end) 调用构造函数 String(int,in,char[]) 时，其实是改变 offset 和 count 的位置达到取得子字符串的目的，而子字符串里的 value[] 数组，仍然指向原字符串。假设原字符串 s 有 1GB，且我们需要的是 s.substring(1,10) 这样一段小的字符串，但因为 substring() 里的 value[] 数组仍然指向 1GB 的原字符串，致使原字符串没法在 GC 中释放，从而产生了内存泄露。这样设计共享同一个字符数组，在调用 substring 时无需复制数组，可重用 value[] 数组，性能得到提升，随之带来的劣势则是会发生内存泄漏。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (endIndex &gt; count) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (beginIndex &gt; endIndex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex - beginIndex);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == count)) ? <span class="keyword">this</span> :</span><br><span class="line">         <span class="keyword">new</span> String(offset + beginIndex, endIndex - beginIndex, value);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> String(<span class="keyword">int</span> offset, <span class="keyword">int</span> count, <span class="keyword">char</span> value[]) &#123;</span><br><span class="line">     <span class="keyword">this</span>.value = value;</span><br><span class="line">     <span class="keyword">this</span>.offset = offset;</span><br><span class="line">     <span class="keyword">this</span>.count = count;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>2、在 Java7 和 Java8 中, String.substring 方法不在共享 char[],而是使用复制的方式，解决了内存泄漏的问题，源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">      <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></span><br><span class="line">             : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>3、从 Java9 开始，char[] 字段改为了 byte[] 字段，同时又维护了一个新的属性 coder，它是一个编码格式的标识。这是因为一个 char 字符占 16 位，2 个字节。这个情况下，存储单字节编码内的字符（占一个字节的字符）就显得非常浪费。Java9 的 String 类为了节约内存空间，于是使用了占 8 位，1 个字节的 byte 数组来存放字符串。而新属性 coder 的作用是，在计算字符串长度或者使用 indexOf() 函数时，我们需要根据这个字段，判断如何计算字符串长度。coder 属性默认有 0 和 1 两个值，0 代表 Latin-1（单字节编码），1 代表 UTF-16。如果 String 判断字符串只包含了 Latin-1，则 coder 属性值为 0，反之则为 1。对于大多数的字符串操作，都将检查 coder 变量，从而采取特定的实现，以 indexOf 为例：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() </span><br><span class="line">      ? StringLatin1.indexOf(value, ch, fromIndex) </span><br><span class="line">      : StringUTF16.indexOf(value, ch, fromIndex);</span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLatin1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> COMPACT_STRINGS &amp;&amp; coder == LATIN1;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Java-对象的不可变性"><a href="#Java-对象的不可变性" class="headerlink" title="Java 对象的不可变性"></a>Java 对象的不可变性</h2><p>Java 中的 String 类是被 <code>final</code> 关键字修饰的，而且 char 数组也被 <code>final</code> 修饰了。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br></pre></td></tr></table></figure>

<p>用 final 修饰类，则 String 类不可继承，char[] 对象被 private final 修饰，则该 String 对象不可更改，所以 String 对象具有不可变性，这样做有以下好处：</p>
<ul>
<li><p>1、保证 String 对象的安全性。假设 String 对象是可变的，那么 String 对象将可能被恶意修改。</p>
</li>
<li><p>2、保证 hash 属性值不会频繁变更，确保了唯一性，使得类似 HashMap 容器才能实现相应的 key-value 缓存功能。</p>
</li>
<li><p>3、可以实现字符串常量池。在 Java 中，通常有两种创建字符串对象的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1)通过字符串常量的方式创建</span></span><br><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">// (2)通过new创建</span></span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>当代码中使用第一种方式创建字符串对象时，JVM 首先会检查该对象是否在字符串常量池中，如果在，就返回该对象引用，否则新的字符串将在常量池中被创建。这种方式可以减少同一个值的字符串对象的重复创建，节约内存。</p>
</li>
</ul>
<h2 id="String-intern"><a href="#String-intern" class="headerlink" title="String.intern()"></a>String.intern()</h2>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">String str3 = str2.intern();</span><br><span class="line">System.out.println(str1 == str2);</span><br><span class="line">System.out.println(str2 == str3);</span><br><span class="line">System.out.println(str1 == str3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>首先看一下下面代码的字符串对象的创建：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = “abc”;</span><br><span class="line">String str2 = “abc”;</span><br><span class="line">String str3 = “abc”;</span><br><span class="line">String str4 = <span class="keyword">new</span> String(“abc”);</span><br><span class="line">String str5 = <span class="keyword">new</span> String(“abc”);</span><br></pre></td></tr></table></figure>

<p>上面的代码所创建的对象在 JVM 中是这样存在的</p>
<p><img src="https://raw.githubusercontent.com/xls56iii/blog-images/main/202208131817186.jpg"></p>
<p>可以发现，(1) 通过字符串常量创建 String 对象时，会在常量池中创建一个字符串常量，然后对象的引用指向该常量，(2) 当通过 new 的方法创建一个字符串时，如果此时字符串常量池中已经存在了相同内容的字符串常量，则首先会在堆中创建一个 str4 变量的对象引用，然后将这个对象引用指向字符串常量池中已经存在的常量。(3) 当 new 一个 String 变量时，如果此时字符串常量池中不存在该字符串常量，则先在常量池中创建一个，然后再在堆中 new 一个 String 对象指向常量池中的字符串，最后再将栈中的变量指向堆中的 String 对象。</p>
<p>简单来说，new String() 就是在堆中开辟新空间，而 intern() 返回的就是常量池的引用地址，所以最上面的代码结果分别是 <code>false</code>,<code>false</code>,<code>true</code>.</p>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>Twitter 每次发布消息状态的时候，都会产生一个地址信息，以当时 Twitter 用户的规模预估，服务器需要 32G 的内存来存储地址信息。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String region;</span><br><span class="line">    <span class="keyword">private</span> String countryCode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> longitude;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> latitude;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>考虑到其中有很多用户在地址信息上是有重合的，比如，国家、省份、城市等，这时就可以将这部分信息单独列出一个类，以减少重复，代码如下：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedLocation</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String city;</span><br><span class="line">  <span class="keyword">private</span> String region;</span><br><span class="line">  <span class="keyword">private</span> String countryCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> SharedLocation sharedLocation;</span><br><span class="line">  <span class="keyword">double</span> longitude;</span><br><span class="line">  <span class="keyword">double</span> latitude;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过优化，数据存储大小减到了 20G 左右。但对于内存存储这个数据来说，依然很大，怎么办呢？</p>
<p>这个案例来自一位 Twitter 工程师在 QCon 全球软件开发大会上的演讲，他们想到的解决方法，就是使用 String.intern 来节省内存空间，从而优化 String 对象的存储。 </p>
<p>具体做法就是，在每次赋值的时候使用 String 的 intern 方法，如果常量池中有相同值，就会重复使用该对象，返回对象引用，这样一开始的对象就可以被回收掉。这种方式可以使重复性非常高的地址信息存储大小从 20G 降到几百兆。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SharedLocation sharedLocation = <span class="keyword">new</span> SharedLocation();</span><br><span class="line"></span><br><span class="line">sharedLocation.setCity(messageInfo.getCity().intern()); </span><br><span class="line">sharedLocation.setCountryCode(messageInfo.getRegion().intern());</span><br><span class="line">sharedLocation.setRegion(messageInfo.getCountryCode().intern());</span><br><span class="line"></span><br><span class="line">Location location = <span class="keyword">new</span> Location();</span><br><span class="line">location.setSharedLocation(sharedLocation);</span><br><span class="line">location.setLongitude(messageInfo.getLongitude().intern());</span><br><span class="line">location.setLatitude(messageInfo.getLatitude().intern());</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 基础语法介绍</title>
    <url>/2021/11/20/TypeScript/</url>
    <content><![CDATA[<p>TypeScript 发展至今，已经成为大型项目的标配，其提供的静态类型系统，大大增强了代码的可读性以及可维护性；同时，它提供最新和不断发展的 JavaScript 特性，能让我们建立更健壮的组件。</p>
<span id="more"></span>

<h2 id="TypeScript-Javascript-that-scales"><a href="#TypeScript-Javascript-that-scales" class="headerlink" title="TypeScript:Javascript that scales"></a>TypeScript:Javascript that scales</h2><p>动态类型语言 (Dynamically Typed Language): 在运行期间才会做数据类型的检查，JavaScript，Python</p>
<p>静态类型语言 (Statically Typed Language): 数据类型检查在编译阶段，C，C++，Java</p>
<h2 id="TypeScript-有哪些优劣"><a href="#TypeScript-有哪些优劣" class="headerlink" title="TypeScript 有哪些优劣"></a>TypeScript 有哪些优劣</h2><ul>
<li>1、程序更容易理解，可以知道函数或者方法输入输出的参数类型，外部条件等</li>
<li>2、效率更高，在 IDE 的帮助下可以在不同代码块和定义中进行跳转，代码自动补全，丰富的接口提示</li>
<li>3、更少的错误，在编译期间可以发现大部分的错误，杜绝一些比较常见的错误</li>
<li>4、非常好的包容性，完全兼容 JavaScript</li>
<li>5、增加了一些学习成本</li>
<li>6、短期内增加了一些开发成本</li>
</ul>
<h2 id="TypeScript-基础语法"><a href="#TypeScript-基础语法" class="headerlink" title="TypeScript 基础语法"></a>TypeScript 基础语法</h2><ul>
<li><p>1、基础类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> binaryNumber: <span class="built_in">number</span> = <span class="number">0b1111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> firstName: <span class="built_in">string</span> = <span class="string">&#x27;xls56i&#x27;</span></span><br><span class="line"><span class="keyword">let</span> message: <span class="built_in">string</span> = <span class="string">`Hello, <span class="subst">$&#123;firstName&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span></span><br><span class="line">notSure = <span class="string">&#x27;maybe it is a string&#x27;</span></span><br><span class="line">notSure = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">notSure.myName</span><br><span class="line">notSure.getName()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberOrString: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="number">234</span></span><br><span class="line">numberOrString = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrOfNumbers: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arrOfNumbers.push(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;xls56i&#x27;</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>2、Interface</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="keyword">readonly</span> id: <span class="built_in">number</span>; <span class="comment">// 只读属性 readonly用在属性上,const用在变量上</span></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me: Person = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1234</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;viking&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>3、Function</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> add1 = <span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z: <span class="built_in">number</span> = <span class="number">10</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型推断 (x: number, y: number, z?: number) =&gt; number 是add2的类型</span></span><br><span class="line"><span class="keyword">const</span> add2: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = add1</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = add2(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>4、类 Class</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">static</span> categoies: <span class="built_in">string</span>[] = [<span class="string">&#x27;mammal&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>]</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">isAnimal</span>(<span class="params">a: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">instanceof</span> Animal</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  run(place: <span class="built_in">String</span>): <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is running in <span class="subst">$&#123;place&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Animal.categoies)</span><br><span class="line"><span class="keyword">const</span> snake = <span class="keyword">new</span> Animal(<span class="string">&#x27;lily&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Animal.isAnimal(snake))</span><br><span class="line"><span class="comment">// [ &#x27;mammal&#x27;, &#x27;bird&#x27; ]</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is barking`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;dog&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dog.bark())</span><br><span class="line"><span class="built_in">console</span>.log(dog.run(<span class="string">&#x27;room&#x27;</span>))</span><br><span class="line"><span class="comment">// dog is barking</span></span><br><span class="line"><span class="comment">// dog is running in room</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Meow, &#x27;</span> + <span class="built_in">super</span>.run(<span class="string">&#x27;bedroom&#x27;</span>) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(cat.run())</span><br><span class="line"><span class="comment">// cat</span></span><br><span class="line"><span class="comment">// Meow, cat is running in bedroom</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>5、 Interface</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Radio &#123;</span><br><span class="line">  switchRadio(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Battery &#123;</span><br><span class="line">  checkBatteryStatus(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface之间可以继承</span></span><br><span class="line"><span class="keyword">interface</span> RadioWithBattery <span class="keyword">extends</span> Radio &#123;</span><br><span class="line">  checkBatteryStatus(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> <span class="title">Radio</span></span>&#123;</span><br><span class="line">  switchRadio(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cellphone</span> <span class="title">implements</span> <span class="title">Radio</span>, <span class="title">Battery</span> </span>&#123;</span><br><span class="line">  switchRadio(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">  checkBatteryStatus(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cellphone1</span> <span class="title">implements</span> <span class="title">RadioWithBattery</span> </span>&#123;</span><br><span class="line">  switchRadio(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">  checkBatteryStatus(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>6、 Enum</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认是按照从0开始</span></span><br><span class="line"><span class="comment">// const 定义常量枚举可以提升性能</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Direction &#123;</span><br><span class="line">  UP,</span><br><span class="line">  DOWN,</span><br><span class="line">  LEFT,</span><br><span class="line">  RIGHT,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Direction.UP)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用const修饰的枚举支持反向映射</span></span><br><span class="line"><span class="built_in">enum</span> Direction &#123;</span><br><span class="line">  UP,</span><br><span class="line">  DOWN,</span><br><span class="line">  LEFT,</span><br><span class="line">  RIGHT,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Direction.UP)</span><br><span class="line"><span class="comment">// 支持反向映射</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction[<span class="number">0</span>])</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// UP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值会按顺序往下</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Direction &#123;</span><br><span class="line">  UP = <span class="number">10</span>,</span><br><span class="line">  DOWN,</span><br><span class="line">  LEFT,</span><br><span class="line">  RIGHT,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Direction.DOWN)</span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Direction &#123;</span><br><span class="line">  UP = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">  DOWN = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">  LEFT = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">  RIGHT = <span class="string">&#x27;RIGHT&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Direction.UP)</span><br><span class="line"><span class="comment">// UP</span></span><br></pre></td></tr></table></figure>

<p>  为什么常量枚举可以提升性能呢？把以下两种 ts 代码，编译成 js 代码查看:</p>
<p>  没有使用 <code>const</code> 变量修饰的枚举</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction &#123;</span><br><span class="line">  UP,</span><br><span class="line">  DOWN,</span><br><span class="line">  LEFT,</span><br><span class="line">  RIGHT,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (value === Direction.UP) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  编译成 js 代码后:</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Direction;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Direction</span>) </span>&#123;</span><br><span class="line">    Direction[Direction[<span class="string">&quot;UP&quot;</span>] = <span class="number">0</span>] = <span class="string">&quot;UP&quot;</span>;</span><br><span class="line">    Direction[Direction[<span class="string">&quot;DOWN&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;DOWN&quot;</span>;</span><br><span class="line">    Direction[Direction[<span class="string">&quot;LEFT&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;LEFT&quot;</span>;</span><br><span class="line">    Direction[Direction[<span class="string">&quot;RIGHT&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;RIGHT&quot;</span>;</span><br><span class="line">&#125;)(Direction || (Direction = &#123;&#125;));</span><br><span class="line"><span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (value === Direction.UP) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  使用 <code>const</code> 变量修饰的枚举</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Direction &#123;</span><br><span class="line">  UP,</span><br><span class="line">  DOWN,</span><br><span class="line">  LEFT,</span><br><span class="line">  RIGHT,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (value === Direction.UP) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  编译成 js 代码后</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (value === <span class="number">0</span> <span class="comment">/* UP */</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  可以发现常量枚举会直接内恋枚举对应的值</p>
</li>
<li><p>7、Generics</p>
<p>如果把输入参数类型和输出类型都定义为 <code>any</code>，输入输出类型可能会不统一,可能会发生如下情况，输入参数实际是 <code>number</code> 类型，输出类型定义为 <code>boolean</code>，编译也不会出错</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> res: <span class="built_in">boolean</span> = echo(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<p>为了解决以上问题使用范型 (Generics) 解决</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = echo(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">tuple: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result2 = swap([<span class="string">&#x27;string&#x27;</span>, <span class="number">123</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束范型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithArr</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arrs = echoWithArr([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>如果传入 echoWithArr 一个 <code>string</code> 类型， <code>string</code> 类型也是具有 <code>length</code> 属性的，但是不能传入 echoWithArr 函数中，因为不是数组，解决该问题使用以下方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IWithLength &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">IWithLength</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = echoWithLength(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj = echoWithLength(&#123; <span class="attr">length</span>: <span class="number">10</span>, <span class="attr">width</span>: <span class="number">10</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> arr2 = echoWithLength([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>使用 <code>Generics</code> 实现一个队列</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> data: T[] = [];</span><br><span class="line">  push = <span class="function">(<span class="params">item: T</span>) =&gt;</span> <span class="built_in">this</span>.data.push(item);</span><br><span class="line">  pop = (): T | <span class="function"><span class="params">undefined</span> =&gt;</span> <span class="built_in">this</span>.data.shift();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.pop())</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue2 = <span class="keyword">new</span> Queue&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">queue2.push(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue2.pop())</span><br><span class="line"><span class="comment">// &#x27;str&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>8、type 类型别名</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> PlusType = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum2: PlusType  = sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> NameOrResolver = <span class="built_in">string</span> | NameResolver</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://jkchao.github.io/typescript-book-chinese/">深入理解 TypeScript</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
</search>
